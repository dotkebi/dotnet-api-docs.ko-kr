<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5347d5c8039df45d4a22ad4c9c33925b67ae00a2" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57941076" /></Metadata><TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f8059-101">Visual Basic <see langword="Collection" />은 하나의 단위로 참조할 수 있는 정렬된 항목 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f8059-102">가능 하면의 제네릭 컬렉션을 사용 해야 합니다 <xref:System.Collections.Generic?displayProperty=nameWithType> 네임 스페이스 또는 <xref:System.Collections.Concurrent> Visual Basic 대신 네임 스페이스 `Collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="f8059-103">자세한 내용은 [컬렉션](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-103">For more information, see [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="f8059-104">Visual Basic `Collection` 개체는 단일 개체로 관련된 그룹 항목을 참조 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="f8059-105">항목 또는 *요소*의 컬렉션을 컬렉션에 존재 한다는 사실 때문만 관련 될 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="f8059-106">컬렉션의 요소는 동일한 데이터 형식을 공유할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="f8059-107">다음 예제와 같이 다른 개체를 만든 동일한 방식으로 컬렉션을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="f8059-108">컬렉션을 만든 후 다음 중 하나를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="f8059-109">요소를 추가 합니다 <xref:Microsoft.VisualBasic.Collection.Add%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="f8059-110">요소를 제거 합니다 <xref:Microsoft.VisualBasic.Collection.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="f8059-111">모든 요소를 제거 합니다 <xref:Microsoft.VisualBasic.Collection.Clear%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="f8059-112">컬렉션을 포함 하는 여러 요소 수를 찾기는 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="f8059-113">특정 요소를 사용 하 여 있는지 여부를 확인 합니다 <xref:Microsoft.VisualBasic.Collection.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="f8059-114">특정 요소를 사용 하 여 컬렉션에서 반환 된 <xref:Microsoft.VisualBasic.Collection.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="f8059-115">사용 하 여 전체 컬렉션을 반복 합니다 [각각에 대 한 중... 다음 문을](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f8059-116">하지만 Visual Basic `Collection` 개체에 동일한 기능을 `Collection` 개체 Visual Basic 6.0에서 두 개의 COM 환경에서 상호 작용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="f8059-117">Visual Basic 반복 `Collection` 는 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="f8059-118">컬렉션이 동기화 되는 경우에 다른 스레드에서 예외를 throw 하면 열거자는 컬렉션을 수정할 여전히 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="f8059-119">을 열거 하는 동안 스레드로부터 안전을 보장 하기 위해 컬렉션을 잠금 또는 다른 스레드에서 변경에서 발생 되는 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="f8059-120">프로그래밍 요소 잠금에 대 한 자세한 내용은 참조 하세요. [SyncLock 문](~/docs/visual-basic/language-reference/statements/synclock-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-121">다음 예제에서는 합니다 `Collection` 개체 `names` 및 대화 상자는 사용자 개체를 추가할 수 (이름) 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="f8059-122">다음 컬렉션의 이름을 표시 하 고 마지막으로 삭제 하지 않고 컬렉션을 비웁니다는 `Collection` 개체 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="f8059-123">선택이 작동 하는 방법을 보려면 합니다 **클래스 추가** 명령을 합니다 **프로젝트** 메뉴 라는 공용 변수를 선언 하 고 `instanceName` 모듈 수준에서 `nameClass` (형식 `Public instanceName`) 보유 하 각 인스턴스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="f8059-124">으로 기본 이름을 그대로 `nameClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="f8059-125">복사 하 고 다음 코드를 붙여 합니다 **일반** 다른 모듈의 다음 문을 사용 하 여 시작 `classNamer` 다른 프로시저에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="f8059-126">(이 예제에서는 클래스를 지 원하는 호스트 응용 프로그램 에서만 작동 합니다.)</span><span class="sxs-lookup"><span data-stu-id="f8059-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8059-127">새 Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 만들어 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-128">이 생성자에 의해 반환 되는 Visual Basic 컬렉션은 비어 있으며 초기 용량이 할당 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="f8059-129">Visual Basic 컬렉션와 호환 되지 않습니다.는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 에서 사용할 수 있는 컬렉션을 <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, 및 <xref:System.Collections.Specialized?displayProperty=nameWithType> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-130">다음 예제에서는 새 Visual Basic 컬렉션을 만들고를 변수에 할당 `coll`:</span><span class="sxs-lookup"><span data-stu-id="f8059-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="f8059-131">이렇게 `Collection` 개체는 1부터 즉, 1의 값을 통해 요소 범위의 인덱스 값을 `Count` 속성.</span><span class="sxs-lookup"><span data-stu-id="f8059-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="f8059-132">Visual Basic 컬렉션 형식의 요소만 포함 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="f8059-133">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="f8059-133">Required.</span></span> <span data-ttu-id="f8059-134">컬렉션에 추가할 요소를 지정하는 형식의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="f8059-135">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-135">Optional.</span></span> <span data-ttu-id="f8059-136">위치 인덱스 대신 컬렉션의 이 새 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="f8059-137">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-137">Optional.</span></span> <span data-ttu-id="f8059-138">컬렉션에서 상대적 위치를 지정하는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="f8059-139">컬렉션에서 추가되는 요소는 <paramref name="Before" /> 인수에 의해 식별되는 요소 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-139">The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument.</span></span> <span data-ttu-id="f8059-140"><paramref name="Before" />가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-140">If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="f8059-141"><paramref name="Before" />가 <see langword="String" /> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-141">If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="f8059-142"><paramref name="Before" />와 <paramref name="After" />를 둘 다 지정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-142">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <param name="After"><span data-ttu-id="f8059-143">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-143">Optional.</span></span> <span data-ttu-id="f8059-144">컬렉션에서 상대적 위치를 지정하는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="f8059-145">컬렉션에서 추가되는 요소는 <paramref name="After" /> 인수에 의해 식별되는 요소 뒤에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-145">The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument.</span></span> <span data-ttu-id="f8059-146"><paramref name="After" />가 숫자 식인 경우 이 인수는 1에서 컬렉션의 <see langword="Count" /> 속성 값 사이의 숫자여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-146">If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="f8059-147"><paramref name="After" />가 <see langword="String" /> 식인 경우 이 인수는 참조되는 요소가 컬렉션에 추가될 때 지정한 키 문자열과 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-147">If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="f8059-148"><paramref name="Before" />와 <paramref name="After" />를 둘 다 지정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-148">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <summary><span data-ttu-id="f8059-149"><see langword="Collection" /> 개체에 요소를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-150">합니다 `Before` 또는 `After` 인수 컬렉션의 기존 요소를 참조 해야 합니다. 그렇지 않으면 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="f8059-151">경우에 `Before` 및 `After` 인수를 생략 하면 새 개체 컬렉션의 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="f8059-152">지정 된 경우에 오류가 발생 `Key` 값 컬렉션의 기존 요소에 대 한 키와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-153">다음 예제에서는 합니다 `Add` 추가 하는 방법 `child` 개체 클래스의 인스턴스 라는 `child` 포함 하는 `Public` 속성 `name` -이라는 컬렉션을 `family`.</span><span class="sxs-lookup"><span data-stu-id="f8059-153">The following example uses the `Add` method to add `child` objects - instances of a class called `child` containing a `Public` property `name` - to a collection called `family`.</span></span> <span data-ttu-id="f8059-154">작동 방식을 확인 하려면 만듭니다는 <xref:System.Windows.Forms.Form> 두 개의 <xref:System.Windows.Forms.Button> 컨트롤 집합과 해당 <xref:System.Windows.Forms.Control.Text%2A> 속성을 `Add` 및 `List`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="f8059-155">추가 된 `child` 클래스 정의 및 `family` 폼 코드에 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="f8059-156">수정 된 `_Click` 에 대 한 이벤트 처리기는 **추가** 및 **목록** 같이 단추.</span><span class="sxs-lookup"><span data-stu-id="f8059-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="f8059-157">합니다 **추가** 단추 하위 항목을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="f8059-158">합니다 **목록** 단추 모든 자식의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8059-159">Visual Basic <see langword="Collection" /> 개체의 모든 요소를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-160">합니다 `Clear` 메서드는 컬렉션을 비우고 되돌린 해당 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 0입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="f8059-161">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="f8059-161">Required.</span></span> <span data-ttu-id="f8059-162">컬렉션 요소를 검색할 키를 지정하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="f8059-163">Visual Basic <see langword="Collection" /> 개체에 특정 키를 가진 요소가 포함되어 있는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-163">Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="f8059-164">Visual Basic <see langword="Collection" /> 개체에 특정 키가 있는 요소가 포함되어 있으면 <see langword="true" />이고. 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-164"><see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-165">`Contains` 반환 `True` 컬렉션 정확 하 게 일치 하는 키가 있는 요소가 들어 있으면 `Key`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="f8059-166">그렇지 않으면 `Contains`에서 `False`을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="f8059-167">키 값 비교 시 대/소문자는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="f8059-168">Visual Basic `Collection` 키가 있는 일부 요소 및 키가 없는 기타 요소를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="f8059-169">이 있는지 여부에 따라 달라 집니다에 대 한 호출을 <xref:Microsoft.VisualBasic.Collection.Add%2A> 하면 선택적 인수를 제공 하는 메서드 `Key` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="f8059-170">컬렉션에서 해당 키를 사용 하 여 요소를 검색 하려는 경우이 제공 해야 합니다 `Key` 인수를 호출할 때마다는 `Add` 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-171">컬렉션에 있는 요소 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-171">Gets the number of elements in a collection.</span></span></summary>
        <value><span data-ttu-id="f8059-172">컬렉션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-172">The number of elements in a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-173">사용 합니다 `Count` 의 요소 수를 확인 하는 속성을 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-173">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-174">이 예제에서는 `Count` 의 요소 수를 표시 하는 속성을 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-174">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f8059-175">합니다 `Collection` 개체는 1부터 즉, 1의 값을 통해 요소 범위의 인덱스 값을 `Count` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-175">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8059-176">컬렉션을 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-176">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="f8059-177">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-177">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-178">[각각에 대 한 중... 다음 문](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) 호출 `GetEnumerator` 컬렉션의 요소에 대 한 반복을 지원 하는 열거자 개체를 가져와야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-178">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="f8059-179">사용 하는 일반적으로 `For Each`... `Next` 컬렉션 또는 배열에 이동할 루프 및 호출할 필요가 없습니다 `GetEnumerator` 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-179">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="f8059-180">반복을 보다 자세히 제어 해야 하는 경우는 `For Each`... `Next` 문은 제공을 사용할 수는 `GetEnumerator` 사용자 지정된 탐색을 수행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-180">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="f8059-181">다음은이 작업을 수행 해야 하는 경우도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-181">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="f8059-182">컬렉션의 시작 부분에 반환 하 고 완료 되기 전에 다시 반복을 시작 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-182">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="f8059-183">다양 한 이유로 대 한 하나 이상의 요소를 건너 뛰 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-183">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="f8059-184">탐색 도중에 컬렉션의 요소를 변경 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-184">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="f8059-185">이 경우 이전 무효화 되므로 새 열거자 개체를 가져와야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-185">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-186">다음 예제에서는 사용 하는 방법을 보여 줍니다 `GetEnumerator` 의 모든 요소를 검색 하는 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-186">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f8059-187">`GetEnumerator` 생성 하 고 구현 하는 열거자 개체를 반환 합니다 <xref:System.Collections.IEnumerator> 의 인터페이스는 <xref:System.Collections> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-187">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="f8059-188">열거자 개체를 노출 합니다 <xref:System.Collections.IEnumerator.Current%2A> 속성 및 <xref:System.Collections.IEnumerator.MoveNext%2A> 고 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8059-188">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="f8059-189">자세한 내용은 참조 하세요. [각각에 대 한 중... 다음 문을](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-189">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8059-190">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-190">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="f8059-191">컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-191">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="f8059-192"><paramref name="Index" />는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-192"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="f8059-193">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <see langword="Object" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-193">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="f8059-194">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-194">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="f8059-195">특정 요소는 <see langword="Collection" /> 위치 또는 키 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-195">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-196">하는 경우 `Index` 형식입니다 `Object`의 `Item` 속성으로 처리 하려고를 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-196">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="f8059-197">경우 `Item` 변환할 수 없습니다 `Index` 하 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-197">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="f8059-198">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-198">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="f8059-199">따라서 다음 코드 줄은 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-199">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="f8059-200">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-200">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="f8059-201">만듭니다 `birthdays` 으로 `Collection` 개체 및 키를 사용 하 여 자재 명세서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-201">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f8059-202">첫 번째 호출에서 명시적으로 지정 하는 참고를 `Item` 속성인 되지만 두 번째 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-202">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="f8059-203">때문에 호출이 둘 다에서 작동 합니다 `Item` 속성에 대 한 기본 속성은을 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-203">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="f8059-204">컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-204">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="f8059-205"><paramref name="Index" />는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-205"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="f8059-206">또는 (B) 컬렉션 요소의 키 문자열이나 위치를 지정하는 <see langword="Object" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-206">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="f8059-207">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-207">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="f8059-208">특정 요소는 <see langword="Collection" /> 위치 또는 키 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-208">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-209">하는 경우 `Index` 형식입니다 `Object`의 `Item` 속성으로 처리 하려고를 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-209">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="f8059-210">경우 `Item` 변환할 수 없습니다 `Index` 하 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-210">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="f8059-211">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-211">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="f8059-212">따라서 다음 코드 줄은 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-212">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="f8059-213">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-213">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="f8059-214">만듭니다 `birthdays` 으로 `Collection` 개체 및 키를 사용 하 여 자재 명세서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-214">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f8059-215">첫 번째 호출에서 명시적으로 지정 하는 참고를 `Item` 속성인 되지만 두 번째 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-215">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="f8059-216">때문에 호출이 둘 다에서 작동 합니다 `Item` 속성에 대 한 기본 속성은을 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-216">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="f8059-217">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-217">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="f8059-218"><paramref name="Key" />는 요소가 컬렉션에 추가될 때 지정한 <paramref name="Key" /> 인수와 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-218"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="f8059-219">위치나 키를 기준으로 <see langword="Collection" /> 개체의 특정 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-219">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="f8059-220">특정 요소는 <see langword="Collection" /> 위치 또는 키 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-220">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-221">하는 경우 `Index` 형식입니다 `Object`의 `Item` 속성으로 처리 하려고를 `String`, `Char`, `Char` 배열 또는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-221">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="f8059-222">경우 `Item` 변환할 수 없습니다 `Index` 하 `String` 또는 `Integer`, throw는 <xref:System.ArgumentException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-222">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="f8059-223">`Item` 속성은 컬렉션에 대 한 기본 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-223">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="f8059-224">따라서 다음 코드 줄은 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-224">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="f8059-225">다음 예제에서는 `Item` 컬렉션의 개체에 대 한 참조를 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-225">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="f8059-226">만듭니다 `birthdays` 으로 `Collection` 개체 및 키를 사용 하 여 자재 명세서의 생일을 나타내는 개체를 검색 합니다 `"Bill"` 로 `Index` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-226">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f8059-227">첫 번째 호출에서 명시적으로 지정 하는 참고를 `Item` 속성인 되지만 두 번째 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-227">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="f8059-228">때문에 호출이 둘 다에서 작동 합니다 `Item` 속성에 대 한 기본 속성은을 `Collection` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-228">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8059-229"><see langword="Collection" /> 개체에서 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-229">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="f8059-230">컬렉션 요소의 위치를 지정하는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-230">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="f8059-231"><paramref name="Index" />는 1에서 컬렉션의 <see cref="P:Microsoft.VisualBasic.Collection.Count" /> 속성 값 사이의 숫자여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-231"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="f8059-232"><see langword="Collection" /> 개체에서 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-232">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-233">때 `Remove` 컬렉션에서 요소를 삭제 합니다.이 감소 컬렉션의 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 1 씩입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-233">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="f8059-234">것도 감소는 `Index` 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-234">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="f8059-235">요소 없이 컬렉션에 추가 된 경우는 `Key`를 사용 해야 합니다 해당 `Index` 를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-235">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-236">이 예제에서는 사용 합니다 `Remove` 에서 개체를 제거 하는 방법을 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-236">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="f8059-237">네 번 호출 하는 `Add` 메서드를 `Count` 속성에는 4가 포함 되어 요소 `"Bill"` 인덱스 값 1이 있고 요소 `"Pete"` 인덱스 값은 4입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-237">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="f8059-238">호출 다음에 첫 번째 `Remove`, `Count` 이 3 이면 요소 `"Bill"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값 3입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-238">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="f8059-239">호출 다음에 두 번째 `Remove`, `Count` 가 2 인 요소 `"Mike"` 삭제 된 및 요소 `"Pete"` 인덱스 값은 2입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-239">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="f8059-240">위치 인덱스 대신 컬렉션의 요소에 액세스하는 데 사용할 수 있는 키 문자열을 지정하는 고유 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-240">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="f8059-241"><paramref name="Key" />는 요소가 컬렉션에 추가될 때 지정한 <paramref name="Key" /> 인수와 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-241"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="f8059-242"><see langword="Collection" /> 개체에서 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-242">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-243">때 `Remove` 컬렉션에서 요소를 삭제 합니다.이 감소 컬렉션의 <xref:Microsoft.VisualBasic.Collection.Count%2A> 속성을 1 씩입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-243">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="f8059-244">것도 감소는 `Index` 컬렉션에서 삭제 된 요소 다음에 있던 모든 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-244">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="f8059-245">요소 없이 컬렉션에 추가 된 경우는 `Key`를 사용 해야 합니다 해당 `Index` 를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-245">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8059-246">이 예제에서는 사용 합니다 `Remove` 에서 개체를 제거 하는 방법을 <xref:Microsoft.VisualBasic.Collection> 변수에 개체 `birthdays`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-246">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="f8059-247">네 번 호출 하는 `Add` 메서드를 `Count` 속성에는 4가 포함 되어 요소 `"Bill"` 인덱스 값 1이 있고 요소 `"Pete"` 인덱스 값은 4입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-247">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="f8059-248">호출 다음에 첫 번째 `Remove`, `Count` 이 3 이면 요소 `"Bill"` 삭제 되 면 및 요소 `"Pete"` 인덱스 값 3입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-248">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="f8059-249">호출 다음에 두 번째 `Remove`, `Count` 가 2 인 요소 `"Mike"` 삭제 된 및 요소 `"Pete"` 인덱스 값은 2입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-249">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo" ExplicitInterfaceMemberName="ICollectionCopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="f8059-250"><see cref="T:System.Array" /> 개체에서 복사되는 요소의 대상인 1차원 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-250">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="f8059-251"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-251">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="f8059-252"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-252">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="f8059-253">특정 <see cref="T:Microsoft.VisualBasic.Collection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-253">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-254">요소에 복사 됩니다는 <xref:System.Array> 열거자가 반복 나타나는 순서에서는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-254">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="f8059-255">이 메서드는 O (`n`) 작업, 여기서 `n` 에서 가져온는 <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-255">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f8059-256"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-256"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8059-257"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-257"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f8059-258"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-258"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="f8059-259">또는</span><span class="sxs-lookup"><span data-stu-id="f8059-259">-or-</span></span> 
<span data-ttu-id="f8059-260">소스 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 요소 수가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-260">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="f8059-261">소스 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 형식이 대상 <paramref name="array" />의 형식으로 자동 캐스팅될 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-261">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count" ExplicitInterfaceMemberName="ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-262">이 컬렉션의 항목 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-262">Gets the number of items in this collection.</span></span></summary>
        <value><span data-ttu-id="f8059-263">이 컬렉션의 항목 수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-263">The number of items in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized" ExplicitInterfaceMemberName="ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-264"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-264">Gets a value that indicates whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="f8059-265"><see langword="true" /> 경우에 대 한 액세스는 <see cref="T:Microsoft.VisualBasic.Collection" /> 고, 그렇지 않으면 동기화 된 개체가 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-265"><see langword="true" /> if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot" ExplicitInterfaceMemberName="ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-266"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-266">Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <value><span data-ttu-id="f8059-267"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-267">An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="ICollectionGetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8059-268">컬렉션을 반복하는 열거자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-268">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="f8059-269">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-269">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-270">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="f8059-270">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="f8059-271">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-271">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="f8059-272">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-272">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="f8059-273">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-273">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="f8059-274">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-274">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="f8059-275"><xref:System.Collections.IEnumerator.Reset%2A> 메서드 또한 다시이 위치로 열거자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-275">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="f8059-276">이 위치에 <xref:System.Collections.IEnumerator.Current%2A> 속성 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-276">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="f8059-277">따라서 호출 해야 합니다 <xref:System.Collections.IEnumerator.MoveNext%2A> 해당 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 방법 <xref:System.Collections.IEnumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-277">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="f8059-278"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-278"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="f8059-279"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-279"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="f8059-280">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-280">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f8059-281">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-281">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="f8059-282">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-282">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="f8059-283"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-283">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="f8059-284">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-284">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="f8059-285">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-285">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="f8059-286">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-286">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f8059-287">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-287">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="f8059-288">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-288">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add" ExplicitInterfaceMemberName="IListAdd">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear" ExplicitInterfaceMemberName="IListClear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8059-289"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 항목을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-289">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-290">모든 항목을 제거 하는이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-290">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f8059-291"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-291">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains" ExplicitInterfaceMemberName="IListContains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f8059-292"><see cref="T:System.Object" /> 개체에서 찾을 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-292">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="f8059-293"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 특정 값이 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-293">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="f8059-294"><see cref="T:System.Object" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체에 있으면 <see langword="True" />를 반환하고, 그렇지 않으면 <see langword="False" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-294">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-295">이 메서드를 확인 하는지 여부를 <xref:Microsoft.VisualBasic.Collection> 특정 값을 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-295">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf" ExplicitInterfaceMemberName="IListIndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f8059-296"><see cref="T:System.Object" /> 개체에서 찾을 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-296">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="f8059-297"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 특정 항목의 인덱스를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-297">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="f8059-298">컬렉션에 <paramref name="value" />가 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-298">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-299">특정 항목의 인덱스를 확인 하는이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-299">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert" ExplicitInterfaceMemberName="IListInsert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f8059-300"><paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-300">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="f8059-301"><see cref="T:System.Object" /> 개체에 삽입할 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-301">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="f8059-302"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 지정한 인덱스에 항목을 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-302">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-303">하는 경우 `index` 에 있는 항목의 수와 같습니다 합니다 <xref:Microsoft.VisualBasic.Collection> 개체를 다음 `value` 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-303">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="f8059-304">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-304">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="f8059-305">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-305">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="f8059-306">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-306">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8059-307"><paramref name="index" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-307"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f8059-308"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-308">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="f8059-309">또는</span><span class="sxs-lookup"><span data-stu-id="f8059-309">-or-</span></span> 
<span data-ttu-id="f8059-310"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-310">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="f8059-311"><paramref name="value" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 null 참조인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-311"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize" ExplicitInterfaceMemberName="IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-312"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-312">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="f8059-313"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-313"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly" ExplicitInterfaceMemberName="IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8059-314"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-314">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is.</span></span></summary>
        <value><span data-ttu-id="f8059-315"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-315"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item" ExplicitInterfaceMemberName="IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.System#Collections#IList#Item(System.Int32)" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="f8059-316">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-316">The zero-based index of the element to get or set.</span></span></param>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="f8059-317">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-317">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="f8059-318">지정한 인덱스의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-318">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8059-319"><paramref name="index" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-319"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f8059-320">속성이 설정되어 있고 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-320">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove" ExplicitInterfaceMemberName="IListRemove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f8059-321"><see cref="T:System.Object" /> 개체에서 제거할 <see cref="T:Microsoft.VisualBasic.Collection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-321">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="f8059-322"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체에서 특정 개체가 처음 나타나는 부분을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-322">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-323">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-323">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="f8059-324">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-324">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="f8059-325">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-325">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="f8059-326">하는 경우 `value` 에 없는 합니다 <xref:Microsoft.VisualBasic.Collection> 개체는 <xref:Microsoft.VisualBasic.Collection> 개체 그대로 유지 하 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-326">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f8059-327"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="f8059-328">또는</span><span class="sxs-lookup"><span data-stu-id="f8059-328">-or-</span></span> 
<span data-ttu-id="f8059-329"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-329">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt" ExplicitInterfaceMemberName="IListRemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f8059-330">제거할 항목의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-330">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="f8059-331">지정한 인덱스에 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체 항목을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-331">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-332">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="f8059-333">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="f8059-334">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8059-335"><paramref name="index" />가 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-335"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f8059-336"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="f8059-337">또는</span><span class="sxs-lookup"><span data-stu-id="f8059-337">-or-</span></span> 
<span data-ttu-id="f8059-338"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="f8059-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" ExplicitInterfaceMemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="f8059-339">콜백을 시작한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-339">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="f8059-340">전체 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체 그래프가 deserialize된 후 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-340">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-341">전체 후이 메서드는 <xref:Microsoft.VisualBasic.Collection> 개체 그래프가 deserialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-341">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData" ExplicitInterfaceMemberName="GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="f8059-342"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-342">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="f8059-343"><see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체와 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:Microsoft.VisualBasic.Collection" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-343">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="f8059-344"><see cref="T:Microsoft.VisualBasic.Collection" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-344">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8059-345">이 메서드를 serialize 하는 데 필요한 데이터를 반환 합니다 <xref:Microsoft.VisualBasic.Collection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8059-345">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>