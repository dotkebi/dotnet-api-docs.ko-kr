<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9765a35a73e33a7e4affa6bc4de891155e6dac2a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950151" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="262b5-101"><see langword="Conversion" /> 모듈에는 다양한 변환 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-102">이 모듈에서는 Visual Basic 언어 키워드 및 10 진수를 다른 진수로 변환 하는 런타임 라이브러리 멤버를 다른 숫자 문자열, 숫자, 문자열 및 데이터를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-103">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-104">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="262b5-105">키워드(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="262b5-106">Visual Basic 런타임 라이브러리 멤버</span><span class="sxs-lookup"><span data-stu-id="262b5-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="262b5-107">변환할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="262b5-108">개체를 변환할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="262b5-109">개체를 지정된 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="262b5-110">런타임에서의 형식이 요청된 대상 형식인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-111">`CTypeDynamic` 메서드 변환으로 전달 되는 개체를 `Expression` 에 지정 된 형식 매개 변수는 `TargetType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="262b5-112">개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="262b5-113">`CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="262b5-114">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="262b5-115">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="262b5-116">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-117">다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="262b5-118">동적 개체 작업(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="262b5-119">연습: 동적 개체 만들기 및 사용(C# 및 Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="262b5-120">개체를 변환할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="262b5-121">변환할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="262b5-122">개체를 지정된 제네릭 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="262b5-123">요청된 제네릭 형식으로 정적 형식이 지정된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-124">합니다 `CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 제네릭 매개 변수의 형식으로 지정 된 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="262b5-125">개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="262b5-126">`CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="262b5-127">동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="262b5-128">사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="262b5-129">동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-130">다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="262b5-131">동적 개체 작업(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="262b5-132">연습: 동적 개체 만들기 및 사용(C# 및 Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-133">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="262b5-134">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="262b5-135">최근 런타임 오류에 해당하는 오류 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-136">합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="262b5-137">반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="262b5-138">런타임 오류가 발생 하지 않은, 경우 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="262b5-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="262b5-139">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-140">다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-141"><paramref name="ErrorNumber" />이 범위에서 벗어난 경우.</span><span class="sxs-lookup"><span data-stu-id="262b5-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="262b5-142">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-142">Optional.</span></span> <span data-ttu-id="262b5-143">유효한 임의의 오류 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="262b5-144">지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="262b5-145">지정한 오류 번호에 해당하는 오류 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-146">합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="262b5-147">반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="262b5-148">하는 경우 `ErrorNumber` 알맞은 오류 번호를 되었지만 정의 되어 있지 `ErrorToString` 문자열을 반환 합니다 `"Application-defined or object-defined error."` 경우 `ErrorNumber` 유효 하지 않은 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="262b5-149">경우 `ErrorNumber` 를 생략 하면 가장 최근의 해당 메시지에서 런타임 오류가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="262b5-150">런타임 오류가 발생 하지 않은 경우 또는 `ErrorNumber` 가 0 이면 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="262b5-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="262b5-151">Visual basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-152">다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-153"><paramref name="ErrorNumber" />이 범위에서 벗어난 경우.</span><span class="sxs-lookup"><span data-stu-id="262b5-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-154">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-155">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-155">Required.</span></span> <span data-ttu-id="262b5-156"><see langword="Decimal" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-157">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-158">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-159">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-160">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-161">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-162">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="262b5-163">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-164">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-165">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-166">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-167">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-168">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-169">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-170">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-171">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-172">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-173">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-174">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-175">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-176">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-177">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-178">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-179">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-179">Required.</span></span> <span data-ttu-id="262b5-180"><see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-181">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-182">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-183">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-184">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-185">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-186">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="262b5-187">성능, Visual Basic 15.8부터 `Double`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Double`에서 반환 된 값 `Fix` 포함 된 정수를 암시적으로 변환 됩니다 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) 로 `Off`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="262b5-188">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-189">다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="262b5-190">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-191">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-192">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-193">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-194">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-195">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-196">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-197">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-198">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-199">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-200">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-201">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-202">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-203">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-204">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-205">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-206">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-206">Required.</span></span> <span data-ttu-id="262b5-207"><see langword="Short" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-208">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-209">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-210">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-211">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-212">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-213">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-214">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-215">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-216">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-217">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-218">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-219">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-220">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-221">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-222">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-223">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-224">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-225">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-226">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-227">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-228">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-229">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-230">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-230">Required.</span></span> <span data-ttu-id="262b5-231"><see langword="Integer" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-232">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-233">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-234">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-235">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-236">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-237">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-238">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-239">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-240">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-241">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-242">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-243">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-244">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-245">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-246">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-247">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-248">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-249">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-250">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-251">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-252">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-253">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-254">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-254">Required.</span></span> <span data-ttu-id="262b5-255"><see langword="Long" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-256">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-257">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-258">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-259">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-260">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-261">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-262">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-263">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-264">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-265">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-266">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-267">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-268">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-269">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-270">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-271">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-272">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-273">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-274">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-275">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-276">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-277">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-278">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-278">Required.</span></span> <span data-ttu-id="262b5-279"><see langword="Object" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="262b5-280"><paramref name="Number" />에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="262b5-281">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-282">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-283">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-284">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-285">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-286">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="262b5-287">부터는 Visual Basic 15.8를 `Number` 인수는 런타임 형식이 개체 `Double` 또는 `Single`를 반환 하는 값을 전달 하는 경우 부동으로 소수점을 정수로 변환의 성능을 최적화는 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 아니면 반환한 값 `Fix` 정수 이며 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="262b5-288">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-289">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="262b5-290">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-291">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-292">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-293">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-294">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-295">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-296">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-297">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-298">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-299">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-300">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-301">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-302">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-303">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-304">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-305">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-306">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-306">Required.</span></span> <span data-ttu-id="262b5-307"><see langword="Single" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-308">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-309">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-310">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-311">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-312">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-313">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="262b5-314">성능, Visual Basic 15.8부터 `Single`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Single`에서 반환 된 값 `Fix` 정수를 사용 하 여 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="262b5-315">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-316">다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="262b5-317">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-318">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-319">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-320">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-321">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-322">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-323">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-324">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-325">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-326">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-327">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-328">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-329">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-330">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-331">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-332">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-333">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-334">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-334">Required.</span></span> <span data-ttu-id="262b5-335">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-336">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-337">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-338">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-339">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-339">If `Number` is</span></span>|<span data-ttu-id="262b5-340">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-341">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-341">Empty</span></span>|<span data-ttu-id="262b5-342">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-342">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-343">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-343">Any numeric value</span></span>|<span data-ttu-id="262b5-344">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-345">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-346">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-347">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-348"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-349"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-350">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-351">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-352">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-352">Required.</span></span> <span data-ttu-id="262b5-353">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-354">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-355">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-356">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-357">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-357">If `Number` is</span></span>|<span data-ttu-id="262b5-358">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-359">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-359">Empty</span></span>|<span data-ttu-id="262b5-360">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-360">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-361">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-361">Any numeric value</span></span>|<span data-ttu-id="262b5-362">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-363">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-364">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-365">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-366"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-367"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-368">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-369">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-370">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-370">Required.</span></span> <span data-ttu-id="262b5-371">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-372">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-373">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-374">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-375">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-375">If `Number` is</span></span>|<span data-ttu-id="262b5-376">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-377">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-377">Empty</span></span>|<span data-ttu-id="262b5-378">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-378">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-379">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-379">Any numeric value</span></span>|<span data-ttu-id="262b5-380">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-381">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-382">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-383">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-384"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-385"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-386">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-387">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-388">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-388">Required.</span></span> <span data-ttu-id="262b5-389">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-390">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-391">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-392">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-393">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-393">If `Number` is</span></span>|<span data-ttu-id="262b5-394">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-395">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-395">Empty</span></span>|<span data-ttu-id="262b5-396">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-396">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-397">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-397">Any numeric value</span></span>|<span data-ttu-id="262b5-398">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-399">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-400">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-401">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-402"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-403"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-404">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-405">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-406">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-406">Required.</span></span> <span data-ttu-id="262b5-407">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-408">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-409">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-410">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-411">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-411">If `Number` is</span></span>|<span data-ttu-id="262b5-412">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-413">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-413">Empty</span></span>|<span data-ttu-id="262b5-414">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-414">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-415">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-415">Any numeric value</span></span>|<span data-ttu-id="262b5-416">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-417">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-418">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-419">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-420"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-421"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-422">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-423">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-424">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-424">Required.</span></span> <span data-ttu-id="262b5-425">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-426">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-427">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-428">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-429">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-429">If `Number` is</span></span>|<span data-ttu-id="262b5-430">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-431">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-431">Empty</span></span>|<span data-ttu-id="262b5-432">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-432">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-433">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-433">Any numeric value</span></span>|<span data-ttu-id="262b5-434">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-435">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-436">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-437">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-438"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-439"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-440">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-441">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-442">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-442">Required.</span></span> <span data-ttu-id="262b5-443">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-444">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-445">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-446">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-447">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-447">If `Number` is</span></span>|<span data-ttu-id="262b5-448">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-449">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-449">Empty</span></span>|<span data-ttu-id="262b5-450">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-450">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-451">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-451">Any numeric value</span></span>|<span data-ttu-id="262b5-452">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-453">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-454">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-455">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-456"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-457"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-458">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-459">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-460">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-460">Required.</span></span> <span data-ttu-id="262b5-461">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-462">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-463">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-464">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-465">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-465">If `Number` is</span></span>|<span data-ttu-id="262b5-466">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-467">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-467">Empty</span></span>|<span data-ttu-id="262b5-468">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-468">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-469">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-469">Any numeric value</span></span>|<span data-ttu-id="262b5-470">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-471">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-472">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-473">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-474"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-475"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-476">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-477">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-478">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-478">Required.</span></span> <span data-ttu-id="262b5-479">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-480">숫자의 16진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-481">숫자의 16진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-482">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-483">경우 `Number` 됩니다</span><span class="sxs-lookup"><span data-stu-id="262b5-483">If `Number` is</span></span>|<span data-ttu-id="262b5-484">16 진수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-485">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-485">Empty</span></span>|<span data-ttu-id="262b5-486">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-486">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-487">모든 숫자 값</span><span class="sxs-lookup"><span data-stu-id="262b5-487">Any numeric value</span></span>|<span data-ttu-id="262b5-488">최대 16 개의 16 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="262b5-489">16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="262b5-490">예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-491">이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-492"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-493"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-494">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="262b5-495">방법: 16 진수 문자열을 숫자로 변환</span><span class="sxs-lookup"><span data-stu-id="262b5-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-496">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-497">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-497">Required.</span></span> <span data-ttu-id="262b5-498"><see langword="Decimal" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-499">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-500">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-501">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-502">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-503">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-504">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="262b5-505">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-506">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-507">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-508">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-509">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-510">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-511">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-512">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-513">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-514">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-515">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-516">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-517">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-518">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-519">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-520">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-521">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-521">Required.</span></span> <span data-ttu-id="262b5-522"><see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-523">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-524">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-525">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-526">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-527">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-528">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="262b5-529">Visual Basic 15.8부터 Double을 정수로 변환의 성능을 최적화 된 반환 값을 전달 하는 경우는 `Int` 메서드 중 하나를 합니다 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 이거나 Double 값 반환한 `Int` 자동으로 포함 된 정수 변환할 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="262b5-530">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-531">다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="262b5-532">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-533">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-534">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-535">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-536">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-537">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-538">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-539">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-540">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-541">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-542">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-543">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-544">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-545">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-546">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-547">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-548">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-548">Required.</span></span> <span data-ttu-id="262b5-549"><see langword="Short" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-550">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-551">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-552">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-553">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-554">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-555">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-556">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-557">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-558">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-559">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-560">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-561">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-562">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-563">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-564">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-565">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-566">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-567">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-568">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-569">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-570">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-571">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-572">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-572">Required.</span></span> <span data-ttu-id="262b5-573"><see langword="Integer" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-574">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-575">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-576">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-577">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-578">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-579">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-580">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-581">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-582">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-583">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-584">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-585">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-586">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-587">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-588">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-589">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-590">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-591">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-592">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-593">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-594">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-595">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-596">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-596">Required.</span></span> <span data-ttu-id="262b5-597"><see langword="Long" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-598">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-599">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-600">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-601">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-602">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-603">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-604">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-605">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-606">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-607">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-608">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-609">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-610">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-611">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-612">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-613">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-614">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-615">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-616">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-617">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-618">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-619">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-620">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-620">Required.</span></span> <span data-ttu-id="262b5-621"><see langword="Object" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="262b5-622"><paramref name="Number" />에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="262b5-623">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-624">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-625">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-626">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-627">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-628">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="262b5-629">부터는 Visual Basic 15.8를 `Number` 인수는 런타임 형식이 개체 `Double` 또는 `Single`를 반환 하는 값을 전달 하는 경우 부동으로 소수점을 정수로 변환의 성능을 최적화는 `Int` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 아니면 반환한 값 `Int` 정수 이며 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="262b5-630">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-631">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="262b5-632">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-633">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-634">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-635">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-636">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-637">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-638">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-639">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-640">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-641">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-642">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-643">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-644">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-645">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-646">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-647">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-648">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-648">Required.</span></span> <span data-ttu-id="262b5-649"><see langword="Single" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-650">숫자의 정수 부분을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-651">숫자의 정수 부분입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-652">모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="262b5-653">차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="262b5-654">예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="262b5-655">`Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="262b5-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="262b5-656">성능, Visual Basic 15.8부터 `Single`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Int` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Single`에서 반환 된 값 `Int` 정수를 사용 하 여 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="262b5-657">이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="262b5-658">다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="262b5-659">이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="262b5-660">인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="262b5-661">다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="262b5-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="262b5-662">사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="262b5-663">그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="262b5-664">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="262b5-665">사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="262b5-666">예:</span><span class="sxs-lookup"><span data-stu-id="262b5-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="262b5-667">에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-668">Number를 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-669">Number가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-670">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="262b5-671">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="262b5-672">수학 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="262b5-673">수학 함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="262b5-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-674">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-675">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-676">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-676">Required.</span></span> <span data-ttu-id="262b5-677">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-678">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-679">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-680">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-681">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-681">If Number is</span></span>|<span data-ttu-id="262b5-682">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-683">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-683">Empty</span></span>|<span data-ttu-id="262b5-684">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-684">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-685">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-685">Any other number</span></span>|<span data-ttu-id="262b5-686">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-687">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-688">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-689">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-690"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-691"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-692">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-693">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-694">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-694">Required.</span></span> <span data-ttu-id="262b5-695">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-696">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-697">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-698">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-699">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-699">If Number is</span></span>|<span data-ttu-id="262b5-700">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-701">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-701">Empty</span></span>|<span data-ttu-id="262b5-702">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-702">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-703">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-703">Any other number</span></span>|<span data-ttu-id="262b5-704">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-705">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-706">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-707">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-708"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-709"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-710">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-711">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-712">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-712">Required.</span></span> <span data-ttu-id="262b5-713">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-714">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-715">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-716">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-717">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-717">If Number is</span></span>|<span data-ttu-id="262b5-718">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-719">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-719">Empty</span></span>|<span data-ttu-id="262b5-720">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-720">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-721">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-721">Any other number</span></span>|<span data-ttu-id="262b5-722">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-723">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-724">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-725">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-726"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-727"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-728">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-729">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-730">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-730">Required.</span></span> <span data-ttu-id="262b5-731">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-732">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-733">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-734">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-735">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-735">If Number is</span></span>|<span data-ttu-id="262b5-736">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-737">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-737">Empty</span></span>|<span data-ttu-id="262b5-738">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-738">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-739">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-739">Any other number</span></span>|<span data-ttu-id="262b5-740">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-741">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-742">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-743">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-744"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-745"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-746">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-747">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-748">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-748">Required.</span></span> <span data-ttu-id="262b5-749">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-750">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-751">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-752">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-753">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-753">If Number is</span></span>|<span data-ttu-id="262b5-754">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-755">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-755">Empty</span></span>|<span data-ttu-id="262b5-756">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-756">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-757">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-757">Any other number</span></span>|<span data-ttu-id="262b5-758">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-759">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-760">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-761">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-762"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-763"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-764">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-765">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-766">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-766">Required.</span></span> <span data-ttu-id="262b5-767">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-768">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-769">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-770">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-771">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-771">If Number is</span></span>|<span data-ttu-id="262b5-772">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-773">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-773">Empty</span></span>|<span data-ttu-id="262b5-774">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-774">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-775">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-775">Any other number</span></span>|<span data-ttu-id="262b5-776">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-777">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-778">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-779">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-780"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-781"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-782">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-783">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-784">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-784">Required.</span></span> <span data-ttu-id="262b5-785">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-786">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-787">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-788">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-789">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-789">If Number is</span></span>|<span data-ttu-id="262b5-790">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-791">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-791">Empty</span></span>|<span data-ttu-id="262b5-792">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-792">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-793">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-793">Any other number</span></span>|<span data-ttu-id="262b5-794">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-795">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-796">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-797">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-798"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-799"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-800">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-801">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-802">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-802">Required.</span></span> <span data-ttu-id="262b5-803">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-804">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-805">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-806">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-807">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-807">If Number is</span></span>|<span data-ttu-id="262b5-808">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-809">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-809">Empty</span></span>|<span data-ttu-id="262b5-810">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-810">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-811">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-811">Any other number</span></span>|<span data-ttu-id="262b5-812">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-813">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-814">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-815">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-816"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-817"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-818">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-819">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-820">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-820">Required.</span></span> <span data-ttu-id="262b5-821">임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="262b5-822">숫자의 8진수 값을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-823">숫자의 8진수 값을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-824">경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="262b5-825">Number가</span><span class="sxs-lookup"><span data-stu-id="262b5-825">If Number is</span></span>|<span data-ttu-id="262b5-826">10 월 반환</span><span class="sxs-lookup"><span data-stu-id="262b5-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="262b5-827">Empty</span><span class="sxs-lookup"><span data-stu-id="262b5-827">Empty</span></span>|<span data-ttu-id="262b5-828">영 (0)</span><span class="sxs-lookup"><span data-stu-id="262b5-828">Zero (0)</span></span>|  
|<span data-ttu-id="262b5-829">다른 모든 숫자</span><span class="sxs-lookup"><span data-stu-id="262b5-829">Any other number</span></span>|<span data-ttu-id="262b5-830">22 최대 8 진수 문자</span><span class="sxs-lookup"><span data-stu-id="262b5-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="262b5-831">숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="262b5-832">예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-833">이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-834"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-835"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-836">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-837">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="262b5-838">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-838">Required.</span></span> <span data-ttu-id="262b5-839">임의의 유효한 숫자 식을 포함하는 <see langword="Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="262b5-840">숫자를 나타내는 <see langword="String" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="262b5-841">숫자의 <see langword="String" /> 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-842">부호에 대 한 숫자를 문자열로 변환 되 면 선행 공백이 항상 예약 됩니다 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="262b5-843">경우 `Number` 이 양수인 경우 반환 되는 문자열 앞에 공백이 있고 더하기 인 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="262b5-844">음수는 빼기 기호 (-) 및 선행 공백 없이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="262b5-845">사용 된 `Format` 숫자 값을 형식이 지정 된 날짜, 시간 또는 통화 또는 다른 사용자 정의 형식으로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="262b5-846">와 달리 합니다 `Str` 함수는 `Format` 함수의 부호에 대 한 선행 공백을 포함 하지 않습니다 `Number`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="262b5-847">합니다 `Str` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="262b5-848">다른 소수 구분 기호 (예를 들어 국가별 응용 프로그램)에서 사용 하는 경우 사용 합니다 `CStr` 또는 `Format` 숫자를 문자열로 변환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="262b5-849">숫자의 문자열 표현을 특정 문화권에서을 사용 수의 `ToString(IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="262b5-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="262b5-850">사용 예를 들어 <xref:System.Double.ToString%2A> 형식의 값을 변환할 때는 `Double` 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="262b5-851">이 예제에서는 합니다 `Str` 함수를 반환 하는 `String` 숫자로 표현 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="262b5-852">양수 값을 문자열로 변환할 때, 해당 로그인에 대 한 선행 공백이 항상 예약 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="262b5-853"><paramref name="Number" />을(를) 지정하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="262b5-854"><paramref name="Number" />가 숫자 형식이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="262b5-855">변환 요약</span><span class="sxs-lookup"><span data-stu-id="262b5-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-856">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="262b5-857">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="262b5-858">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-858">Required.</span></span> <span data-ttu-id="262b5-859">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="262b5-860"><paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="262b5-861">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="262b5-862">문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-863">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="262b5-864">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="262b5-865">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="262b5-866">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="262b5-867">다음 호출에서는 값 1615198이 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="262b5-868">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="262b5-869">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="262b5-870">10 진수 구분 하는 경우 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="262b5-871">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="262b5-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="262b5-872">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="262b5-873"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="262b5-874">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="262b5-875">사이 충돌이 형식으로 지정는 `Double` 하며 `Integer` 및 `Long` 형식 문자는 문자열에 포함 되지 않은 경우 컴파일러에서 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="262b5-876">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="262b5-877">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="262b5-878"><paramref name="InputStr" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-879"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-880">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="262b5-881">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-881">Required.</span></span> <span data-ttu-id="262b5-882">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="262b5-883"><paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="262b5-884">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="262b5-885">문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-886">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="262b5-887">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="262b5-888">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="262b5-889">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="262b5-890">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="262b5-891">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="262b5-892">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="262b5-893">국가별 응용 프로그램, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="262b5-894">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="262b5-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="262b5-895">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="262b5-896"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="262b5-897">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="262b5-898">사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="262b5-899">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="262b5-900">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="262b5-901"><paramref name="InputStr" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-902"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-903">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="262b5-904">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="262b5-904">Required.</span></span> <span data-ttu-id="262b5-905">모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="262b5-906"><paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="262b5-907">문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="262b5-908">문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="262b5-909">`Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="262b5-910">주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="262b5-911">그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="262b5-912">공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="262b5-913">다음 호출 1234123 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="262b5-914">다음 호출 10 진수 값-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="262b5-915">합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="262b5-916">국가별 응용 프로그램, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="262b5-917">사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="262b5-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="262b5-918">사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="262b5-919"><xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="262b5-920">예를 들어, 다음 코드는이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="262b5-921">사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="262b5-922">다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="262b5-923">`Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="262b5-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="262b5-924"><paramref name="InputStr" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="262b5-925"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</span><span class="sxs-lookup"><span data-stu-id="262b5-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="262b5-926">형식 변환 함수</span><span class="sxs-lookup"><span data-stu-id="262b5-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>