<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a1abe6590aa067aad077de7aabafdb680ed1b2e" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56352702" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="947af-101"><see langword="Strings" /> 모듈에는 문자열 연산을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-102">이 모듈에는 Visual Basic 언어 키워드 및 문자열을 조작 하는 런타임 라이브러리 멤버를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-103">다음 예제에서는 해당 공백이 있는 문자열을 분할 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-104">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-104">String Manipulation Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="947af-105">키워드(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="947af-106">Visual Basic 런타임 라이브러리 멤버</span><span class="sxs-lookup"><span data-stu-id="947af-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-107">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-107">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="947af-108">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="947af-108">Required.</span></span> <span data-ttu-id="947af-109">임의의 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-109">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="947af-110"><paramref name="String" />이 <see langword="String" /> 식이면 문자열의 첫 문자만 입력에 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-110">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="947af-111"><paramref name="String" />이 <see langword="Nothing" />이거나 문자를 포함하지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-111">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="947af-112">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-112">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="947af-113">문자에 해당하는 문자 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-113">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-114">`Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-114">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="947af-115">0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-115">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="947af-116">`AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-116">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="947af-117">0에서 65535 까지의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-117">This can be 0 through 65535.</span></span> <span data-ttu-id="947af-118">반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-118">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-119">`AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-119">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="947af-120">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-120">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-121">모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-121">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-122">다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-122">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="947af-123">함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-123">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="947af-124">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-124">Required.</span></span> <span data-ttu-id="947af-125">임의의 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-125">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="947af-126"><paramref name="String" />이 <see langword="String" /> 식이면 문자열의 첫 문자만 입력에 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-126">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="947af-127"><paramref name="String" />이 <see langword="Nothing" />이거나 문자를 포함하지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-127">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="947af-128">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-128">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="947af-129">문자에 해당하는 문자 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-129">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-130">`Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-130">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="947af-131">0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-131">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="947af-132">`AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-132">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="947af-133">0에서 65535 까지의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-133">This can be 0 through 65535.</span></span> <span data-ttu-id="947af-134">반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-134">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-135">`AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-135">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="947af-136">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-136">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-137">모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-137">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-138">다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-138">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="947af-139">함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-139">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-140">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-140">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="947af-141">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="947af-141">Required.</span></span> <span data-ttu-id="947af-142">임의의 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-142">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="947af-143"><paramref name="String" />이 <see langword="String" /> 식이면 문자열의 첫 문자만 입력에 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-143">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="947af-144"><paramref name="String" />이 <see langword="Nothing" />이거나 문자를 포함하지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-144">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="947af-145">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-145">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="947af-146">문자에 해당하는 문자 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-146">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-147">`Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-147">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="947af-148">0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-148">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="947af-149">`AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-149">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="947af-150">0에서 65535 까지의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-150">This can be 0 through 65535.</span></span> <span data-ttu-id="947af-151">반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-151">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-152">`AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-152">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="947af-153">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-153">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-154">모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-154">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-155">다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-155">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="947af-156">함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-156">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="947af-157">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-157">Required.</span></span> <span data-ttu-id="947af-158">임의의 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-158">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="947af-159"><paramref name="String" />이 <see langword="String" /> 식이면 문자열의 첫 문자만 입력에 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-159">If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="947af-160"><paramref name="String" />이 <see langword="Nothing" />이거나 문자를 포함하지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-160">If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="947af-161">문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-161">Returns an integer value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="947af-162">문자에 해당하는 문자 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-162">The character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-163">`Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-163">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="947af-164">0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-164">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="947af-165">`AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-165">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="947af-166">0에서 65535 까지의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-166">This can be 0 through 65535.</span></span> <span data-ttu-id="947af-167">반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-167">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-168">`AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-168">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="947af-169">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-169">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-170">모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-170">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-171">다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-171">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md"><span data-ttu-id="947af-172">함수(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-172">Functions (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="947af-173">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-173">Required.</span></span> <span data-ttu-id="947af-174">문자에 대한 <c>코드 포인트</c> 또는 문자 코드를 나타내는 <see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-174">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="947af-175">지정한 문자 코드와 연관된 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-175">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="947af-176">지정한 문자 코드와 연관된 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-176">The character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-177">`CharCode`에 대해 허용되는 비대칭 범위는 `Short` 및 `Integer` 사이의 스토리지 차이를 보완합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-177">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="947af-178">예를 들어-29183은는 `Short` 36353 이지만 `Integer`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-178">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="947af-179">이 Visual Basic 6.0과 호환성을 편리 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-179">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="947af-180">`Chr` 사용 하는 <xref:System.Text.Encoding> 클래스는 <xref:System.Text?displayProperty=nameWithType> 싱글바이트 문자 집합 (SBCS) 나 더블 바이트 문자를 현재 스레드에서 사용 하는지 확인 하려면 네임 스페이스 설정 (DBCS).</span><span class="sxs-lookup"><span data-stu-id="947af-180">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="947af-181">그런 다음 `CharCode` 를 코드로 적절 한 집합을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-181">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="947af-182">범위는 0에서 255까지 SBCS 문자의-32768 ~ 65535 DBCS 문자를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-182">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="947af-183">반환된 된 값에 포함 된 현재 스레드에 대 한 코드 페이지에 따라 달라 집니다를 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 의 속성을 <xref:System.Globalization.TextInfo> 클래스는 <xref:System.Globalization> 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="947af-183">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="947af-184">가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 를 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-184">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="947af-185">`ChrW` `CharCode` 유니코드 코드 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-185">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="947af-186">범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-186">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="947af-187">값-1은-32768에서 32768 +65535 값과 동일 하 게 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-187">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="947af-188">0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-188">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="947af-189">예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-189">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-190">`ChrB` 이전 버전의 Visual Basic 함수는 단일 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-190">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="947af-191">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-191">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-192">Visual Basic 및.NET Framework에서 모든 문자열은 유니코드, 및 `ChrB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-192">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-193">다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연관 된 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-193">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-194"><see langword="Chr" />에 대해 <paramref name="CharCode" /> &lt; 0 또는 &gt; 255입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-194"><paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-195">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-195">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="947af-196">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-196">Required.</span></span> <span data-ttu-id="947af-197">문자에 대한 <c>코드 포인트</c> 또는 문자 코드를 나타내는 <see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-197">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="947af-198">지정한 문자 코드와 연관된 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-198">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="947af-199">지정한 문자 코드와 연관된 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-199">The character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-200">`CharCode`에 대해 허용되는 비대칭 범위는 `Short` 및 `Integer` 사이의 스토리지 차이를 보완합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-200">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="947af-201">예를 들어-29183은는 `Short` 36353 이지만 `Integer`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-201">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="947af-202">이 Visual Basic 6.0과 호환성을 편리 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-202">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="947af-203">`Chr` 사용 하는 <xref:System.Text.Encoding> 클래스는 <xref:System.Text?displayProperty=nameWithType> 싱글바이트 문자 집합 (SBCS) 나 더블 바이트 문자를 현재 스레드에서 사용 하는지 확인 하려면 네임 스페이스 설정 (DBCS).</span><span class="sxs-lookup"><span data-stu-id="947af-203">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="947af-204">그런 다음 `CharCode` 를 코드로 적절 한 집합을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-204">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="947af-205">범위는 0에서 255까지 SBCS 문자의-32768 ~ 65535 DBCS 문자를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-205">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="947af-206">반환된 된 값에 포함 된 현재 스레드에 대 한 코드 페이지에 따라 달라 집니다를 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 의 속성을 <xref:System.Globalization.TextInfo> 클래스는 <xref:System.Globalization> 네임 스페이스.</span><span class="sxs-lookup"><span data-stu-id="947af-206">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="947af-207">가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 를 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-207">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="947af-208">`ChrW` `CharCode` 유니코드 코드 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-208">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="947af-209">범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-209">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="947af-210">값-1은-32768에서 32768 +65535 값과 동일 하 게 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-210">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="947af-211">0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-211">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="947af-212">예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-212">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-213">`ChrB` 이전 버전의 Visual Basic 함수는 단일 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-213">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="947af-214">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-214">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-215">Visual Basic 및.NET Framework에서 모든 문자열은 유니코드, 및 `ChrB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-215">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-216">다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연관 된 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-216">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-217"><see langword="ChrW" />에 대해 <paramref name="CharCode" /> &lt; -32768 또는 &gt; 65535입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-217"><paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-218">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-218">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-219">지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-219">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="947af-220">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-220">Required.</span></span> <span data-ttu-id="947af-221">찾을 문자열의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-221">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="947af-222">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-222">Required.</span></span> <span data-ttu-id="947af-223">검색할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-223">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="947af-224">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-224">Optional.</span></span> <span data-ttu-id="947af-225"><paramref name="Match" />를 포함하거나 제외하는 부분 문자열을 반환할지 여부를 나타내는 <see langword="Boolean" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-225"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />.</span></span> <span data-ttu-id="947af-226"><paramref name="Include" />가 <see langword="True" />이면 <see langword="Filter" /> 함수는 부분 문자열로 <paramref name="Match" />를 포함하는 배열의 하위 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-226">If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring.</span></span> <span data-ttu-id="947af-227"><paramref name="Include" />가 <see langword="False" />이면 <see langword="Filter" /> 함수는 부분 문자열로 <paramref name="Match" />를 포함하지 않는 배열의 하위 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-227">If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-228">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-228">Optional.</span></span> <span data-ttu-id="947af-229">사용할 문자열 비교의 종류를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-229">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="947af-230">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-230">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="947af-231">지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-231">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="947af-232">지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-232">A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-233">일치 `Match` 내의 `Source`는 `Filter` 함수는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-233">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="947af-234">오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-234">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="947af-235">반환한 배열이 `Filter` 함수는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-235">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="947af-236">`Compare` 인수는 다음 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-236">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="947af-237">상수</span><span class="sxs-lookup"><span data-stu-id="947af-237">Constant</span></span>|<span data-ttu-id="947af-238">설명</span><span class="sxs-lookup"><span data-stu-id="947af-238">Description</span></span>|  
|-|-|  
|<span data-ttu-id="947af-239">상수</span><span class="sxs-lookup"><span data-stu-id="947af-239">Constant</span></span>|<span data-ttu-id="947af-240">설명</span><span class="sxs-lookup"><span data-stu-id="947af-240">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="947af-241">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-241">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="947af-242">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-242">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-243">이 예제에서는 사용 된 `Filter` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-243">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-244"><paramref name="Source" />가 <see langword="Nothing" />이거나 1차원 배열이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-244"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-245">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-245">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="947af-246">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-246">Required.</span></span> <span data-ttu-id="947af-247">찾을 문자열의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-247">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="947af-248">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-248">Required.</span></span> <span data-ttu-id="947af-249">검색할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-249">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="947af-250">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-250">Optional.</span></span> <span data-ttu-id="947af-251"><paramref name="Match" />를 포함하거나 제외하는 부분 문자열을 반환할지 여부를 나타내는 <see langword="Boolean" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-251"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />.</span></span> <span data-ttu-id="947af-252"><paramref name="Include" />가 <see langword="True" />이면 <see langword="Filter" /> 함수는 부분 문자열로 <paramref name="Match" />를 포함하는 배열의 하위 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-252">If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring.</span></span> <span data-ttu-id="947af-253"><paramref name="Include" />가 <see langword="False" />이면 <see langword="Filter" /> 함수는 부분 문자열로 <paramref name="Match" />를 포함하지 않는 배열의 하위 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-253">If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-254">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-254">Optional.</span></span> <span data-ttu-id="947af-255">사용할 문자열 비교의 종류를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-255">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="947af-256">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-256">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="947af-257">지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-257">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="947af-258">지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-258">A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-259">일치 `Match` 내의 `Source`는 `Filter` 함수는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-259">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="947af-260">오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-260">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="947af-261">반환한 배열이 `Filter` 함수는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-261">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="947af-262">`Compare` 인수는 다음 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-262">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="947af-263">상수</span><span class="sxs-lookup"><span data-stu-id="947af-263">Constant</span></span>|<span data-ttu-id="947af-264">설명</span><span class="sxs-lookup"><span data-stu-id="947af-264">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="947af-265">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-265">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="947af-266">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-266">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-267">이 예제에서는 사용 된 `Filter` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-267">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-268"><paramref name="Source" />가 <see langword="Nothing" />이거나 1차원 배열이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-268"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-269">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-269">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-270">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-270">Required.</span></span> <span data-ttu-id="947af-271">모든 유효한 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-271">Any valid expression.</span></span></param>
        <param name="Style"><span data-ttu-id="947af-272">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-272">Optional.</span></span> <span data-ttu-id="947af-273">유효한 이름이 지정되거나 사용자 정의된 형식 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-273">A valid named or user-defined format <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-274">형식 <see langword="String" /> 식에 포함된 명령에 따라 형식 지정된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-274">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></summary>
        <returns><span data-ttu-id="947af-275">형식 <see langword="String" /> 식에 포함된 명령에 따라 서식이 지정된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-275">A string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-276"><xref:System.String.Format%2A?displayProperty=nameWithType> 메서드 유사한 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-276">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="947af-277">지역화 되지 않은 숫자 문자열 서식을 지정 하는 경우 원하는 것을 보장 하는 사용자 정의 숫자 형식의 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-277">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="947af-278">지정 하지 않고 숫자의 형식을 지정 하려고 하면 `Style`, `Format` 비슷한 기능을 제공 하는 함수는 `Str` 국제적으로 인식 되 긴 하지만 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-278">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="947af-279">하지만 사용 하 여 문자열로 서식이 지정 양수를 `Format` 함수는 값의 부호에 대 한 예약된 선행 공백을 포함 하지 않으면 사용 하 여 변환 된는 `Str` 함수는 선행 공백을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-279">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="947af-280">다른 숫자 값에 대 한 다양 한 형식</span><span class="sxs-lookup"><span data-stu-id="947af-280">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="947af-281">숫자에 대 한 사용자 정의 형식 식에서 세미콜론으로 구분 된 세 개의 절을 한 개 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-281">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="947af-282">경우는 `Style` 의 인수는 `Format` 함수를 포함 하는 미리 정의 된 숫자 형식 중 하나로, 하나의 절만 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-282">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="947af-283">사용 하는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-283">If you use</span></span>|<span data-ttu-id="947af-284">다음은 결과</span><span class="sxs-lookup"><span data-stu-id="947af-284">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="947af-285">한 개의 절만</span><span class="sxs-lookup"><span data-stu-id="947af-285">One section only</span></span>|<span data-ttu-id="947af-286">형식 지정 식이 모든 값에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-286">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="947af-287">두 섹션</span><span class="sxs-lookup"><span data-stu-id="947af-287">Two sections</span></span>|<span data-ttu-id="947af-288">첫 번째 절은 양수 값 및 0; 두 번째는 음수 값에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-288">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="947af-289">세 섹션</span><span class="sxs-lookup"><span data-stu-id="947af-289">Three sections</span></span>|<span data-ttu-id="947af-290">첫 번째 절은 양수, 음수 값에 적용 되는 두 번째 및 세 번째 0에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-290">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="947af-291">다음 예제에서는 두 개의 섹션이 있습니다: 첫 번째 양수 값 및 0;에 대 한 형식 정의 두 번째 섹션에는 음수 값의 형식을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-291">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="947af-292">하므로 합니다 `Style` 의 인수는 `Format` 함수는 문자열을 따옴표로 묶어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-292">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="947af-293">서로 아무 것도 없으면 세미콜론을 포함 하는 경우 양수 값 형식을 사용 하 여 누락 된 섹션이 인쇄 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-293">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="947af-294">예를 들어, 다음 형식으로 표시 양수 및 음수 값 형식을 사용 하 여 첫 번째 섹션에서 표시 `Zero` 값이 0입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-294">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="947af-295">미리 정의 된 숫자 형식</span><span class="sxs-lookup"><span data-stu-id="947af-295">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="947af-296">다음 표에서 미리 정의 된 숫자 형식 이름을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-296">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="947af-297">이 이름을 사용할 수 있습니다 합니다 `Style` 에 대 한 인수는 `Format` 함수:</span><span class="sxs-lookup"><span data-stu-id="947af-297">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="947af-298">형식 이름</span><span class="sxs-lookup"><span data-stu-id="947af-298">Format name</span></span>|<span data-ttu-id="947af-299">설명</span><span class="sxs-lookup"><span data-stu-id="947af-299">Description</span></span>|  
|-|-|  
|<span data-ttu-id="947af-300">`General Number`, `G`또는 `g`</span><span class="sxs-lookup"><span data-stu-id="947af-300">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="947af-301">없는 천 구분 기호를 사용 하 여 수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-301">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="947af-302">예를 들어 `Format(&H3FA, "g")` 반환 `1018`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-302">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="947af-303">`Currency`, `C`또는 `c`</span><span class="sxs-lookup"><span data-stu-id="947af-303">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="947af-304">적절 한; 경우 천 구분 기호를 사용 하 여 개수를 표시 소수 구분 기호 오른쪽으로 두 자릿수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-304">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="947af-305">출력은 시스템 로캘 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-305">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="947af-306">예를 들어 `Format(1234567, "c")` 반환 `$1,234,567.00`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-306">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="947af-307">`Fixed`, `F`또는 `f`</span><span class="sxs-lookup"><span data-stu-id="947af-307">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="947af-308">왼쪽으로 최소 한 자릿수 및 두 자리 소수 구분 기호 오른쪽에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-308">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="947af-309">예를 들어 `Format(1234567, "f")` 반환 `1234567.00`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-309">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="947af-310">`Standard`, `N`또는 `n`</span><span class="sxs-lookup"><span data-stu-id="947af-310">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="947af-311">소수 구분 기호 오른쪽을 천 구분 기호 왼쪽으로 최소 한 자릿수, 두 자리 수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-311">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="947af-312">예를 들어 `Format(1234567, "n")` 반환 `1,234,567.00`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-312">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="947af-313">오른쪽에 즉시 추가 하는 백분율 기호 (%)를 사용 하 여 100으로 곱한 숫자를 표시 합니다. 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-313">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="947af-314">예를 들어 `Format(0.4744, "Percent")` 반환 `47.44%`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-314">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="947af-315">`P`또는 `p`</span><span class="sxs-lookup"><span data-stu-id="947af-315">`P`, or `p`</span></span>|<span data-ttu-id="947af-316">단일 공백으로 오른쪽에 추가 하는 백분율 기호 (%)를 사용 하 여 100을 곱하고 1000 단위 구분 기호와 함께 숫자를 표시, 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-316">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="947af-317">예를 들어 `Format(0.80345, "p")` 반환 `80.35 %`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-317">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="947af-318">두 자릿수를 제공 하는 표준 과학적 표기법을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-318">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="947af-319">예를 들어 `Format(1234567, "Scientific")` 반환 `1.23E+06`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-319">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="947af-320">`E`또는 `e`</span><span class="sxs-lookup"><span data-stu-id="947af-320">`E`, or `e`</span></span>|<span data-ttu-id="947af-321">유효 자릿수 6 개를 제공 하는 표준 과학적 표기법을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-321">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="947af-322">예를 들어 `Format(1234567, "e")` 반환 `1.234567e+006`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-322">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="947af-323">`D`또는 `d`</span><span class="sxs-lookup"><span data-stu-id="947af-323">`D`, or `d`</span></span>|<span data-ttu-id="947af-324">10 진수 (밑수 10) 형식으로 된 숫자의 값을 포함 하는 문자열로 서 수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-324">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="947af-325">이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`를 `Integer`, `Long`)만 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-325">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="947af-326">예를 들어 `Format(&H7F, "d")` 반환 `127`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-326">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="947af-327">`X`또는 `x`</span><span class="sxs-lookup"><span data-stu-id="947af-327">`X`, or `x`</span></span>|<span data-ttu-id="947af-328">16 진수 (기 수 16) 형식의 숫자 값을 포함 하는 문자열로 서 수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-328">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="947af-329">이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`를 `Integer`, `Long`)만 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-329">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="947af-330">예를 들어 `Format(127, "x")` 반환 `7f`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-330">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="947af-331">표시 `No` 번호가 고 그렇지 않으면 0 이면 표시 `Yes`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-331">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="947af-332">예를 들어 `Format(0, "Yes/No")` 반환 `No`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-332">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="947af-333">표시 `False` 번호가 고 그렇지 않으면 0 이면 표시 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-333">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="947af-334">예를 들어 `Format(1, "True/False")` 반환 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-334">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="947af-335">표시 `Off` 번호가 고 그렇지 않으면 0 이면 표시 `On`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-335">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="947af-336">예를 들어 `Format(1, "On/Off")` 반환 `On`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-336">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-337">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-337">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-338">합니다 `Yes/No`, `True/False`, 및 `On/Off` 형식은 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-338">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="947af-339">사용자 정의 숫자 형식</span><span class="sxs-lookup"><span data-stu-id="947af-339">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="947af-340">다음 표에서 사용자 정의 숫자 형식을 만들 때 사용할 수 있는 문자를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-340">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="947af-341">만드는 데 사용할 수 있습니다 이러한 합니다 `Style` 에 대 한 인수는 `Format` 함수:</span><span class="sxs-lookup"><span data-stu-id="947af-341">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="947af-342">문자</span><span class="sxs-lookup"><span data-stu-id="947af-342">Character</span></span>|<span data-ttu-id="947af-343">설명</span><span class="sxs-lookup"><span data-stu-id="947af-343">Description</span></span>|  
|-|-|  
|<span data-ttu-id="947af-344">없음</span><span class="sxs-lookup"><span data-stu-id="947af-344">None</span></span>|<span data-ttu-id="947af-345">서식 없는 번호를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-345">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="947af-346">(`0`)</span><span class="sxs-lookup"><span data-stu-id="947af-346">(`0`)</span></span>|<span data-ttu-id="947af-347">숫자 자리 표시자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-347">Digit placeholder.</span></span> <span data-ttu-id="947af-348">숫자 또는 0을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-348">Displays a digit or a zero.</span></span> <span data-ttu-id="947af-349">식의 형식 문자열에서 0이 나타나는 위치에 숫자가 있으면 그대로 표시 합니다. 그렇지 않으면 해당 위치에 0이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-349">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="947af-350">수 있으면 보다 적은 자릿수가 형식 식에 선행 또는 후행 0으로 표시에서 있는 0 (소수점 양쪽)에서.</span><span class="sxs-lookup"><span data-stu-id="947af-350">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="947af-351">숫자 보다 소수 구분 기호 오른쪽 자릿수가 형식 식의 소수 구분 기호 오른쪽 0 만큼 숫자가 소수 자릿수 0으로 반올림 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-351">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="947af-352">있으면 보다 소수 구분 기호 왼쪽 자릿수가 형식 식의 소수 구분 기호 왼쪽 0 수정 없이 추가 자릿수가 표시 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-352">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="947af-353">(`#`)</span><span class="sxs-lookup"><span data-stu-id="947af-353">(`#`)</span></span>|<span data-ttu-id="947af-354">숫자 자리 표시자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-354">Digit placeholder.</span></span> <span data-ttu-id="947af-355">숫자 또는 아무 것도 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-355">Displays a digit or nothing.</span></span> <span data-ttu-id="947af-356">식 위치에 숫자가 있으면 여기서는 `#` 표시; 그렇지 않으면 해당 위치에 아무것도 표시 형식 문자열에서 문자 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-356">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="947af-357">이 기호 비슷합니다는 `0` 경우 보다 더 적은 자릿수가 표시 되지 않습니다 선행 및 후행 0을 제외 하 고 자리 표시자 `#` 형식 식의 소수 구분 기호 양쪽 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-357">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="947af-358">(`.`)</span><span class="sxs-lookup"><span data-stu-id="947af-358">(`.`)</span></span>|<span data-ttu-id="947af-359">10 진수 자리 표시자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-359">Decimal placeholder.</span></span> <span data-ttu-id="947af-360">소수점 자리 표시자는 소수 구분 기호 오른쪽 및 왼쪽에 표시 되는 자릿수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-360">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="947af-361">형식 지정 식이 포함 되 면 `#` 이 기호의 왼쪽에 문자; 1 소수 구분 기호로 시작 하는 보다 작은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-361">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="947af-362">소수 자릿수 숫자 앞에 0을 표시 하려면 소수 구분 기호 왼쪽에 첫 번째 숫자 자리 표시자로 0을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-362">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="947af-363">일부 로캘에서 소수 구분 기호로 쉼표를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-363">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="947af-364">형식이 지정 된 출력에서 소수점 자리 표시자로 사용 되는 실제 문자는 컴퓨터 시스템이 인식 하는 숫자 형식에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="947af-364">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="947af-365">따라서 해야 기간을 사용 하는 10 진수 자리 표시자로 형식에서 쉼표를 소수점 자리 표시자로 사용 하는 로캘에서 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-365">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="947af-366">서식이 지정 된 문자열은 로캘에 적합 한 형식으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-366">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="947af-367">(`%`)</span><span class="sxs-lookup"><span data-stu-id="947af-367">(`%`)</span></span>|<span data-ttu-id="947af-368">백분율 자리 표시자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-368">Percent placeholder.</span></span> <span data-ttu-id="947af-369">식에 100을 곱합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-369">Multiplies the expression by 100.</span></span> <span data-ttu-id="947af-370">백분율 문자 (`%`) 형식 문자열에 표시 되는 위치에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-370">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="947af-371">(`,`)</span><span class="sxs-lookup"><span data-stu-id="947af-371">(`,`)</span></span>|<span data-ttu-id="947af-372">천 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-372">Thousand separator.</span></span> <span data-ttu-id="947af-373">천 구분 기호는 소수 구분 기호 왼쪽 자릿수가 4 개 이상의 숫자에서 천 자리를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-373">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="947af-374">천 구분 기호의 표준 사용이 지정은 포함 되는 경우 숫자 자리 표시자로 둘러싸인는 천 구분 기호 (`0` 또는 `#`).</span><span class="sxs-lookup"><span data-stu-id="947af-374">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="947af-375">바로 왼쪽 (소수 지정 여부) 소수 구분 기호 또는 가장 오른쪽에 천 구분 문자는 문자열에 "수 1,000으로 나누어 필요에 따라 반올림 합니다."</span><span class="sxs-lookup"><span data-stu-id="947af-375">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="947af-376">숫자 1, 000 보다 작은 있지만 크거나 500으로 표시 됩니다 `1`, 및 500으로 표시 됩니다 보다 작은 숫자 `0`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-376">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="947af-377">두 인접 한 천 단위 구분 기호가이 위치에 1 백만 비율과 각 추가 구분 기호에 대해 1,000 단위로 요소를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-377">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="947af-378">소수 구분 기호 왼쪽에 즉시 이외의 위치 또는 문자열의 오른쪽에 있는 위치에서 여러 구분 기호는 천 구분 기호의 사용을 지정한 같이 간단 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-378">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="947af-379">일부 로캘에서 마침표는 천 구분 기호로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-379">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="947af-380">형식이 지정 된 출력에서 천 구분 기호로 사용 되는 실제 문자는 컴퓨터 시스템이 인식 하는 숫자 형식에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="947af-380">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="947af-381">따라서 사용할지 쉼표 천 구분 기호로 사용자 정의 형식에서 로캘에서 천 구분 기호로 마침표를 사용 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-381">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="947af-382">서식이 지정 된 문자열은 로캘에 적합 한 형식으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-382">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="947af-383">예를 들어, 다음 세 가지 형식 문자열을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-383">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="947af-384">-   `"#,0."`에 사용 하 여 1000 단위 구분 기호 형식 문자열 "100000000"으로 100 백만 수를 지정 하려면.</span><span class="sxs-lookup"><span data-stu-id="947af-384">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="947af-385">-   `"#0,."`을를 사용 하 여 한 천 비율로 크기 조정 수 100 백만 문자열 "100000"으로 서식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-385">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="947af-386">-   `"#,0,."`에 사용 하 여 1000 단위 구분 기호 및 한 천 형식을 문자열 "100000"으로 100 백만 수를 지정 하 여 크기 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-386">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="947af-387">(`:`)</span><span class="sxs-lookup"><span data-stu-id="947af-387">(`:`)</span></span>|<span data-ttu-id="947af-388">시간 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-388">Time separator.</span></span> <span data-ttu-id="947af-389">일부 로캘에서 시간 구분 기호로 다른 문자를 사용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-389">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="947af-390">시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-390">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="947af-391">서식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-391">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="947af-392">(`/`)</span><span class="sxs-lookup"><span data-stu-id="947af-392">(`/`)</span></span>|<span data-ttu-id="947af-393">날짜 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-393">Date separator.</span></span> <span data-ttu-id="947af-394">일부 로캘에서 날짜 구분 기호로 다른 문자를 사용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-394">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="947af-395">날짜 값에 형식을 지정할 경우 일, 월 및 연도 날짜 구분 기호를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-395">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="947af-396">형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-396">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="947af-397">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="947af-397">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="947af-398">공학용 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-398">Scientific format.</span></span> <span data-ttu-id="947af-399">형식 식에서 하나 이상의 숫자 자리 표시자를 포함 하는 경우 (`0` 또는 `#`)의 왼쪽 `E-`를 `E+`를 `e-`, 또는 `e+`, 수 공학용 형식으로 표시 됩니다 및 `E` 또는 `e` 수와 지 수 사이 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-399">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="947af-400">왼쪽에 숫자 자리 표시자는 지 수의 자릿수를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-400">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="947af-401">사용 하 여 `E-` 또는 `e-` 음의 지 수에 빼기 기호를 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-401">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="947af-402">사용 하 여 `E+` 또는 `e+` 음의 지 수에 빼기 기호를 하 고 양수 지 수 옆에 있는 더하기 기호를 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-402">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="947af-403">또한 올바른 형식을 지정 하려면이 기호의 오른쪽에 숫자 자리 표시자를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-403">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="947af-404">`-` `+` `$` ( )</span><span class="sxs-lookup"><span data-stu-id="947af-404">`-` `+` `$` ( )</span></span>|<span data-ttu-id="947af-405">리터럴 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-405">Literal characters.</span></span> <span data-ttu-id="947af-406">이러한 문자는 서식 문자열에 입력 한 대로 정확 하 게 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-406">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="947af-407">외의 나열 된 다른 문자를 표시 하려면 앞에 백슬래시 (`\`) 또는 이중 따옴표로 묶습니다 ("").</span><span class="sxs-lookup"><span data-stu-id="947af-407">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="947af-408">(`\`)</span><span class="sxs-lookup"><span data-stu-id="947af-408">(`\`)</span></span>|<span data-ttu-id="947af-409">형식 문자열에서 다음 문자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-409">Displays the next character in the format string.</span></span> <span data-ttu-id="947af-410">리터럴 문자와 같이 특별 한 의미가 있는 문자를 표시 하려면 앞에 백슬래시 (`\`).</span><span class="sxs-lookup"><span data-stu-id="947af-410">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="947af-411">백슬래시 자체는 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-411">The backslash itself isn't displayed.</span></span> <span data-ttu-id="947af-412">백슬래시를 사용 하 여 다음 문자를 큰따옴표로 묶는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-412">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="947af-413">백슬래시를 표시 하려면 두 개의 백슬래시를 사용 하 여 (`\\`).</span><span class="sxs-lookup"><span data-stu-id="947af-413">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="947af-414">리터럴 문자는 날짜 서식 지정 및 시간 서식 문자에는 표시할 수 없는 문자의 예 (`a`, `c`를 `d`, `h`를 `m`를 `n`, `p`를 `q`, `s`, `t`, `w`, `y`를 `/`, 및 `:`), 숫자 형식 지정 문자 (`#`를 `0`, `%`를 `E`, `e`, 쉼표 및 기간), 문자열 형식 지정 문자 (`@`를 `&`, `<`, `>`, 및 `!`).</span><span class="sxs-lookup"><span data-stu-id="947af-414">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="947af-415">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="947af-415">(`"``ABC``"`)</span></span>|<span data-ttu-id="947af-416">이중 따옴표 안의 문자열을 표시 합니다 ("").</span><span class="sxs-lookup"><span data-stu-id="947af-416">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="947af-417">코드 내에서 스타일 인수에 문자열을 포함 하려면 사용 해야 합니다 `Chr(34)` 에 텍스트를 묶으십시오 (`34` 은 따옴표 (")에 대 한 문자 코드).</span><span class="sxs-lookup"><span data-stu-id="947af-417">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="947af-418">레거시 코드 예제</span><span class="sxs-lookup"><span data-stu-id="947af-418">Legacy Code Example</span></span>  
 <span data-ttu-id="947af-419">다음 표에서 숫자 일부 샘플 형식 식이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-419">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="947af-420">(이 예제에서는 모두 시스템 로캘 설정이 영어 (미국) 임을 가정) 첫 번째 열에 대 한 형식 문자열을 포함 합니다 `Style` 의 인수는 `Format` 함수, 서식이 지정 된 데이터에 열 머리글에 지정 된 값이 있는 경우 결과 출력을 포함 하는 다른 열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-420">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="947af-421">형식 (`Style`)</span><span class="sxs-lookup"><span data-stu-id="947af-421">Format (`Style`)</span></span>|<span data-ttu-id="947af-422">"5" 일 경우</span><span class="sxs-lookup"><span data-stu-id="947af-422">"5" formatted as</span></span>|<span data-ttu-id="947af-423">"-5" 형식으로 지정</span><span class="sxs-lookup"><span data-stu-id="947af-423">"-5" formatted as</span></span>|<span data-ttu-id="947af-424">"0.5" 일 경우</span><span class="sxs-lookup"><span data-stu-id="947af-424">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="947af-425">미리 정의 된 날짜/시간 형식</span><span class="sxs-lookup"><span data-stu-id="947af-425">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="947af-426">다음 표에서 미리 정의 된 날짜 및 시간 형식 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-426">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="947af-427">이 스타일 인수에 대 한 이름으로 사용할 수 있습니다는 `Format` 함수:</span><span class="sxs-lookup"><span data-stu-id="947af-427">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="947af-428">형식 이름</span><span class="sxs-lookup"><span data-stu-id="947af-428">Format Name</span></span>|<span data-ttu-id="947af-429">설명</span><span class="sxs-lookup"><span data-stu-id="947af-429">Description</span></span>|  
|-|-|  
|<span data-ttu-id="947af-430">`General Date`또는 `G`</span><span class="sxs-lookup"><span data-stu-id="947af-430">`General Date`, or `G`</span></span>|<span data-ttu-id="947af-431">날짜 및/또는 시간을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-431">Displays a date and/or time.</span></span> <span data-ttu-id="947af-432">예를 들어 `3/12/2008 11:07:31 AM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-432">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="947af-433">날짜 표시는 애플리케이션의 현재 문화권 값에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-433">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="947af-434">`Long Date`, `Medium Date`또는 `D`</span><span class="sxs-lookup"><span data-stu-id="947af-434">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="947af-435">현재 문화권의 긴 날짜 형식에 따라 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-435">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="947af-436">예를 들어, `Wednesday, March 12, 2008`을 입력합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-436">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="947af-437">`Short Date`또는 `d`</span><span class="sxs-lookup"><span data-stu-id="947af-437">`Short Date`, or `d`</span></span>|<span data-ttu-id="947af-438">현재 문화권의 간단한 날짜 형식을 사용 하 여 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-438">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="947af-439">예를 들어 `3/12/2008`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-439">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="947af-440">`d` 문자 사용자 정의 날짜 형식으로 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-440">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="947af-441">`Long Time`, `Medium Time`또는 `T`</span><span class="sxs-lookup"><span data-stu-id="947af-441">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="947af-442">현재 문화권의 긴 시간 형식으로 사용 하 여 시간을 표시 일반적으로 시간, 분 및 초가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-442">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="947af-443">예를 들어 `11:07:31 AM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-443">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="947af-444">`Short Time` 또는 `t`</span><span class="sxs-lookup"><span data-stu-id="947af-444">`Short Time` or `t`</span></span>|<span data-ttu-id="947af-445">현재 문화권의 짧은 시간 형식을 사용 하 여 시간을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-445">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="947af-446">예를 들어 `11:07 AM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-446">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="947af-447">합니다 `t` 표시 문자 `AM` 또는 `PM` 사용자 정의 된 형식으로 12 시간제를 사용 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-447">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="947af-448">자세한 날짜와 현재 문화권의 형식에 따라 짧은 시간을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-448">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="947af-449">예를 들어 `Wednesday, March 12, 2008 11:07 AM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-449">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="947af-450">긴 날짜와 현재 문화권의 형식에 따라 긴 시간을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-450">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="947af-451">예를 들어 `Wednesday, March 12, 2008 11:07:31 AM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-451">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="947af-452">간단한 날짜와 현재 문화권의 형식에 따라 짧은 시간을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-452">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="947af-453">예를 들어, `3/12/2008 11:07 AM`을 입력합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-453">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="947af-454">`M`, `m`</span><span class="sxs-lookup"><span data-stu-id="947af-454">`M`, `m`</span></span>|<span data-ttu-id="947af-455">월 및 날짜의 일을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-455">Displays the month and the day of a date.</span></span> <span data-ttu-id="947af-456">예를 들어 `March 12`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-456">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="947af-457">`M` 문자는 사용자 정의 날짜 형식을 월 표시입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-457">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="947af-458">`m` 문자 시간 사용자 정의 형식에서 분을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-458">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="947af-459">`R`, `r`</span><span class="sxs-lookup"><span data-stu-id="947af-459">`R`, `r`</span></span>|<span data-ttu-id="947af-460">에 따라 날짜를 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-460">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="947af-461">예를 들어 `Wed, 12 Mar 2008 11:07:31 GMT`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-461">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="947af-462">형식이 지정 된 날짜의 날짜 및 시간 값을 조정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-462">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="947af-463">호출 하기 전에 gmt 날짜/시간 값을 조정 해야 합니다 `Format` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-463">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="947af-464">날짜 및 시간에 정렬 가능한 인덱스 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-464">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="947af-465">예를 들어 `2008-03-12T11:07:31`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-465">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="947af-466">`s` 문자 시간 사용자 정의 형식에서 초를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-466">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="947af-467">날짜 및 시간에 GMT 정렬 가능한 인덱스 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-467">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="947af-468">예를 들어 `2008-03-12 11:07:31Z`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-468">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="947af-469">날짜 및 긴 날짜를 사용 하 여 시간 및 GMT 긴 시간 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-469">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="947af-470">예를 들어 `Wednesday, March 12, 2008 6:07:31 PM`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-470">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="947af-471">`Y`, `y`</span><span class="sxs-lookup"><span data-stu-id="947af-471">`Y`, `y`</span></span>|<span data-ttu-id="947af-472">연도 및 월의 날짜 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-472">Formats the date as the year and month.</span></span> <span data-ttu-id="947af-473">예를 들어 `March, 2008`과 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-473">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="947af-474">합니다 `Y` 및 `y` 문자 연도 사용자 정의 날짜 형식으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-474">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="947af-475">애플리케이션의 현재 문화권 정보에 대 한 자세한 내용은 참조 하세요. [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-475">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="947af-476">사용자 정의 날짜/시간 형식</span><span class="sxs-lookup"><span data-stu-id="947af-476">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="947af-477">다음 표에서 사용자 정의 날짜/시간 형식을 만드는 데 사용할 수 있습니다 문자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="947af-477">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="947af-478">이전 버전의 Visual Basic에서와 달리 이러한 형식 문자는 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-478">Unlike in earlier versions of Visual Basic, these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="947af-479">문자</span><span class="sxs-lookup"><span data-stu-id="947af-479">Character</span></span>|<span data-ttu-id="947af-480">설명</span><span class="sxs-lookup"><span data-stu-id="947af-480">Description</span></span>|  
|-|-|  
|<span data-ttu-id="947af-481">(`:`)</span><span class="sxs-lookup"><span data-stu-id="947af-481">(`:`)</span></span>|<span data-ttu-id="947af-482">시간 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-482">Time separator.</span></span> <span data-ttu-id="947af-483">일부 로캘에서 시간 구분 기호로 다른 문자를 사용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-483">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="947af-484">시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-484">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="947af-485">서식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 애플리케이션의 현재 문화권 값에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-485">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="947af-486">(`/`)</span><span class="sxs-lookup"><span data-stu-id="947af-486">(`/`)</span></span>|<span data-ttu-id="947af-487">날짜 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-487">Date separator.</span></span> <span data-ttu-id="947af-488">일부 로캘에서 날짜 구분 기호로 다른 문자를 사용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-488">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="947af-489">날짜 값에 형식을 지정할 경우 일, 월 및 연도 날짜 구분 기호를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-489">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="947af-490">형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 애플리케이션의 현재 문화권에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-490">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="947af-491">(`%`)</span><span class="sxs-lookup"><span data-stu-id="947af-491">(`%`)</span></span>|<span data-ttu-id="947af-492">다음 문자를 뒤에 관계 없이 단일 문자 형식으로 읽어야 나타내는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-492">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="947af-493">또한 단일 문자 형식을 사용자 정의 형식으로 읽기를 나타내는 데 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-493">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="947af-494">자세한 내용은 다음을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-494">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="947af-495">요일을 앞에 오는 0 없이 숫자로 표시 합니다 (예를 들어 `1`).</span><span class="sxs-lookup"><span data-stu-id="947af-495">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="947af-496">사용 하 여 `%d` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-496">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="947af-497">요일을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `01`).</span><span class="sxs-lookup"><span data-stu-id="947af-497">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="947af-498">요일을 약어로 표시 합니다 (예를 들어 `Sun`).</span><span class="sxs-lookup"><span data-stu-id="947af-498">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="947af-499">요일을 정식 이름으로 표시 합니다 (예를 들어 `Sunday`).</span><span class="sxs-lookup"><span data-stu-id="947af-499">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="947af-500">월을 앞에 오는 0 없이 숫자로 표시 합니다 (1 월으로 표시 되는 예를 들어 `1`).</span><span class="sxs-lookup"><span data-stu-id="947af-500">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="947af-501">사용 하 여 `%M` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-501">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="947af-502">월을 앞에 오는 0과 함께 숫자로 표시 됩니다 (예를 들어 `01/12/01`).</span><span class="sxs-lookup"><span data-stu-id="947af-502">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="947af-503">약어로 월을 표시 합니다 (예를 들어 `Jan`).</span><span class="sxs-lookup"><span data-stu-id="947af-503">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="947af-504">월을 정식 이름으로 표시 합니다 (예를 들어 `January`).</span><span class="sxs-lookup"><span data-stu-id="947af-504">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="947af-505">시대/연대 문자열을 표시 합니다 (예를 들어 `A.D.`).</span><span class="sxs-lookup"><span data-stu-id="947af-505">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="947af-506">앞에 12 시간제를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="947af-506">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="947af-507">사용 하 여 `%h` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-507">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="947af-508">앞에 오는 0 12 시간제 시계를 사용 하는 숫자로 시간을 표시 합니다 (예를 들어 `01:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="947af-508">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="947af-509">앞에 24 시간제를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15`).</span><span class="sxs-lookup"><span data-stu-id="947af-509">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="947af-510">사용 하 여 `%H` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-510">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="947af-511">앞에 오는 0은 24 시간제를 사용 하 여 숫자로 시간을 표시 합니다 (예를 들어 `01:15:15`).</span><span class="sxs-lookup"><span data-stu-id="947af-511">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="947af-512">분을 앞에 오는 0 없이 숫자로 표시 (예를 들어 `12:1:15`).</span><span class="sxs-lookup"><span data-stu-id="947af-512">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="947af-513">사용 하 여 `%m` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-513">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="947af-514">분을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `12:01:15`).</span><span class="sxs-lookup"><span data-stu-id="947af-514">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="947af-515">앞에 오는 0 없이 숫자로 초를 표시 합니다 (예를 들어 `12:15:5`).</span><span class="sxs-lookup"><span data-stu-id="947af-515">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="947af-516">사용 하 여 `%s` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-516">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="947af-517">앞에 오는 0과 함께 숫자로 초를 표시 합니다 (예를 들어 `12:15:05`).</span><span class="sxs-lookup"><span data-stu-id="947af-517">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="947af-518">소수 단위 초를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-518">Displays fractions of seconds.</span></span> <span data-ttu-id="947af-519">예를 들어 `ff` 초의 1/100 표시 `ffff` 10000 시간 (초)를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-519">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="947af-520">최대 7 개를 사용할 수 있습니다 `f` 사용자 정의 형식에 대 한 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-520">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="947af-521">사용 하 여 `%f` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-521">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="947af-522">12 시간제 시계를 사용 하 고 대문자 표시 `A` 정오 이전의 모든 시간에 대문자 표시 `P` 하 고 정오부터 오후 11:59 까지의 모든 시간에 대 한</span><span class="sxs-lookup"><span data-stu-id="947af-522">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="947af-523">사용 하 여 `%t` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-523">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="947af-524">12 시간제를 사용 하는 로캘에서 표시 대문자 `AM` 정오 이전의 모든 시간을 사용 하 여 대문자 표시 `PM` 하 고 정오부터 오후 11:59 까지의 모든 시간을 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="947af-524">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="947af-525">24 시간제를 사용 하는 로캘의 경우 아무 것도 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-525">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="947af-526">연도 숫자 (0-9) 앞에 오는 0 없이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-526">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="947af-527">사용 하 여 `%y` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-527">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="947af-528">해당 하는 경우 앞에 0 사용 하 여 숫자 형식으로 두 자리 연도 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-528">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="947af-529">4 자리 숫자 형식에는 연도 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-529">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="947af-530">4 자리 숫자 형식에는 연도 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-530">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="947af-531">표준 시간대 오프셋 앞에 오는 0 없이 표시 됩니다 (예를 들어 `-8`).</span><span class="sxs-lookup"><span data-stu-id="947af-531">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="947af-532">사용 하 여 `%z` 사용자 정의 숫자 형식의 유일한 문자인 경우.</span><span class="sxs-lookup"><span data-stu-id="947af-532">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="947af-533">앞에 오는 0 사용 하 여 표준 시간대 오프셋을 표시 합니다 (예를 들어 `-08`)</span><span class="sxs-lookup"><span data-stu-id="947af-533">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="947af-534">전체 표준 시간대 오프셋을 표시 합니다 (예를 들어 `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="947af-534">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="947af-535">레거시 코드 예제</span><span class="sxs-lookup"><span data-stu-id="947af-535">Legacy Code Example</span></span>  
 <span data-ttu-id="947af-536">다음은 사용자 정의 된 날짜 및 시간 형식에 대 한 예가 `December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="947af-536">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="947af-537">형식</span><span class="sxs-lookup"><span data-stu-id="947af-537">Format</span></span>|<span data-ttu-id="947af-538">표시</span><span class="sxs-lookup"><span data-stu-id="947af-538">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-539">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-539">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-540">디바이스에 대 한 최소 시간 확인 디바이스의 제조업체에서 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-540">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="947af-541">디바이스에 대 한 시간 해상도 충분히 정교 하지 않은 경우는 `f` 형식 문자는 디바이스에서 실행 하는 경우 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-541">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-542">다음 예제에서는 `Format` 형식과 사용자 정의 형식을 모두 사용하여 값의 형식을 지정하는 `String` 함수의 다양한 사용 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="947af-542">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="947af-543">날짜 구분 기호(`/`), 시간 구분 기호(`:`), AM/PM 표시기(`t` 및 `tt`)의 경우 시스템에 실제로 표시되는 출력 형식은 코드에서 사용하는 로캘 설정에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="947af-543">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="947af-544">개발 환경에 시간과 날짜가 표시되는 경우 코드 로캘의 간단한 시간 형식과 날짜 형식이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-544">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-545">24시간 형식을 사용하는 로캘의 경우에는 AM/PM 표시기(`t`와 `tt`)에 아무것도 표시되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-545">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-546">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-546">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-547">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-547">Required.</span></span> <span data-ttu-id="947af-548">서식이 지정될 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-548">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="947af-549">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-549">Optional.</span></span> <span data-ttu-id="947af-550">소수점 오른쪽에 표시할 자릿수를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-550">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="947af-551">기본값은 -1로, 시스템의 국가별 설정 값이 사용됨을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="947af-551">Default value is -1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="947af-552">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-552">Optional.</span></span> <span data-ttu-id="947af-553">소수 값에서 앞에 오는 0을 표시할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-553"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span></span> <span data-ttu-id="947af-554">값은 "설명"을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-554">See "Remarks" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="947af-555">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-555">Optional.</span></span> <span data-ttu-id="947af-556">음수를 괄호로 묶을지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-556"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="947af-557">값은 "설명"을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-557">See "Remarks" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="947af-558">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-558">Optional.</span></span> <span data-ttu-id="947af-559">컴퓨터의 국가별 설정에 지정된 그룹 구분 기호를 사용하여 숫자를 그룹화할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-559"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span></span> <span data-ttu-id="947af-560">값은 "설명"을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-560">See "Remarks" for values.</span></span></param>
        <summary><span data-ttu-id="947af-561">시스템 제어판에 정의된 통화 기호를 사용하여 통화 값으로 서식이 지정된 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-561">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></summary>
        <returns><span data-ttu-id="947af-562">시스템 제어판에 정의된 통화 기호를 사용하여 통화 값으로 서식이 지정된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-562">An expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-563">하나 이상의 선택적 인수를 생략 하면 컴퓨터의 일치 하는 국가별 설정 값이 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-563">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="947af-564">통화 값을 기준으로 통화 기호의 위치는 시스템의 국가별 설정에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-564">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-565">모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="947af-565">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="947af-566">기본적으로 제어판에 설정 된 로캘을 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-566">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="947af-567">그러나 변경할 수 있습니다 프로그래밍 방식으로.NET Framework에서 제공 되는 앞에 오는 0 제외 하 고 사용 하 여는 `Number` 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-567">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="947af-568">`IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수 다음 인수 열거형 값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-568">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="947af-569">값</span><span class="sxs-lookup"><span data-stu-id="947af-569">Value</span></span>|<span data-ttu-id="947af-570">설명</span><span class="sxs-lookup"><span data-stu-id="947af-570">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="947af-571">True</span><span class="sxs-lookup"><span data-stu-id="947af-571">True</span></span>|  
|`TriState.False`|<span data-ttu-id="947af-572">False</span><span class="sxs-lookup"><span data-stu-id="947af-572">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="947af-573">컴퓨터의 국가별 설정</span><span class="sxs-lookup"><span data-stu-id="947af-573">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-574">다음 예제에서는 `FormatCurrency` 함수를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="947af-574">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-575">소수점 이하 자릿수가 99보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="947af-575">Number of digits after decimal point is greater than 99.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="947af-576">형식이 숫자가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="947af-576">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-577">문자열 조작</span><span class="sxs-lookup"><span data-stu-id="947af-577">String Manipulation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-578">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-578">Required.</span></span> <span data-ttu-id="947af-579">서식을 지정할 <see langword="Date" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-579"><see langword="Date" /> expression to be formatted.</span></span></param>
        <param name="NamedFormat"><span data-ttu-id="947af-580">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-580">Optional.</span></span> <span data-ttu-id="947af-581">사용되는 날짜/시간 형식을 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-581">Numeric value that indicates the date/time format used.</span></span> <span data-ttu-id="947af-582">이 인수를 생략하면 <see langword="DateFormat.GeneralDate" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-582">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span></span></param>
        <summary><span data-ttu-id="947af-583">날짜/시간 값을 나타내는 문자열 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-583">Returns a string expression representing a date/time value.</span></span></summary>
        <returns><span data-ttu-id="947af-584">날짜/시간 값을 나타내는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-584">A string expression representing a date/time value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-585">`Date` 기원후 날짜와 시간 정보를 항상 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-585">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="947af-586">유형 변환 목적으로, Visual Basic은 간주 1 년 1 월 1 (1 년 1 월 1 일)에 대 한 중립 값으로 날짜 및 00시: 00 (자정)에 대 한 중립 값 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-586">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="947af-587">포맷 하는 경우는 `Date` 값을 날짜/시간 문자열로 `FormatDateTime` 기본값이 결과 문자열에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-587">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="947af-588">예를 들어 #1/1/0001 변환 하는 경우 9시 30분: 00 결과 문자열에 #은 "9시 30분: 00 AM"; 날짜 정보가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-588">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="947af-589">그러나 날짜 정보는 여전히 원래 `Date` 값과 같은 함수를 사용 하 여 복구할 수 있습니다 `DatePart`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-589">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-590">전달 하는 경우는 `Expression` 인수를 `String` 리터럴 `FormatDateTime` 에 따라 해석는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 애플리케이션의 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-590">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="947af-591">그러나로 전달 하는 경우는 `Date` 리터럴 형식 #mm/dd를 사용 하 여/yyyy # 때문 `FormatDateTime` 항상 해석를 `Date` 영어 (미국) 문화권에 따라 리터럴.</span><span class="sxs-lookup"><span data-stu-id="947af-591">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="947af-592">되기 때문에, 애플리케이션을 개발 및 사용 하 여 코딩 하는 경우 `Date` 하나에서 리터럴 문화권 되지만 다른 문화권을 포함 하는 플랫폼에서 실행할를 `Date` 리터럴 수 올바로 구문 분석 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-592">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="947af-593">`NamedFormat` 인수에는 다음 설정이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-593">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="947af-594">상수</span><span class="sxs-lookup"><span data-stu-id="947af-594">Constant</span></span>|<span data-ttu-id="947af-595">설명</span><span class="sxs-lookup"><span data-stu-id="947af-595">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="947af-596">날짜 및/또는 시간을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-596">Display a date and/or time.</span></span> <span data-ttu-id="947af-597">날짜 부분을 간단한 날짜로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-597">Display a date part as a short date.</span></span> <span data-ttu-id="947af-598">시간 부분이 없는 경우 자세한 시간 형식으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-598">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="947af-599">있는 경우 둘 다 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-599">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="947af-600">컴퓨터의 국가별 설정에 지정 된 자세한 날짜 형식을 사용 하 여 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-600">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="947af-601">컴퓨터의 국가별 설정에 지정 된 간단한 날짜 형식을 사용 하 여 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-601">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="947af-602">컴퓨터의 국가별 설정에 지정 된 시간 형식을 사용 하 여 시간을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-602">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="947af-603">24 시간 형식 (hh: mm)를 사용 하는 시간을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-603">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-604">이 예제에서는 사용 된 `FormatDateTime` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-604">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-605"><paramref name="NamedFormat" /> 설정이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-605"><paramref name="NamedFormat" /> setting is not valid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-606">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-606">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-607">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-607">Required.</span></span> <span data-ttu-id="947af-608">서식이 지정될 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-608">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="947af-609">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-609">Optional.</span></span> <span data-ttu-id="947af-610">소수점 오른쪽에 표시할 자릿수를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-610">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="947af-611">기본값은 -1로, 시스템의 국가별 설정 값이 사용됨을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="947af-611">The default value is -1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="947af-612">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-612">Optional.</span></span> <span data-ttu-id="947af-613">소수 값에서 앞에 오는 0을 표시할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-613"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span></span> <span data-ttu-id="947af-614">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-614">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="947af-615">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-615">Optional.</span></span> <span data-ttu-id="947af-616">음수를 괄호로 묶을지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-616"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span></span> <span data-ttu-id="947af-617">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-617">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="947af-618">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-618">Optional.</span></span> <span data-ttu-id="947af-619">로캘 설정에 지정된 그룹 구분 기호를 사용하여 숫자를 그룹화할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-619"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="947af-620">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-620">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="947af-621">숫자로 서식이 지정된 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-621">Returns an expression formatted as a number.</span></span></summary>
        <returns><span data-ttu-id="947af-622">숫자로 서식이 지정된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-622">An expression formatted as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-623">하나 이상의 선택적 인수가 생략 되 면 생략 된 인수에 대 한 값을 로캘 설정에 따라 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-623">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-624">모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="947af-624">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="947af-625">기본적으로 제어판에 설정 된 로캘을 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-625">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="947af-626">그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.</span><span class="sxs-lookup"><span data-stu-id="947af-626">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="947af-627">`IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수에는 다음 설정이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-627">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="947af-628">상수</span><span class="sxs-lookup"><span data-stu-id="947af-628">Constant</span></span>|<span data-ttu-id="947af-629">설명</span><span class="sxs-lookup"><span data-stu-id="947af-629">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="947af-630">True</span><span class="sxs-lookup"><span data-stu-id="947af-630">True</span></span>|  
|`TriState.False`|<span data-ttu-id="947af-631">False</span><span class="sxs-lookup"><span data-stu-id="947af-631">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="947af-632">컴퓨터의 국가별 설정</span><span class="sxs-lookup"><span data-stu-id="947af-632">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-633">이 예제에서는 `FormatNumber` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-633">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="947af-634">형식이 숫자가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="947af-634">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-635">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-635">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-636">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-636">Required.</span></span> <span data-ttu-id="947af-637">서식이 지정될 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-637">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="947af-638">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-638">Optional.</span></span> <span data-ttu-id="947af-639">소숫점 오른쪽에 표시할 자릿수를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-639">Numeric value indicating how many places to the right of the decimal are displayed.</span></span> <span data-ttu-id="947af-640">기본값은 -1로, 로캘 설정이 사용됨을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="947af-640">Default value is -1, which indicates that the locale settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="947af-641">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-641">Optional.</span></span> <span data-ttu-id="947af-642">소숫점 이하 값에 대해 선행 0을 표시할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-642"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span></span> <span data-ttu-id="947af-643">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-643">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="947af-644">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-644">Optional.</span></span> <span data-ttu-id="947af-645">음수 값을 괄호로 묶을지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-645"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="947af-646">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-646">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="947af-647">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-647">Optional.</span></span> <span data-ttu-id="947af-648">로캘 설정에 지정된 그룹 구분 기호를 사용하여 숫자를 그룹화할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-648"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="947af-649">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-649">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="947af-650">백분율로 서식이 지정된 식(100을 곱함)을 % 문자를 붙여 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-650">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></summary>
        <returns><span data-ttu-id="947af-651">% 문자를 붙여 백분율로 서식이 지정된 식(100을 곱함)입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-651">An expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-652">하나 이상의 선택적 인수를 생략 하면 값 생략 된 인수에 대 한 로캘 설정에 따라 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-652">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-653">모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="947af-653">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="947af-654">기본적으로 제어판에 설정 된 로캘을 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-654">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="947af-655">그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.</span><span class="sxs-lookup"><span data-stu-id="947af-655">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="947af-656">`IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수에는 다음 설정이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-656">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="947af-657">상수</span><span class="sxs-lookup"><span data-stu-id="947af-657">Constant</span></span>|<span data-ttu-id="947af-658">설명</span><span class="sxs-lookup"><span data-stu-id="947af-658">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="947af-659">True</span><span class="sxs-lookup"><span data-stu-id="947af-659">True</span></span>|  
|`TriState.False`|<span data-ttu-id="947af-660">False</span><span class="sxs-lookup"><span data-stu-id="947af-660">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="947af-661">컴퓨터의 국가별 설정</span><span class="sxs-lookup"><span data-stu-id="947af-661">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-662">이 예제에서는 사용 된 `FormatPercent` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-662">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="947af-663">형식이 숫자가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="947af-663">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-664">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-664">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-665">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-665">Required.</span></span> <span data-ttu-id="947af-666">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-666">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Index"><span data-ttu-id="947af-667">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-667">Required.</span></span> <span data-ttu-id="947af-668"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-668"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-669"><paramref name="str" />에 있는 반환될 문자의 인덱스(1부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-669">The (1-based) index of the character in <paramref name="str" /> to be returned.</span></span></param>
        <summary><span data-ttu-id="947af-670">제공된 문자열의 지정한 인덱스에서 해당 문자를 나타내는 <see langword="Char" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-670">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></summary>
        <returns><span data-ttu-id="947af-671">제공된 문자열의 지정한 인덱스에서 해당 문자를 나타내는 <see langword="Char" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-671"><see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-672">하는 경우 `Index` 가 1 보다 작거나 마지막 문자의 인덱스 보다 큰 `str`, `ArgumentException` throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-672">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-673">사용 하는 방법을 보여 주는이 예제는 `GetChar` 함수에서 지정된 된 인덱스에서 문자를 반환 하는 `String`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-673">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-674"><paramref name="str" />은 <see langword="Nothing" />, <paramref name="Index" /> &lt; 1이거나 <paramref name="Index" />는 <paramref name="str" />의 마지막 문자의 인덱스보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="947af-674"><paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-675">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-675">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-676">한 문자열에서 다른 문자열이 처음으로 나타나는 위치를 지정하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-676">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span>  <span data-ttu-id="947af-677">일치하는 항목이 있으면 정수는 1부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-677">The integer is a one-based index if a match is found.</span></span>  <span data-ttu-id="947af-678">일치하는 것이 없으면 함수는 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-678">If no match is found, the function returns zero.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="947af-679">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-679">Required.</span></span> <span data-ttu-id="947af-680">검색 중인 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-680"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="947af-681">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-681">Required.</span></span> <span data-ttu-id="947af-682">검색된 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-682"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-683">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-683">Optional.</span></span> <span data-ttu-id="947af-684">문자열 비교의 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-684">Specifies the type of string comparison.</span></span> <span data-ttu-id="947af-685"><paramref name="Compare" />가 생략되면 <see langword="Option Compare" /> 설정에 따라 비교 형식이 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-685">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="947af-686">한 문자열에서 다른 문자열이 처음으로 나타나는 위치를 지정하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-686">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="947af-687">조건</span><span class="sxs-lookup"><span data-stu-id="947af-687">If</span></span> 
 </term>
              <description> <span data-ttu-id="947af-688">InStr 함수의 반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-688">InStr returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-689">
                <paramref name="String1" />의 길이가 0이거나 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-689">
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="947af-690">0</span><span class="sxs-lookup"><span data-stu-id="947af-690">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-691">
                <paramref name="String2" />의 길이가 0이거나 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-691">
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="947af-692">검색을 시작하는 위치이며, 기본적으로 첫 번째 문자 위치부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-692">The starting position for the search, which defaults to the first character position.</span></span>  
  
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-693">
                <paramref name="String2" />를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-693">
                <paramref name="String2" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="947af-694">0</span><span class="sxs-lookup"><span data-stu-id="947af-694">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-695">
                <paramref name="String2" />가 <paramref name="String1" /> 안에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-695">
                <paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="947af-696">일치가 시작되는 위치</span><span class="sxs-lookup"><span data-stu-id="947af-696">Position where match begins</span></span> 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-697">일반적으로 `InStr` 함수 문자열 구문 분석 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-697">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-698">`InStrB` 이전 버전의 Visual Basic 함수는 문자 위치가 아닌 바이트의 숫자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-698">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="947af-699">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-699">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-700">모든 Visual Basic 2005 문자열은 유니코드, 및 `InStrB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-700">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="947af-701">`Compare` 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-701">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="947af-702">상수</span><span class="sxs-lookup"><span data-stu-id="947af-702">Constant</span></span>|<span data-ttu-id="947af-703">값</span><span class="sxs-lookup"><span data-stu-id="947af-703">Value</span></span>|<span data-ttu-id="947af-704">설명</span><span class="sxs-lookup"><span data-stu-id="947af-704">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="947af-705">0</span><span class="sxs-lookup"><span data-stu-id="947af-705">0</span></span>|<span data-ttu-id="947af-706">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-706">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="947af-707">1</span><span class="sxs-lookup"><span data-stu-id="947af-707">1</span></span>|<span data-ttu-id="947af-708">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-708">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-709">다음 예제에서는 `InStr` 함수를 사용하여 한 문자열 안에 다른 문자열이 처음으로 나타나는 위치를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-709">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-710">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-710">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-711">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-711">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md"><span data-ttu-id="947af-712">Option Compare 문</span><span class="sxs-lookup"><span data-stu-id="947af-712">Option Compare Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start"><span data-ttu-id="947af-713">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-713">Optional.</span></span> <span data-ttu-id="947af-714">개별 검색을 시작할 위치를 설정하는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-714">Numeric expression that sets the starting position for each search.</span></span> <span data-ttu-id="947af-715">이 인수를 생략하면 첫 번째 문자 위치에서 검색을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-715">If omitted, search begins at the first character position.</span></span> <span data-ttu-id="947af-716">인덱스는 1부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-716">The start index is 1-based.</span></span></param>
        <param name="StartPos">To be added.</param>
        <param name="String1"><span data-ttu-id="947af-717">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-717">Required.</span></span> <span data-ttu-id="947af-718">검색 중인 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-718"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="947af-719">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-719">Required.</span></span> <span data-ttu-id="947af-720">검색된 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-720"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-721">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-721">Optional.</span></span> <span data-ttu-id="947af-722">문자열 비교의 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-722">Specifies the type of string comparison.</span></span> <span data-ttu-id="947af-723"><paramref name="Compare" />가 생략되면 <see langword="Option Compare" /> 설정에 따라 비교 형식이 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-723">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="947af-724">한 문자열에서 다른 문자열이 처음으로 나타나는 위치를 지정하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-724">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="947af-725">조건</span><span class="sxs-lookup"><span data-stu-id="947af-725">If</span></span> 
 </term>
              <description> <span data-ttu-id="947af-726">InStr 함수의 반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-726">InStr returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-727">
                <paramref name="String1" />의 길이가 0이거나 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-727">
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="947af-728">0</span><span class="sxs-lookup"><span data-stu-id="947af-728">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-729">
                <paramref name="String2" />의 길이가 0이거나 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-729">
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-730">
                <paramref name="String2" />를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-730">
                <paramref name="String2" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="947af-731">0</span><span class="sxs-lookup"><span data-stu-id="947af-731">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-732">
                <paramref name="String2" />가 <paramref name="String1" /> 안에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-732">
                <paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="947af-733">일치가 시작되는 위치</span><span class="sxs-lookup"><span data-stu-id="947af-733">Position where match begins</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-734">
                <paramref name="Start" /> &gt;<paramref name="String1" />의 길이</span><span class="sxs-lookup"><span data-stu-id="947af-734">
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="947af-735">0</span><span class="sxs-lookup"><span data-stu-id="947af-735">0</span></span> 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-736">일반적으로 `InStr` 함수 문자열 구문 분석 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-736">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-737">`InStrB` 이전 버전의 Visual Basic 함수는 문자 위치가 아닌 바이트의 숫자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-737">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="947af-738">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-738">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-739">모든 Visual Basic 2005 문자열은 유니코드, 및 `InStrB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-739">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="947af-740">`Compare` 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-740">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="947af-741">상수</span><span class="sxs-lookup"><span data-stu-id="947af-741">Constant</span></span>|<span data-ttu-id="947af-742">값</span><span class="sxs-lookup"><span data-stu-id="947af-742">Value</span></span>|<span data-ttu-id="947af-743">설명</span><span class="sxs-lookup"><span data-stu-id="947af-743">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="947af-744">0</span><span class="sxs-lookup"><span data-stu-id="947af-744">0</span></span>|<span data-ttu-id="947af-745">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-745">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="947af-746">1</span><span class="sxs-lookup"><span data-stu-id="947af-746">1</span></span>|<span data-ttu-id="947af-747">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-747">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-748">다음 예제에서는 `InStr` 함수를 사용하여 한 문자열 안에 다른 문자열이 처음으로 나타나는 위치를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-748">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-749"><paramref name="Start" /> &lt; 1.</span><span class="sxs-lookup"><span data-stu-id="947af-749"><paramref name="Start" /> &lt; 1.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-750">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-750">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-751">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-751">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md"><span data-ttu-id="947af-752">Option Compare 문</span><span class="sxs-lookup"><span data-stu-id="947af-752">Option Compare Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck"><span data-ttu-id="947af-753">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-753">Required.</span></span> <span data-ttu-id="947af-754">검색 중인 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-754">String expression being searched.</span></span></param>
        <param name="StringMatch"><span data-ttu-id="947af-755">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-755">Required.</span></span> <span data-ttu-id="947af-756">검색 중인 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-756">String expression being searched for.</span></span></param>
        <param name="Start"><span data-ttu-id="947af-757">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-757">Optional.</span></span> <span data-ttu-id="947af-758">문자열의 왼쪽에서 시작하여 각 검색에 대해 0부터 시작하는 시작 위치를 설정하는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-758">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span></span> <span data-ttu-id="947af-759"><paramref name="Start" />가 생략되면 -1이 사용됩니다. 이것은 마지막 문자에서 검색이 시작됨을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-759">If <paramref name="Start" /> is omitted then -1 is used, meaning the search begins at the last character position.</span></span> <span data-ttu-id="947af-760">이 경우 오른쪽에서 왼쪽으로 검색이 계속됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-760">Search then proceeds from right to left.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-761">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-761">Optional.</span></span> <span data-ttu-id="947af-762">부분 문자열을 평가할 때 사용할 비교 종류를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-762">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="947af-763">이 인수를 생략하면 이진 비교가 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-763">If omitted, a binary comparison is performed.</span></span> <span data-ttu-id="947af-764">값에 대한 설정을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-764">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="947af-765">문자열의 오른쪽에서 시작하여 한 문자열 내에서 다른 문자열이 처음 나오는 위치를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-765">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span></span></summary>
        <returns><list type="table">
            <item>
              <term> <span data-ttu-id="947af-766">조건</span><span class="sxs-lookup"><span data-stu-id="947af-766">If</span></span> 
 </term>
              <description> <span data-ttu-id="947af-767">반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-767">InStrRev returns</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-768">
                <paramref name="StringCheck" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-768">
                <paramref name="StringCheck" /> is zero-length</span></span> 
 </term>
              <description> <span data-ttu-id="947af-769">0</span><span class="sxs-lookup"><span data-stu-id="947af-769">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-770">
                <paramref name="StringMatch" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-770">
                <paramref name="StringMatch" /> is zero-length</span></span> 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-771">
                <paramref name="StringMatch" />를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-771">
                <paramref name="StringMatch" /> is not found</span></span> 
 </term>
              <description> <span data-ttu-id="947af-772">0</span><span class="sxs-lookup"><span data-stu-id="947af-772">0</span></span> 
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-773">
                <paramref name="StringMatch" />가 <paramref name="StringCheck" /> 안에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-773">
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></span></span></term>
              <description> <span data-ttu-id="947af-774">문자열의 오른쪽에서 시작하여 일치하는 항목을 처음 찾은 위치</span><span class="sxs-lookup"><span data-stu-id="947af-774">Position at which the first match is found, starting with the right side of the string.</span></span>  
  
 </description>
            </item>
            <item>
              <term><span data-ttu-id="947af-775">
                <paramref name="Start" />가 <paramref name="StringMatch" />의 길이보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="947af-775">
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></span></span></term>
              <description> <span data-ttu-id="947af-776">0</span><span class="sxs-lookup"><span data-stu-id="947af-776">0</span></span> 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-777">구문에 대 한 합니다 `InStrRev` 함수에 대 한 구문과 동일 하지는 `InStr` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-777">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="947af-778">`Compare` 인수는 다음 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-778">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="947af-779">상수</span><span class="sxs-lookup"><span data-stu-id="947af-779">Constant</span></span>|<span data-ttu-id="947af-780">설명</span><span class="sxs-lookup"><span data-stu-id="947af-780">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="947af-781">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-781">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="947af-782">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-782">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-783">이 예제에서는 사용 된 `InStrRev` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-783">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-784"><paramref name="Start" /> = 0 또는 <paramref name="Start" /> &lt; -1.</span><span class="sxs-lookup"><span data-stu-id="947af-784"><paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-785">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-785">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-786">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-786">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-787">배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-787">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="947af-788">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-788">Required.</span></span> <span data-ttu-id="947af-789">조인할 부분 문자열을 포함하는 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-789">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="947af-790">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-790">Optional.</span></span> <span data-ttu-id="947af-791">반환되는 문자열에서 부분 문자열을 구분하는 데 사용되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-791">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="947af-792">이 인수를 생략하면 공백 문자(" ")가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-792">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="947af-793"><paramref name="Delimiter" />가 길이가 0인 문자열("")이거나 <see langword="Nothing" />이면 목록의 모든 항목이 구분 기호 없이 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-793">If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="947af-794">배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-794">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="947af-795">배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-795">A string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-796">사이 패리티가 합니다 `Join` 및 `Split` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-796">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="947af-797">`Join` 함수 문자열 배열을 사용 하 고 조인 구분 기호 문자열을 사용 하 여 단일 문자열로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-797">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="947af-798">`Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-798">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="947af-799">그러나 주요 차이점은는 `Join` 모든 구분 기호 문자열을 사용 하 여 문자열을 연결할 수 `Split` 만 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-799">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-800">다음 예제에서는 사용 하는 방법에 설명 합니다 `Join` 함수를 여러 문자열에서 목록을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="947af-800">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-801"><paramref name="SourceArray" />가 1차원이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-801"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-802">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-802">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="947af-803">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-803">Required.</span></span> <span data-ttu-id="947af-804">조인할 부분 문자열을 포함하는 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-804">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="947af-805">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-805">Optional.</span></span> <span data-ttu-id="947af-806">반환되는 문자열에서 부분 문자열을 구분하는 데 사용되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-806">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="947af-807">이 인수를 생략하면 공백 문자(" ")가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-807">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="947af-808"><paramref name="Delimiter" />가 길이가 0인 문자열("")이거나 <see langword="Nothing" />이면 목록의 모든 항목이 구분 기호 없이 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-808">If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="947af-809">배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-809">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="947af-810">배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-810">A string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-811">사이 패리티가 합니다 `Join` 및 `Split` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-811">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="947af-812">`Join` 함수 문자열 배열을 사용 하 고 조인 구분 기호 문자열을 사용 하 여 단일 문자열로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-812">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="947af-813">`Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-813">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="947af-814">그러나 주요 차이점은는 `Join` 모든 구분 기호 문자열을 사용 하 여 문자열을 연결할 수 `Split` 만 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-814">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-815">다음 예제에서는 사용 하는 방법에 설명 합니다 `Join` 함수를 여러 문자열에서 목록을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="947af-815">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-816"><paramref name="SourceArray" />가 1차원이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="947af-816"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-817">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-817">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-818">소문자로 변환된 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-818">Returns a string or character converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="947af-819">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-819">Required.</span></span> <span data-ttu-id="947af-820">임의의 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-820">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-821">소문자로 변환된 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-821">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="947af-822">소문자로 변환된 문자열 또는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-822">A string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-823">대 문자만 변환할지를 소문자로 모든 소문자 및 글자가 아닌 문자는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-823">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="947af-824">이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-824">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="947af-825">애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-825">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="947af-826">자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-826">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-827">이 예제에서는 `LCase` 문자열의 소문자 버전을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-827">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-828">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-828">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-829">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-829">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="947af-830">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-830">Required.</span></span> <span data-ttu-id="947af-831">임의의 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-831">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-832">소문자로 변환된 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-832">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="947af-833">소문자로 변환된 문자열 또는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-833">A string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-834">대 문자만 변환할지를 소문자로 모든 소문자 및 글자가 아닌 문자는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-834">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="947af-835">이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-835">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="947af-836">애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-836">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="947af-837">자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-837">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-838">이 예제에서는 `LCase` 문자열의 소문자 버전을 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-838">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-839">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-839">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-840">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-840">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-841">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-841">Required.</span></span> <span data-ttu-id="947af-842">가장 왼쪽의 문자를 반환하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-842"><see langword="String" /> expression from which the leftmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="947af-843">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-843">Required.</span></span> <span data-ttu-id="947af-844"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-844"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-845">반환할 문자의 수를 나타내는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-845">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="947af-846">이 인수가 0인 경우 길이가 0인 문자열("")이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-846">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="947af-847">이 인수가 <paramref name="str" />의 문자 수보다 크거나 같으면 전체 문자열이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-847">If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="947af-848">문자열의 왼쪽에서 지정한 수의 문자를 포함하는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-848">Returns a string containing a specified number of characters from the left side of a string.</span></span></summary>
        <returns><span data-ttu-id="947af-849">문자열의 왼쪽에서 지정한 수의 문자를 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-849">A string containing a specified number of characters from the left side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-850">에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-850">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="947af-851">에 있는 다른 클래스 또는 Windows Forms 애플리케이션을 사용 하는 경우는 `Left` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Left`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-851">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-852">`LeftB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-852">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="947af-853">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-853">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-854">유니코드는 현재 Visual Basic의 모든 문자열 및 `LeftB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-854">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-855">이 예제에서는 사용 합니다 `Left` 의 부분 문자열을 반환 하는 함수를 지정 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-855">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="947af-856">가 있는 클래스에서를 `Left` 속성인 해야 정규화는 `Left` 함수.</span><span class="sxs-lookup"><span data-stu-id="947af-856">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-857"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="947af-857"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-858">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-858">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-859">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-859">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-860">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-860">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-861"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-861">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-862">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-862">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-863">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-863">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-864">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-864">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-865">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-865">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-866">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-866">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-867">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-867">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-868">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-868">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-869">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-869">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-870">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-870">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-871">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-871">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-872">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-872">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-873">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-873">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-874">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-874">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-875">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-875">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-876">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-876">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-877">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-877">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-878">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-878">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-879">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-879">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-880">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-880">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-881">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-881">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-882"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-882">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-883">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-883">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-884">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-884">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-885">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-885">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-886">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-886">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-887">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-887">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-888">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-888">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-889">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-889">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-890">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-890">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-891">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-891">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-892">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-892">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-893">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-893">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-894">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-894">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-895">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-895">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-896">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-896">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-897">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-897">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-898">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-898">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-899">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-899">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-900">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-900">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-901">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-901">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-902">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-902">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-903"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-903">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-904">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-904">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-905">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-905">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-906">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-906">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-907">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-907">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-908">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-908">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-909">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-909">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-910">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-910">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-911">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-911">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-912">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-912">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-913">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-913">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-914">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-914">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-915">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-915">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-916">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-916">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-917">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-917">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-918">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-918">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-919">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-919">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-920">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-920">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-921">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-921">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-922">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-922">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-923">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-923">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-924"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-924">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-925">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-925">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-926">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-926">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-927">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-927">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-928">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-928">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-929">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-929">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-930">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-930">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-931">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-931">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-932">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-932">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-933">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-933">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-934">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-934">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-935">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-935">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-936">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-936">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-937">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-937">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-938">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-938">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-939">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-939">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-940">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-940">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-941">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-941">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-942">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-942">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-943">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-943">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-944">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-944">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-945"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-945">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-946">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-946">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-947">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-947">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-948">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-948">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-949">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-949">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-950">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-950">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-951">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-951">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-952">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-952">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-953">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-953">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-954">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-954">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-955">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-955">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-956">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-956">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-957">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-957">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-958">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-958">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-959">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-959">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-960">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-960">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-961">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-961">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-962">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-962">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-963">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-963">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-964">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-964">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-965">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-965">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-966"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-966">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-967">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-967">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-968">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-968">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-969">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-969">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-970">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-970">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-971">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-971">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-972">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-972">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-973">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-973">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-974">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-974">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-975">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-975">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-976">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-976">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-977">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-977">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-978">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-978">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-979">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-979">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-980">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-980">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-981">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-981">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-982">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-982">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-983">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-983">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-984">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-984">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-985">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-985">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-986">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-986">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-987"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-987">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-988">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-988">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-989">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-989">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-990">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-990">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-991">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-991">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-992">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-992">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-993">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-993">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-994">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-994">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-995">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-995">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-996">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-996">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-997">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-997">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-998">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-998">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-999">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-999">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1000">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1000">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1001">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1001">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1002">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1002">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1003">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1003">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1004">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1004">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1005">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1005">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1006">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1006">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1007">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1007">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1008"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1008">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1009">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1009">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1010">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1010">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1011">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1011">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1012">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1012">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1013">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1013">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1014">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1014">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1015">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1015">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1016">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1016">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1017">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1017">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1018">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1018">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1019">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1019">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1020">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1020">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1021">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1021">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1022">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1022">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1023">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1023">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1024">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1024">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1025">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1025">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1026">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1026">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1027">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1027">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1028">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1028">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1029"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1029">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1030">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1030">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1031">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1031">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1032">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1032">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1033">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1033">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1034">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1034">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1035">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1035">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1036">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1036">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1037">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1037">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1038">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1038">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1039">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1039">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1040">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1040">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1041">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1041">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1042">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1042">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1043">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1043">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1044">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1044">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1045">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1045">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1046">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1046">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1047">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1047">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1048">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1048">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1049">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1049">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1050"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1050">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1051">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1051">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1052">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1052">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1053">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1053">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1054">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1054">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1055">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1055">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1056">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1056">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1057">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1057">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1058">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1058">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1059">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1059">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1060">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1060">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1061">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1061">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1062">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1062">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1063">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1063">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1064">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1064">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1065">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1065">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1066">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1066">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1067">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1067">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1068">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1068">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1069">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1069">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1070">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1070">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1071"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1071">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1072">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1072">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1073">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1073">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1074">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1074">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1075">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1075">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1076">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1076">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1077">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1077">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1078">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1078">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1079">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1079">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1080">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1080">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1081">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1081">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1082">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1082">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1083">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1083">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1084">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1084">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1085">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1085">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1086">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1086">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1087">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1087">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1088">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1088">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1089">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1089">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1090">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1090">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1091">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1091">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1092"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1092">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1093">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1093">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1094">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1094">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1095">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1095">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1096">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1096">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1097">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1097">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1098">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1098">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1099">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1099">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1100">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1100">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1101">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1101">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1102">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1102">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1103">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1103">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1104">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1104">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1105">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1105">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1106">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1106">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1107">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1107">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1108">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1108">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1109">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1109">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1110">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1110">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1111">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1111">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1112">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1112">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1113"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1113">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1114">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1114">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1115">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1115">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1116">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1116">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1117">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1117">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1118">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1118">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1119">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1119">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1120">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1120">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1121">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1121">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1122">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1122">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1123">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1123">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1124">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1124">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1125">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1125">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1126">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1126">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1127">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1127">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1128">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1128">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1129">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1129">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1130">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1130">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1131">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1131">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1132">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1132">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1133">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1133">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1134"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1134">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1135">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1135">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1136">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1136">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1137">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1137">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1138">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1138">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1139">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1139">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1140">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1140">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1141">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1141">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1142">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1142">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1143">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1143">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1144">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1144">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1145">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1145">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1146">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1146">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1147">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1147">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1148">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1148">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1149">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1149">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1150">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1150">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1151">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1151">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1152">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1152">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1153">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1153">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1154">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1154">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1155"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1155">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1156">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1156">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1157">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1157">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1158">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1158">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1159">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1159">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1160">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1160">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1161">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1161">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1162">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1162">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1163">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1163">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1164">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1164">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1165">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1165">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1166">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1166">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1167">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1167">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1168">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1168">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1169">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1169">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1170">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1170">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1171">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1171">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1172">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1172">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1173">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1173">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1174">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1174">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1175">임의의 유효한 <see langword="String" /> 식 또는 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1175">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="947af-1176"><paramref name="Expression" />의 형식이 <see langword="Object" />인 경우 <see langword="Len" /> 함수는 <see langword="FilePut" /> 함수에 의해 파일에 기록될 크기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1176">If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="947af-1177">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1177">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="947af-1178">문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1178">An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1179">사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1179">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="947af-1180">경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1180">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="947af-1181">경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1181">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="947af-1182">`VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1182">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="947af-1183">합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1183">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1184">`Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1184">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1185">`LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1185">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="947af-1186">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1186">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1187">유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1187">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="947af-1188">스마트 디바이스 개발자 노트</span><span class="sxs-lookup"><span data-stu-id="947af-1188">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="947af-1189">합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1189">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="947af-1190">경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1190">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="947af-1191">매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1191">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="947af-1192">경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1192">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1193">다음 예제에서는 `Len` 함수를 사용하여 문자열의 문자 개수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1193">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1194">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1194">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1195">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1195">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="947af-1196">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1196">Required.</span></span> <span data-ttu-id="947af-1197"><see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1197"><see langword="String" /> expression.</span></span> <span data-ttu-id="947af-1198">문자열 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1198">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="947af-1199">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1199">Required.</span></span> <span data-ttu-id="947af-1200"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1200"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1201">반환되는 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1201">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="947af-1202">지정된 문자열을 지정한 길이에 맞게 조정하고 왼쪽에 맞춘 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1202">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="947af-1203">지정된 문자열을 지정한 길이에 맞게 조정하고 왼쪽에 맞춘 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1203">A left-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1204">지정 된 문자열이 지정된 된 길이 보다 긴 경우 반환된 된 문자열은 지정 된 길이 단축 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1204">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="947af-1205">지정 된 문자열이 지정된 된 길이 보다 짧은 경우 해당 길이 생성 하기 위해 반환된 된 문자열의 오른쪽 끝에 공백이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1205">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1206">이 예제에서는 사용 된 `LSet` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1206">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1207">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1207">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1208">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1208">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md"><span data-ttu-id="947af-1209">데이터 형식의 효율적 사용</span><span class="sxs-lookup"><span data-stu-id="947af-1209">Efficient Use of Data Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1210">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1210">Required.</span></span> <span data-ttu-id="947af-1211">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1211">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-1212">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1212">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="947af-1213">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1213">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1214">합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1214">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1215">이 예제에서는 문자열 변수에서 `LTrim` 함수를 사용하여 선행 공백을 제거하고 `RTrim` 함수를 사용하여 후행 공백을 제거하며</span><span class="sxs-lookup"><span data-stu-id="947af-1215">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="947af-1216">`Trim` 함수를 사용하여 양쪽 공백을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1216">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1217">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1217">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-1218">지정된 문자열에서 문자를 포함하는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1218">Returns a string that contains characters from a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1219">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1219">Required.</span></span> <span data-ttu-id="947af-1220">문자를 반환하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1220"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="947af-1221">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1221">Required.</span></span> <span data-ttu-id="947af-1222"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1222"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1223">반환할 문자의 시작 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1223">Starting position of the characters to return.</span></span> <span data-ttu-id="947af-1224"><paramref name="Start" />가 <paramref name="str" />의 문자 수보다 크면 <see langword="Mid" /> 함수는 길이가 0인 문자열("")을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1224">If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="947af-1225"><paramref name="Start" />는 1부터 시작됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1225"><paramref name="Start" /> is one-based.</span></span></param>
        <summary><span data-ttu-id="947af-1226">문자열의 지정된 위치에서 시작하여 모든 문자를 포함하는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1226">Returns a string that contains all the characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="947af-1227">문자열의 지정된 위치에서 시작하여 모든 문자로 구성된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1227">A string that consists of all the characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1228">에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1228">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="947af-1229">Visual Basic에는 `Mid` 함수 및 `Mid` 문입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1229">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="947af-1230">이러한 요소는 모두 문자열에서 문자의 지정된 된 수에 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1230">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="947af-1231">자세한 내용은 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1231">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1232">`MidB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1232">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="947af-1233">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1233">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1234">모든 Visual Basic 문자열은 유니코드, 및 `MidB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1234">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1235">이 예제의 마지막 줄이 오버이 로드를 사용 하는 `Mid` 문자열에서 다섯 번째 및 이후의 문자를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1235">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1236"><paramref name="Start" /> &lt;= 0 또는 <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="947af-1236"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1237">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1237">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-1238">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-1238">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-1239">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-1239">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md"><span data-ttu-id="947af-1240">Mid 문</span><span class="sxs-lookup"><span data-stu-id="947af-1240">Mid Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1241">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1241">Required.</span></span> <span data-ttu-id="947af-1242">문자를 반환하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1242"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="947af-1243">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1243">Required.</span></span> <span data-ttu-id="947af-1244"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1244"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1245">반환할 문자의 시작 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1245">Starting position of the characters to return.</span></span> <span data-ttu-id="947af-1246"><paramref name="Start" />가 <paramref name="str" />의 문자 수보다 크면 <see langword="Mid" /> 함수는 길이가 0인 문자열("")을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1246">If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="947af-1247"><paramref name="Start" />는 1부터 시작됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1247"><paramref name="Start" /> is one based.</span></span></param>
        <param name="Length"><span data-ttu-id="947af-1248">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1248">Optional.</span></span> <span data-ttu-id="947af-1249"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1249"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1250">반환할 문자의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1250">Number of characters to return.</span></span> <span data-ttu-id="947af-1251">문자의 개수를 생략하거나 텍스트 문자 수가 <paramref name="Length" />보다 적으면(<paramref name="Start" /> 위치의 문자 포함) 시작 위치부터 해당 문자열의 끝까지 모든 문자가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1251">If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.</span></span></param>
        <summary><span data-ttu-id="947af-1252">문자열의 지정된 위치에서 시작하여 지정된 문자 수를 포함하는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1252">Returns a string that contains a specified number of characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="947af-1253">문자열의 지정된 위치에서 시작하여 지정된 문자 수로 구성된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1253">A string that consists of the specified number of characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1254">에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1254">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="947af-1255">Visual Basic에는 `Mid` 함수 및 `Mid` 문입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1255">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="947af-1256">이러한 요소는 모두 문자열에서 문자의 지정된 된 수에 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1256">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="947af-1257">자세한 내용은 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1257">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1258">`MidB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1258">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="947af-1259">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1259">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1260">모든 Visual Basic 문자열은 유니코드, 및 `MidB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1260">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1261">처음 두 `Mid` 이 예제의 함수에서 지정 된 위치에서 시작 하는 문자열에 지정 된 개수의 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1261">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="947af-1262">(마지막 함수를 보여 줍니다는 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 오버 로드 하 고 문자열 추출에 대 한 시작 지점을 지정 합니다.)</span><span class="sxs-lookup"><span data-stu-id="947af-1262">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1263"><paramref name="Start" /> &lt;= 0 또는 <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="947af-1263"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1264">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1264">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-1265">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-1265">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-1266">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-1266">Introduction to Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md"><span data-ttu-id="947af-1267">Mid 문</span><span class="sxs-lookup"><span data-stu-id="947af-1267">Mid Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1268">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1268">Required.</span></span> <span data-ttu-id="947af-1269">대체할 부분 문자열을 포함하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1269">String expression containing substring to replace.</span></span></param>
        <param name="Find"><span data-ttu-id="947af-1270">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1270">Required.</span></span> <span data-ttu-id="947af-1271">검색 중인 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1271">Substring being searched for.</span></span></param>
        <param name="Replacement"><span data-ttu-id="947af-1272">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1272">Required.</span></span> <span data-ttu-id="947af-1273">대체 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1273">Replacement substring.</span></span></param>
        <param name="Start"><span data-ttu-id="947af-1274">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1274">Optional.</span></span> <span data-ttu-id="947af-1275">대체에 사용되는 부분 문자열을 시작하는 <paramref name="Expression" /> 내 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1275">Position within <paramref name="Expression" /> that starts a substring used for replacement.</span></span> <span data-ttu-id="947af-1276"><see langword="Replace" />의 반환 값은 적절한 대체와 함께 <paramref name="Start" />에서 시작하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1276">The return value of <see langword="Replace" /> is a string that begins at <paramref name="Start" />, with appropriate substitutions.</span></span> <span data-ttu-id="947af-1277">생략된 경우 1이라고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1277">If omitted, 1 is assumed.</span></span></param>
        <param name="Count"><span data-ttu-id="947af-1278">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1278">Optional.</span></span> <span data-ttu-id="947af-1279">수행할 부분 문자열 대체 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1279">Number of substring substitutions to perform.</span></span> <span data-ttu-id="947af-1280">이 인수를 생략하면 기본값으로 -1이 사용됩니다. 이것은 "가능한 모든 항목이 대체됨"을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1280">If omitted, the default value is -1, which means "make all possible substitutions."</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-1281">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1281">Optional.</span></span> <span data-ttu-id="947af-1282">부분 문자열을 평가할 때 사용할 비교 종류를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1282">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="947af-1283">값에 대한 설정을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="947af-1283">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="947af-1284">지정된 부분 문자열이 지정된 횟수만큼 다른 부분 문자열로 대체된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1284">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span></span></summary>
        <returns><span data-ttu-id="947af-1285"><see langword="Replace" />는 다음과 같은 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1285"><see langword="Replace" /> returns the following values.</span></span>  
  
 <list type="table"><item><term> <span data-ttu-id="947af-1286">조건</span><span class="sxs-lookup"><span data-stu-id="947af-1286">If</span></span> 
 </term><description> <span data-ttu-id="947af-1287">반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-1287">Replace returns</span></span> 
 </description></item><item><term><span data-ttu-id="947af-1288"><paramref name="Find" />가 0이거나 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1288"><paramref name="Find" /> is zero-length or <see langword="Nothing" /></span></span></term><description> <span data-ttu-id="947af-1289"><paramref name="Expression" />의 복사본</span><span class="sxs-lookup"><span data-stu-id="947af-1289">Copy of <paramref name="Expression" /></span></span></description></item><item><term><span data-ttu-id="947af-1290"><paramref name="Replace" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1290"><paramref name="Replace" /> is zero-length</span></span> 
 </term><description> <span data-ttu-id="947af-1291"><paramref name="Expression" />가 포함되지 않는 <paramref name="Find" />의 복사본</span><span class="sxs-lookup"><span data-stu-id="947af-1291">Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></span></span></description></item><item><term><span data-ttu-id="947af-1292"><paramref name="Expression" />이 0이거나 <see langword="Nothing" />이거나, <paramref name="Start" />가 <paramref name="Expression" />보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1292"><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></span></span></term><description><see langword="Nothing" /></description></item><item><term><span data-ttu-id="947af-1293"><paramref name="Count" />가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1293"><paramref name="Count" /> is 0</span></span> 
 </term><description> <span data-ttu-id="947af-1294"><paramref name="Expression" />의 복사본</span><span class="sxs-lookup"><span data-stu-id="947af-1294">Copy of <paramref name="Expression" /></span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1295">반환 값을 `Replace` 함수는 지정 된 위치에서 시작 하는 문자열 `Start` 끝의 마지막를 `Expression` 대체가 수행 된 문자열에 지정 된 대로 `Find` 및 `Replace` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1295">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="947af-1296">`Compare` 인수는 다음 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1296">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="947af-1297">상수</span><span class="sxs-lookup"><span data-stu-id="947af-1297">Constant</span></span>|<span data-ttu-id="947af-1298">설명</span><span class="sxs-lookup"><span data-stu-id="947af-1298">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="947af-1299">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1299">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="947af-1300">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1300">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-1301">이 예제에서는 `Replace` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1301">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1302"><paramref name="Count" /> &lt; -1 또는 <paramref name="Start" /> &lt;= 0.</span><span class="sxs-lookup"><span data-stu-id="947af-1302"><paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1303">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1303">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1304">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1304">Required.</span></span> <span data-ttu-id="947af-1305">가장 오른쪽의 문자를 반환하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1305"><see langword="String" /> expression from which the rightmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="947af-1306">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1306">Required.</span></span> <span data-ttu-id="947af-1307"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="947af-1307"><see langword="Integer" />.</span></span> <span data-ttu-id="947af-1308">반환할 문자의 수를 나타내는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1308">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="947af-1309">이 인수가 0인 경우 길이가 0인 문자열("")이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1309">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="947af-1310">이 인수가 <paramref name="str" />의 문자 수보다 크거나 같으면 전체 문자열이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1310">If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="947af-1311">문자열의 오른쪽에서 지정한 개수의 문자를 포함하는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1311">Returns a string containing a specified number of characters from the right side of a string.</span></span></summary>
        <returns><span data-ttu-id="947af-1312">문자열의 오른쪽에서 지정한 개수의 문자를 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1312">A string containing a specified number of characters from the right side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1313">에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1313">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="947af-1314">Windows 폼 또는 있는 다른 클래스에 사용 되는 경우는 `Right` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Strings.Right`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1314">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1315">`RightB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1315">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="947af-1316">더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1316">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="947af-1317">유니코드는 현재 Visual Basic의 모든 문자열 및 `RightB` 는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1317">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1318">이 예제에서는 사용 합니다 `Right` 의 부분 문자열을 반환 하는 함수를 지정 `String`.</span><span class="sxs-lookup"><span data-stu-id="947af-1318">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="947af-1319">가 있는 클래스에서를 `Right` 속성인 해야 정규화는 `Right` 함수.</span><span class="sxs-lookup"><span data-stu-id="947af-1319">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1320"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="947af-1320"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1321">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1321">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="947af-1322">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1322">Required.</span></span> <span data-ttu-id="947af-1323"><see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1323"><see langword="String" /> expression.</span></span> <span data-ttu-id="947af-1324">문자열 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1324">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="947af-1325">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1325">Required.</span></span> <span data-ttu-id="947af-1326"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1326"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1327">반환되는 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1327">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="947af-1328">지정된 길이에 맞게 조정된 특정 문자열이 포함된 문자열(오른쪽에 맞춰진 문자열)을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1328">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="947af-1329">지정된 길이에 맞게 조정된 특정 문자열이 포함된 문자열(오른쪽에 맞춰진 문자열)입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1329">A right-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1330">하는 경우 `Source` 보다 길면 `Length`, `RSet` 의 길이 까지만 왼쪽 문자를 배치 `Source`, 반환된 된 문자열에서.</span><span class="sxs-lookup"><span data-stu-id="947af-1330">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="947af-1331">지정 된 문자열이 지정된 된 길이 보다 짧은 경우 해당 길이 생성 하는 문자열의 왼쪽된 끝에 공백이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1331">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="947af-1332">지정 된 문자열이 지정된 된 길이 보다 긴 경우에 지정 된 길이 단축 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1332">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1333">이 예제에서는 사용 된 `RSet` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1333">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1334">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1334">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="947af-1335">데이터 형식 요약(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="947af-1335">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md"><span data-ttu-id="947af-1336">데이터 형식의 효율적 사용</span><span class="sxs-lookup"><span data-stu-id="947af-1336">Efficient Use of Data Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1337">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1337">Required.</span></span> <span data-ttu-id="947af-1338">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1338">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-1339">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1339">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="947af-1340">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1340">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1341">합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1341">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1342">이 예제에서는 문자열 변수에서 `LTrim` 함수를 사용하여 선행 공백을 제거하고 `RTrim` 함수를 사용하여 후행 공백을 제거하며</span><span class="sxs-lookup"><span data-stu-id="947af-1342">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="947af-1343">`Trim` 함수를 사용하여 양쪽 공백을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1343">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1344">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1344">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="947af-1345">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1345">Required.</span></span> <span data-ttu-id="947af-1346"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1346"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1347">문자열에 넣을 공백의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1347">The number of spaces you want in the string.</span></span></param>
        <summary><span data-ttu-id="947af-1348">지정한 수 만큼의 공백으로 구성되는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1348">Returns a string consisting of the specified number of spaces.</span></span></summary>
        <returns><span data-ttu-id="947af-1349">지정한 수 만큼의 공백으로 구성되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1349">A string consisting of the specified number of spaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1350">`Space` 함수는 출력 서식 지정 및 고정 길이 문자열에서 데이터를 지울 때 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1350">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1351">이 예제에서는 `Space` 함수는 지정 된 수 만큼의 공백으로 구성 된 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1351">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1352"><paramref name="Number" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="947af-1352"><paramref name="Number" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1353">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1353">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1354">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1354">Required.</span></span> <span data-ttu-id="947af-1355">부분 문자열과 구분 기호를 포함하는 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1355"><see langword="String" /> expression containing substrings and delimiters.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="947af-1356">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1356">Optional.</span></span> <span data-ttu-id="947af-1357">부분 문자열의 한계를 식별하기 위해 사용되는 단일 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1357">Any single character used to identify substring limits.</span></span> <span data-ttu-id="947af-1358"><paramref name="Delimiter" />를 생략하면 공백 문자(" ")가 구분 기호로 간주됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1358">If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.</span></span></param>
        <param name="Limit"><span data-ttu-id="947af-1359">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1359">Optional.</span></span> <span data-ttu-id="947af-1360">입력 문자열을 분할해야 하는 부분 문자열의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1360">Maximum number of substrings into which the input string should be split.</span></span> <span data-ttu-id="947af-1361">기본값 -1은 <paramref name="Delimiter" /> 문자열이 발생할 때마다 입력 문자열을 분할해야 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1361">The default, -1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-1362">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1362">Optional.</span></span> <span data-ttu-id="947af-1363">부분 문자열을 평가할 때 사용할 비교 종류를 나타내는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1363">Numeric value indicating the comparison to use when evaluating substrings.</span></span> <span data-ttu-id="947af-1364">값에 대해서는 "설정"을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="947af-1364">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="947af-1365">지정된 수의 부분 문자열을 포함하는 0부터 시작하는 1차원 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1365">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span></span></summary>
        <returns><span data-ttu-id="947af-1366"><see langword="String" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1366"><see langword="String" /> array.</span></span> <span data-ttu-id="947af-1367"><paramref name="Expression" />이 길이가 0인 문자열("")인 경우 <see langword="Split" />는 길이가 0인 문자열이 포함된 단일 요소 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1367">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span></span> <span data-ttu-id="947af-1368"><paramref name="Delimiter" />가 길이가 0인 문자열이거나 <paramref name="Expression" />의 어떤 위치에도 표시되지 않을 경우 <see langword="Split" />는 전체 <paramref name="Expression" /> 문자열이 포함된 단일 요소 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1368">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1369">기본적으로 때나 `Limit` 가-1 이면는 `Split` 함수는 구분 기호 문자열의 모든 위치에서 입력된 문자열을 분할 하 고 배열에서 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1369">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="947af-1370">경우는 `Limit` 매개 변수가 0 보다 크면를 `Split` 함수는 첫 번째에서 문자열을 분할 `Limit`구분 기호를-1 개 결과 부분 문자열을 사용 하 여 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1370">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="947af-1371">예를 들어 `Split("a:b:c", ":")` 배열을 반환 `{"a", "b", "c"}`, 하는 동안 `Split("a:b:c", ":", 2)` 배열을 반환 `{"a", "b:c"}`합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1371">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="947af-1372">경우는 `Split` 함수 행에 두 구분 기호 또는 시작 이나 문자열의 끝 구분 기호를 발견 하면, 둘러싸는 것 해석 하는 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="947af-1372">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="947af-1373">예를 들어 `Split("xx", "x")` 세 개의 빈 문자열을 포함 하는 배열을 반환 합니다: 사이 있는 문자열을 "x", "x" 문자열을 두 개의 첫 번째 및 마지막 "x"와 문자열의 끝 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1373">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="947af-1374">이 테이블을 보여 줍니다. 어떻게 선택적 `Delimiter`, `Limit`, 및 `Compare` 매개 변수의 동작을 변경할 수는 `Split` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1374">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="947af-1375">분할 호출</span><span class="sxs-lookup"><span data-stu-id="947af-1375">Split Call</span></span>|<span data-ttu-id="947af-1376">반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-1376">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="947af-1377">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="947af-1377">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="947af-1378">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="947af-1378">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="947af-1379">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="947af-1379">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="947af-1380">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="947af-1380">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="947af-1381">{"Alice와 bob은"}</span><span class="sxs-lookup"><span data-stu-id="947af-1381">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="947af-1382">{"Alice", "Bob"}</span><span class="sxs-lookup"><span data-stu-id="947af-1382">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="947af-1383">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="947af-1383">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="947af-1384">{"someone", "example.com"}</span><span class="sxs-lookup"><span data-stu-id="947af-1384">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="947af-1385">`Compare` 인수는 다음 값을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1385">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="947af-1386">상수</span><span class="sxs-lookup"><span data-stu-id="947af-1386">Constant</span></span>|<span data-ttu-id="947af-1387">설명</span><span class="sxs-lookup"><span data-stu-id="947af-1387">Description</span></span>|<span data-ttu-id="947af-1388">값</span><span class="sxs-lookup"><span data-stu-id="947af-1388">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="947af-1389">이진 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1389">Performs a binary comparison</span></span>|<span data-ttu-id="947af-1390">0</span><span class="sxs-lookup"><span data-stu-id="947af-1390">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="947af-1391">텍스트 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1391">Performs a textual comparison</span></span>|<span data-ttu-id="947af-1392">1</span><span class="sxs-lookup"><span data-stu-id="947af-1392">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-1393">다음 예제에서는 해당 공백이 있는 문자열을 분할 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1393">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="947af-1394">다음 예에서는 행에 여러 개의 구분 기호를 사용 하 여 문자열을 분할 하 고 빈 문자열은 필터링 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1394">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1395">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1395">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="947af-1396">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1396">Required.</span></span> <span data-ttu-id="947af-1397">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1397">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="String2"><span data-ttu-id="947af-1398">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1398">Required.</span></span> <span data-ttu-id="947af-1399">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1399">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Compare"><span data-ttu-id="947af-1400">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1400">Optional.</span></span> <span data-ttu-id="947af-1401">문자열 비교의 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1401">Specifies the type of string comparison.</span></span> <span data-ttu-id="947af-1402"><paramref name="Compare" />가 생략되면 <see langword="Option Compare" /> 설정에 따라 비교 형식이 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1402">If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="947af-1403">문자열 비교의 결과에 따라 -1, 0 또는 1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1403">Returns -1, 0, or 1, based on the result of a string comparison.</span></span></summary>
        <returns><span data-ttu-id="947af-1404"><see langword="StrComp" /> 함수의 반환 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1404">The <see langword="StrComp" /> function has the following return values.</span></span>  
  
 <list type="table"><item><term> <span data-ttu-id="947af-1405">조건</span><span class="sxs-lookup"><span data-stu-id="947af-1405">If</span></span> 
 </term><description> <span data-ttu-id="947af-1406">StrComp 함수의 반환 값</span><span class="sxs-lookup"><span data-stu-id="947af-1406">StrComp returns</span></span> 
 </description></item><item><term><span data-ttu-id="947af-1407"><paramref name="String1" />이 <paramref name="String2" /> 앞에 정렬되는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1407"><paramref name="String1" /> sorts ahead of <paramref name="String2" /></span></span></term><description> <span data-ttu-id="947af-1408">-1</span><span class="sxs-lookup"><span data-stu-id="947af-1408">-1</span></span> 
 </description></item><item><term><span data-ttu-id="947af-1409"><paramref name="String1" />이 <paramref name="String2" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1409"><paramref name="String1" /> is equal to <paramref name="String2" /></span></span></term><description> <span data-ttu-id="947af-1410">0</span><span class="sxs-lookup"><span data-stu-id="947af-1410">0</span></span> 
 </description></item><item><term><span data-ttu-id="947af-1411"><paramref name="String1" />이 <paramref name="String2" /> 뒤에 정렬되는 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1411"><paramref name="String1" /> sorts after <paramref name="String2" /></span></span></term><description> <span data-ttu-id="947af-1412">1</span><span class="sxs-lookup"><span data-stu-id="947af-1412">1</span></span> 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1413">문자열은 첫 번째 문자로 시작 하는 영숫자 정렬 값으로 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1413">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="947af-1414">이진 비교, 텍스트 비교 및 정렬 순서에 대 한 자세한 내용은 참조 하세요 [Option Compare 문](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1414">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="947af-1415">`Compare` 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1415">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="947af-1416">상수</span><span class="sxs-lookup"><span data-stu-id="947af-1416">Constant</span></span>|<span data-ttu-id="947af-1417">설명</span><span class="sxs-lookup"><span data-stu-id="947af-1417">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="947af-1418">문자의 내부 이진 표현에서 파생 된 정렬 순서에 따라 이진 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1418">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="947af-1419">시스템의 지정 된 대/소문자 구분 텍스트 정렬 순서에 따라 텍스트 비교를 수행 `LocaleID` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1419">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="947af-1420">이 예제에서는 `StrComp` 문자열 비교의 결과 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1420">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1421"><paramref name="Compare" /> 값이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1421"><paramref name="Compare" /> value is not valid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1422">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1422">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-1423">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-1423">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-1424">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-1424">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1425">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1425">Required.</span></span> <span data-ttu-id="947af-1426">변환할 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1426"><see langword="String" /> expression to be converted.</span></span></param>
        <param name="Conversion"><span data-ttu-id="947af-1427">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1427">Required.</span></span> <span data-ttu-id="947af-1428"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1428"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span></span> <span data-ttu-id="947af-1429">수행할 변환 형식을 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1429">The enumeration value specifying the type of conversion to perform.</span></span></param>
        <param name="LocaleID"><span data-ttu-id="947af-1430">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1430">Optional.</span></span> <span data-ttu-id="947af-1431">시스템의 <see langword="LocaleID" /> 값과 다른 경우의 <see langword="LocaleID" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1431">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span></span> <span data-ttu-id="947af-1432">기본값은 시스템의 <see langword="LocaleID" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1432">(The system <see langword="LocaleID" /> value is the default.)</span></span></param>
        <summary><span data-ttu-id="947af-1433">지정된 대로 변환된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1433">Returns a string converted as specified.</span></span></summary>
        <returns><span data-ttu-id="947af-1434">지정된 대로 변환된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1434">A string converted as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1435">상수 `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`합니다 `VbStrConv.Katakana`, 및 `VbStrConv.Hiragana` 는 적용 되지 않으므로, 로캘에서 사용 하는 경우 런타임 오류가 발생할 수 있습니다 항상 그렇지는 않지만: 상수 `VbStrConv.Katakana` 및 `VbStrConv.Hiragana`일본어 언어 팩이 설치 된 일본어가 아닌 시스템에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1435">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="947af-1436">또한 사용 하 여 상수 `VbStrConv.Wide` 및 `VbStrConv.Narrow` 설치는 동아시아 언어를 사용 하 여 모든 시스템에서 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1436">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="947af-1437">이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1437">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="947af-1438">애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1438">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="947af-1439">자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1439">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="947af-1440">`Conversion` 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1440">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="947af-1441">열거형 멤버</span><span class="sxs-lookup"><span data-stu-id="947af-1441">Enumeration member</span></span>|<span data-ttu-id="947af-1442">설명</span><span class="sxs-lookup"><span data-stu-id="947af-1442">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="947af-1443">변환 하지 않음</span><span class="sxs-lookup"><span data-stu-id="947af-1443">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="947af-1444">파일 시스템 (기본값) 보다는 대/소문자를 실행 하는 것에 대 한 언어 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1444">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="947af-1445">유효 `VbStrConv.UpperCase` 고 `VbStrConv.LowerCase` 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1445">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="947af-1446">지정된 문자열을 대문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1446">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="947af-1447">문자열을 소문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1447">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="947af-1448">문자열을 대문자로에서 모든 단어의 첫 번째 문자를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1448">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="947af-1449">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1449">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="947af-1450">(반자) 문자 (반자) 와이드 문자 문자열의 좁은 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1450">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="947af-1451">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1451">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="947af-1452">좁은 문자 (반자) 문자열의 와이드 (반자) 문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1452">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="947af-1453">`VbStrConv.Katakana` <sup>\*\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1453">`VbStrConv.Katakana` <sup>\*\*</sup></span></span>|<span data-ttu-id="947af-1454">문자열의 히라가나 문자를 가타카나 문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1454">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="947af-1455">`VbStrConv.Hiragana` <sup>\*\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1455">`VbStrConv.Hiragana` <sup>\*\*</sup></span></span>|<span data-ttu-id="947af-1456">문자열의 가타카나 문자를 히라가나 문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1456">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="947af-1457">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1457">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="947af-1458">중국어 간체를 중국어 번체 문자를 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1458">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="947af-1459">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="947af-1459">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="947af-1460">중국어 (번체) 중국어 간체 문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1460">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="947af-1461"><sup>\*</sup> 아시아어 로캘에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1461"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="947af-1462"><sup>\*\*</sup> 일본에만 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1462"><sup>\*\*</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947af-1463">이러한 상수는.NET Framework 공용 언어 런타임에서 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1463">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="947af-1464">결과적으로 사용할 수 있습니다 어디서 나 코드에서 실제 값 대신.</span><span class="sxs-lookup"><span data-stu-id="947af-1464">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="947af-1465">대부분을 결합할 수 있습니다 (예를 들어 `UpperCase + Wide`)를 제외 하 고 함께 있을 때 (예를 들어 `VbStrConv.Wide + VbStrConv.Narrow`).</span><span class="sxs-lookup"><span data-stu-id="947af-1465">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="947af-1466">다음은 적절 한 대/소문자 구분에 대 한 올바른 단어 구분 기호: Null (`Chr$(0)`), 가로 탭 (`Chr$(9)`), 줄 바꿈 (`Chr$(10)`), 세로 탭 (`Chr$(11)`), 폼 피드 (`Chr$(12)`), 캐리지 리턴 (`Chr$(13)`), (공간 단일 바이트 문자 집합) (`Chr$(32)`).</span><span class="sxs-lookup"><span data-stu-id="947af-1466">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="947af-1467">동아시아 언어 문화권에 대 한 국가/지역별 전체 또는 너비의 절반 수, 공백, 실제 값은 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1467">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1468">이 예제는 텍스트를 모두 소문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1468">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1469">지원되지 않는 <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 또는 &gt; 2048 또는 지정된 로캘에 대해 지원되지 않는 변환.</span><span class="sxs-lookup"><span data-stu-id="947af-1469">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1470">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1470">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="947af-1471">CString</span><span class="sxs-lookup"><span data-stu-id="947af-1471">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-1472">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1472">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="947af-1473">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1473">Required.</span></span> <span data-ttu-id="947af-1474"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1474"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1475">반환되는 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1475">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="947af-1476">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1476">Required.</span></span> <span data-ttu-id="947af-1477">임의의 유효한 <see langword="Char" />, <see langword="String" /> 또는 <see langword="Object" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1477">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="947af-1478">해당 식에서 첫 문자만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1478">Only the first character of the expression will be used.</span></span> <span data-ttu-id="947af-1479">Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1479">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="947af-1480">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1480">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="947af-1481">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1481">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1482">이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1482">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="947af-1483">문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1483">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1484">이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1484">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1485"><paramref name="Number" />가 0보다 작거나 <paramref name="Character" /> 형식이 유효하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1485"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="947af-1486"><paramref name="Character" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1486"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1487">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1487">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="947af-1488">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1488">Required.</span></span> <span data-ttu-id="947af-1489"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1489"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1490">반환되는 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1490">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="947af-1491">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1491">Required.</span></span> <span data-ttu-id="947af-1492">임의의 유효한 <see langword="Char" />, <see langword="String" /> 또는 <see langword="Object" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1492">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="947af-1493">해당 식에서 첫 문자만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1493">Only the first character of the expression will be used.</span></span> <span data-ttu-id="947af-1494">Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1494">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="947af-1495">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1495">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="947af-1496">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1496">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1497">이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1497">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="947af-1498">문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1498">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1499">이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1499">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1500"><paramref name="Number" />가 0보다 작거나 <paramref name="Character" /> 형식이 유효하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1500"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="947af-1501"><paramref name="Character" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1501"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1502">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1502">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="947af-1503">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1503">Required.</span></span> <span data-ttu-id="947af-1504"><see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1504"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="947af-1505">반환되는 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1505">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="947af-1506">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1506">Required.</span></span> <span data-ttu-id="947af-1507">임의의 유효한 <see langword="Char" />, <see langword="String" /> 또는 <see langword="Object" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1507">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="947af-1508">해당 식에서 첫 문자만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1508">Only the first character of the expression will be used.</span></span> <span data-ttu-id="947af-1509">Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1509">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="947af-1510">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1510">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="947af-1511">지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1511">A string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1512">이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1512">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="947af-1513">문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1513">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1514">이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1514">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="947af-1515"><paramref name="Number" />가 0보다 작거나 <paramref name="Character" /> 형식이 유효하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1515"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="947af-1516"><paramref name="Character" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="947af-1516"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1517">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1517">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="947af-1518">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1518">Required.</span></span> <span data-ttu-id="947af-1519">문자 순서가 거꾸로 바뀌는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1519">String expression whose characters are to be reversed.</span></span> <span data-ttu-id="947af-1520"><paramref name="Expression" />이 길이가 0인 문자열("")이면 길이가 0인 문자열이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1520">If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.</span></span></param>
        <summary><span data-ttu-id="947af-1521">지정된 문자열의 문자 순서를 역순으로 한 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1521">Returns a string in which the character order of a specified string is reversed.</span></span></summary>
        <returns><span data-ttu-id="947af-1522">지정된 문자열의 문자 순서를 역순으로 한 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1522">A string in which the character order of a specified string is reversed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1523">합니다 `StrReverse` 와 동일한 문자를 포함 하는 문자열을 반환 하는 함수 `Expression`, 있지만 반대 순서로 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1523">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1524">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1524">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="947af-1525">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1525">Required.</span></span> <span data-ttu-id="947af-1526">모든 유효한 <see langword="String" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1526">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-1527">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1527">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="947af-1528">선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1528">A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1529">합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1529">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1530">이 예제에서는 문자열 변수에서 `LTrim` 함수를 사용하여 선행 공백을 제거하고 `RTrim` 함수를 사용하여 후행 공백을 제거하며</span><span class="sxs-lookup"><span data-stu-id="947af-1530">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="947af-1531">`Trim` 함수를 사용하여 양쪽 공백을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1531">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1532">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1532">String Manipulation Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="947af-1533">대문자로 변환된 특정 문자열이 있는 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1533">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="947af-1534">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1534">Required.</span></span> <span data-ttu-id="947af-1535">임의의 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1535">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-1536">대문자로 변환된 특정 문자열이 있는 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1536">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="947af-1537">대문자로 변환된 특정 문자열이 있는 문자열 또는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1537">A string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1538">소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1538">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="947af-1539">이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1539">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="947af-1540">애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1540">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="947af-1541">자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1541">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1542">다음 예제에서는 `UCase` 함수를 사용하여 대문자 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1542">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1543">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1543">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-1544">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-1544">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-1545">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-1545">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="947af-1546">필수.</span><span class="sxs-lookup"><span data-stu-id="947af-1546">Required.</span></span> <span data-ttu-id="947af-1547">임의의 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1547">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="947af-1548">대문자로 변환된 특정 문자열이 있는 문자열 또는 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1548">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="947af-1549">대문자로 변환된 특정 문자열이 있는 문자열 또는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1549">A string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947af-1550">소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1550">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="947af-1551">이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1551">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="947af-1552">애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1552">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="947af-1553">자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1553">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947af-1554">다음 예제에서는 `UCase` 함수를 사용하여 대문자 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="947af-1554">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md"><span data-ttu-id="947af-1555">문자열 조작 요약</span><span class="sxs-lookup"><span data-stu-id="947af-1555">String Manipulation Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md"><span data-ttu-id="947af-1556">Visual Basic의 문자열</span><span class="sxs-lookup"><span data-stu-id="947af-1556">Strings in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md"><span data-ttu-id="947af-1557">Visual Basic의 문자열 소개</span><span class="sxs-lookup"><span data-stu-id="947af-1557">Introduction to Strings in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>