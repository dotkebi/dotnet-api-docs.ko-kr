<Type Name="DataContractResolver" FullName="System.Runtime.Serialization.DataContractResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2c21639d0e350a641e6aa0f1786014e2f4d7df9" /><Meta Name="ms.sourcegitcommit" Value="d2dc7b29150110865ef8f199ee7463d9568fc696" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/25/2019" /><Meta Name="ms.locfileid" Value="58413880" /></Metadata><TypeSignature Language="C#" Value="public abstract class DataContractResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataContractResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataContractResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractResolver abstract" />
  <TypeSignature Language="F#" Value="type DataContractResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6ac4e-101">serialization 및 deserialization 중 <see langword="xsi:type" /> 표현에 대해 동적으로 형식을 매핑하기 위한 메커니즘을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-101">Provides a mechanism for dynamically mapping types to and from <see langword="xsi:type" /> representations during serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ac4e-102">개발자는 네트워크를 통해 전송 되는 어떤 데이터에 대해 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-102">Developers should be careful about what data is being sent over the wire.</span></span> <span data-ttu-id="6ac4e-103">해당 데이터를 보호 하려면 전송 또는 메시지 보안을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-103">You can use transport or message security to secure that data.</span></span> <span data-ttu-id="6ac4e-104">자세한 내용은 [보안](~/docs/framework/wcf/samples/security-in-wcf.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-104">For more information, see [Security](~/docs/framework/wcf/samples/security-in-wcf.md).</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="6ac4e-105">만 사용 하 여 <xref:System.Runtime.Serialization.DataContractResolver> 의 정보는 serialize 되 고 완전히 확실 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-105">Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized.</span></span> <span data-ttu-id="6ac4e-106">악의적인 형식이 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-106">Malicious types can cause unexpected behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ac4e-107">다음 예제에서는 <xref:System.Runtime.Serialization.DataContractResolver>에서 클래스를 파생하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-107">The following example shows how to derive a class from <xref:System.Runtime.Serialization.DataContractResolver>.</span></span> <span data-ttu-id="6ac4e-108">작업 샘플을 보려면 [DataContractResolver](~/docs/framework/wcf/samples/datacontractresolver.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-108">For a working sample, see [DataContractResolver](~/docs/framework/wcf/samples/datacontractresolver.md).</span></span>  
  
 [!code-csharp[DataContractResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataContractResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataContractResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6ac4e-109"><see cref="T:System.Runtime.Serialization.DataContractResolver" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-109">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveName">
      <MemberSignature Language="C#" Value="public abstract Type ResolveName (string typeName, string typeNamespace, Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type ResolveName(string typeName, string typeNamespace, class System.Type declaredType, class System.Runtime.Serialization.DataContractResolver knownTypeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ResolveName (typeName As String, typeNamespace As String, declaredType As Type, knownTypeResolver As DataContractResolver) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ ResolveName(System::String ^ typeName, System::String ^ typeNamespace, Type ^ declaredType, System::Runtime::Serialization::DataContractResolver ^ knownTypeResolver);" />
      <MemberSignature Language="F#" Value="abstract member ResolveName : string * string * Type * System.Runtime.Serialization.DataContractResolver -&gt; Type" Usage="dataContractResolver.ResolveName (typeName, typeNamespace, declaredType, knownTypeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="declaredType" Type="System.Type" />
        <Parameter Name="knownTypeResolver" Type="System.Runtime.Serialization.DataContractResolver" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6ac4e-110">매핑할 <see langword="xsi:type" /> 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-110">The <see langword="xsi:type" /> name to map.</span></span></param>
        <param name="typeNamespace"><span data-ttu-id="6ac4e-111">매핑할 <see langword="xsi:type" /> 네임스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-111">The <see langword="xsi:type" /> namespace to map.</span></span></param>
        <param name="declaredType"><span data-ttu-id="6ac4e-112">데이터 계약에 선언된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-112">The type declared in the data contract.</span></span></param>
        <param name="knownTypeResolver"><span data-ttu-id="6ac4e-113">알려진 형식 확인자입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-113">The known type resolver.</span></span></param>
        <summary><span data-ttu-id="6ac4e-114">deserialization 중에 이 메서드를 재정의하여 지정된 <see langword="xsi:type" /> 이름 및 네임스페이스를 데이터 계약 형식에 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-114">Override this method to map the specified <see langword="xsi:type" /> name and namespace to a data contract type during deserialization.</span></span></summary>
        <returns><span data-ttu-id="6ac4e-115"><see langword="xsi:type" /> 이름 및 네임스페이스가 매핑되는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-115">The type the <see langword="xsi:type" /> name and namespace is mapped to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ac4e-116">구현 내부의 알려진 형식 확인 논리를 사용하는 경우 이에 대한 참조가 `knownTypeResolver` 매개 변수로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-116">If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ac4e-117">다음 예제에서는 <xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A> 메서드의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-117">The following example shows an implementation of the <xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A> method.</span></span>  
  
 [!code-csharp[DataContractResolver#0](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryResolveType">
      <MemberSignature Language="C#" Value="public abstract bool TryResolveType (Type type, Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver, out System.Xml.XmlDictionaryString typeName, out System.Xml.XmlDictionaryString typeNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryResolveType(class System.Type type, class System.Type declaredType, class System.Runtime.Serialization.DataContractResolver knownTypeResolver, [out] class System.Xml.XmlDictionaryString&amp; typeName, [out] class System.Xml.XmlDictionaryString&amp; typeNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryResolveType(Type ^ type, Type ^ declaredType, System::Runtime::Serialization::DataContractResolver ^ knownTypeResolver, [Runtime::InteropServices::Out] System::Xml::XmlDictionaryString ^ % typeName, [Runtime::InteropServices::Out] System::Xml::XmlDictionaryString ^ % typeNamespace);" />
      <MemberSignature Language="F#" Value="abstract member TryResolveType : Type * Type * System.Runtime.Serialization.DataContractResolver *  *  -&gt; bool" Usage="dataContractResolver.TryResolveType (type, declaredType, knownTypeResolver, typeName, typeNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="declaredType" Type="System.Type" />
        <Parameter Name="knownTypeResolver" Type="System.Runtime.Serialization.DataContractResolver" />
        <Parameter Name="typeName" Type="System.Xml.XmlDictionaryString" RefType="out" />
        <Parameter Name="typeNamespace" Type="System.Xml.XmlDictionaryString" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="6ac4e-118">매핑할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-118">The type to map.</span></span></param>
        <param name="declaredType"><span data-ttu-id="6ac4e-119">데이터 계약에 선언된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-119">The type declared in the data contract.</span></span></param>
        <param name="knownTypeResolver"><span data-ttu-id="6ac4e-120">알려진 형식 확인자입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-120">The known type resolver.</span></span></param>
        <param name="typeName"><span data-ttu-id="6ac4e-121">xsi:type 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-121">The xsi:type name.</span></span></param>
        <param name="typeNamespace"><span data-ttu-id="6ac4e-122">xsi:type 네임스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-122">The xsi:type namespace.</span></span></param>
        <summary><span data-ttu-id="6ac4e-123">이 메서드를 재정의하여 serialization 중에 데이터 계약 형식을 <see langword="xsi:type" /> 이름 및 네임스페이스에 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-123">Override this method to map a data contract type to an <see langword="xsi:type" /> name and namespace during serialization.</span></span></summary>
        <returns><span data-ttu-id="6ac4e-124">매핑이 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-124"><see langword="true" /> if mapping succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ac4e-125">구현 내부의 알려진 형식 확인 논리를 사용하는 경우 이에 대한 참조가 `knownTypeResolver` 매개 변수로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-125">If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ac4e-126">다음 예제에서는 <xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A> 메서드의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6ac4e-126">The following example shows an implementation of the <xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A> method.</span></span>  
  
 [!code-csharp[DataContractResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>