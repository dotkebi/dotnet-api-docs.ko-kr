<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ab2f630d925cd8460c6398bc881fc6f802d0fe1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58695296" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c86f9-101">개체가 자체 serialization 및 deserialization을 제어할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-101">Allows an object to control its own serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c86f9-102">Serialize 할 수 있는 모든 클래스를 사용 하 여 표시 되어야 합니다는 <xref:System.SerializableAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-102">Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="c86f9-103">클래스를 해당 serialization 프로세스를 제어 해야 하는 경우 구현할 수는 <xref:System.Runtime.Serialization.ISerializable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-103">If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span> <span data-ttu-id="c86f9-104"><xref:System.Runtime.Serialization.Formatter> 호출을 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> serialization 시 제공 된 채웁니다 <xref:System.Runtime.Serialization.SerializationInfo> 개체를 나타내는 데 필요한 모든 데이터를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-104">The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object.</span></span> <span data-ttu-id="c86f9-105">합니다 <xref:System.Runtime.Serialization.Formatter> 만듭니다는 <xref:System.Runtime.Serialization.SerializationInfo> 그래프에서 개체의 형식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-105">The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph.</span></span> <span data-ttu-id="c86f9-106">직접 사용 하 여 수에 대 한 프록시를 보내야 하는 개체를 <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> 및 <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> 메서드를 <xref:System.Runtime.Serialization.SerializationInfo> 전송 된 정보를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-106">Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.</span></span>  
  
 <span data-ttu-id="c86f9-107">클래스 상속의 경우 구현 하는 기본 클래스에서 파생 되는 클래스를 serialize 할 수 있기 <xref:System.Runtime.Serialization.ISerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-107">In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>.</span></span> <span data-ttu-id="c86f9-108">파생된 클래스의 기본 클래스 구현을 호출 해야이 예에서 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 구현 내의 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-108">In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</span></span> <span data-ttu-id="c86f9-109">그렇지 않은 경우 기본 클래스에서 데이터 serialize 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-109">Otherwise, the data from the base class will not be serialized.</span></span>  
  
 <span data-ttu-id="c86f9-110">합니다 <xref:System.Runtime.Serialization.ISerializable> 서명 생성자를 사용 하 여 생성자를 암시 하는 인터페이스 (<xref:System.Runtime.Serialization.SerializationInfo> 내용은 <xref:System.Runtime.Serialization.StreamingContext> 컨텍스트).</span><span class="sxs-lookup"><span data-stu-id="c86f9-110">The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context).</span></span> <span data-ttu-id="c86f9-111">Deserialization 시 데이터를 한 후에 현재 생성자가 호출 된 <xref:System.Runtime.Serialization.SerializationInfo> 포맷터에 의해 deserialize 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-111">At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter.</span></span> <span data-ttu-id="c86f9-112">일반적으로이 생성자는 클래스가 봉인 하는 경우 보호 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-112">In general, this constructor should be protected if the class is not sealed.</span></span>  
  
 <span data-ttu-id="c86f9-113">개체가 deserialize 될 순서를 보장할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-113">The order in which objects are deserialized cannot be guaranteed.</span></span> <span data-ttu-id="c86f9-114">예를 들어, 아직 deserialize 되지 않는 형식을 참조 하는 형식, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-114">For example, if one type references a type that has not been deserialized yet, an exception will occur.</span></span> <span data-ttu-id="c86f9-115">구현 하 여 문제를 해결할 수 이러한 종속성이 있는 형식, 만들려는 경우 합니다 `IDeserializationCallback` 인터페이스 및 `OnDeserialization` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c86f9-115">If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.</span></span>  
  
 <span data-ttu-id="c86f9-116">확장 하는 개체 형식을 처리 하는 serialization 아키텍처 <xref:System.MarshalByRefObject> 를 확장 하는 형식으로 동일한 <xref:System.Object>입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-116">The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>.</span></span> <span data-ttu-id="c86f9-117">이러한 형식을 사용 하 여 표시할 수 있습니다는 <xref:System.SerializableAttribute> 구현 및는 <xref:System.Runtime.Serialization.ISerializable> 다른 개체 형식으로는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-117">These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type.</span></span> <span data-ttu-id="c86f9-118">해당 개체의 상태 캡처되고 스트림에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-118">Their object state will be captured and persisted onto the stream.</span></span>  
  
 <span data-ttu-id="c86f9-119">이러한 형식을 통해 사용 중인 경우 <xref:System.Runtime.Remoting>, 일반적인 serialization 보다 우선 하 고 대신에 프록시를 serialize 하는 서로게이트를 제공 하는 원격 인프라는 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-119">When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="c86f9-120">서로게이트는 특정 유형의 개체 serialize 및 deserialize 하는 방법을 아는 도우미입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-120">A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</span></span> <span data-ttu-id="c86f9-121">대부분의 경우에서 사용자에 게 보이지 않는 프록시 형식일 <xref:System.Runtime.Remoting.ObjRef>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-121">The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.</span></span>  
  
 <span data-ttu-id="c86f9-122">일반적인 디자인 패턴으로는 것은 serializable 특성을 모두 표시 하 고 확장 하는 클래스에 대 한 일반적인 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-122">As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="c86f9-123">개발자는 이러한 두 가지 특성을 결합 하는 경우 가능한 직렬화 및 원격 시나리오에 대 한 신중 하 게 생각해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-123">Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</span></span> <span data-ttu-id="c86f9-124">이 수 있는 해당 하는 한 가지 예는을 <xref:System.IO.MemoryStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-124">One example where this might be applicable is with a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="c86f9-125">기본 클래스를 하는 동안 <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>)에서 확장 <xref:System.MarshalByRefObject>의 상태를 캡처할 수 있기를 <xref:System.IO.MemoryStream> 를 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-125">While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will.</span></span> <span data-ttu-id="c86f9-126">따라서 데이터베이스로이 스트림의 상태를 직렬화 하 고 시간에이 나중에 복원할 의미 있는 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-126">It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</span></span> <span data-ttu-id="c86f9-127">그러나 원격 서비스를 통해 사용 하는 경우이 형식의 개체 프록시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-127">However, when used through remoting, an object of this type would be proxied.</span></span>  
  
 <span data-ttu-id="c86f9-128">확장 하는 클래스의 serialization에 대 한 자세한 내용은 <xref:System.MarshalByRefObject>를 참조 하세요 <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-128">For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</span></span> <span data-ttu-id="c86f9-129">구현에 대 한 자세한 내용은 <xref:System.Runtime.Serialization.ISerializable>를 참조 하세요 [사용자 지정 Serialization](~/docs/standard/serialization/custom-serialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-129">For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/standard/serialization/custom-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c86f9-130">다음 코드 예제에서는 <xref:System.Runtime.Serialization.ISerializable> 클래스에 대 한 사용자 지정 serialization 동작을 정의 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-130">The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.</span></span>  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="c86f9-131">개체가 자체 serialization 및 deserialization에 참여할 수 있도록 하려면이 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-131">Implement this interface to allow an object to take part in its own serialization and deserialization.</span></span></para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="c86f9-132">XML 및 SOAP Serialization</span><span class="sxs-lookup"><span data-stu-id="c86f9-132">XML and SOAP Serialization</span></span></related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md"><span data-ttu-id="c86f9-133">사용자 지정 serialization</span><span class="sxs-lookup"><span data-stu-id="c86f9-133">Custom serialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c86f9-134">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-134">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="c86f9-135">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</span><span class="sxs-lookup"><span data-stu-id="c86f9-135">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="c86f9-136">대상 개체를 직렬화하는 데 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-136">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c86f9-137">에 포함 된 모든 개체는 <xref:System.Runtime.Serialization.SerializationInfo> 자동으로 추적 되 고 포맷터가 serialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-137">Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 <span data-ttu-id="c86f9-138">호출 하는 코드 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 필요는 <xref:System.Security.Permissions.SecurityPermission> serialization 서비스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-138">Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services.</span></span> <span data-ttu-id="c86f9-139">연관된 열거형: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c86f9-139">Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c86f9-140">이 메서드가 전파 serialization 중의 개체 인스턴스당 한 번만 호출할 수는 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-140">It is not guaranteed that this method will be called only once per object instance during serialization.</span></span> <span data-ttu-id="c86f9-141">따라서 메서드는 해당 동작 되도록 라고 하는 횟수에 관계 없이 동일한 방식으로 구현 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-141">Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c86f9-142">다음 예제에서는 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> serialize 된 개체에 대 한 대체 값을 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-142">The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object.</span></span> <span data-ttu-id="c86f9-143">코드를 사용 하는 <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> 메서드는 <xref:System.Runtime.Serialization.SerializationInfo> 개체를 serialize 할 때 대체 값을 저장 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-143">The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized.</span></span> <span data-ttu-id="c86f9-144">반대로,의 생성자는 `Person` 클래스 역직렬화 하는 동안 호출 되 면 대체 값은 사용해 서 검색 됩니다는 <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> 메서드 고 개체의 필드에 다시 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="c86f9-144">Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.</span></span>  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c86f9-145">호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="c86f9-145">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md"><span data-ttu-id="c86f9-146">사용자 지정 serialization</span><span class="sxs-lookup"><span data-stu-id="c86f9-146">Custom serialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>