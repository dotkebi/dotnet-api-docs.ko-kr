<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36d9e821ddc52d86e50fb6acd5e8b7576271de24" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541523" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="92f7c-101">UTF-8 인코딩 JSON 텍스트에 대한 정방향 읽기 전용 액세스를 위한 고성능 API를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-101">Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-102">`Utf8JsonReader` 캐싱 없음 및 기본적으로 순차적으로 텍스트를 엄격 하 게 준수 하는 프로세스를 [JSON RFC](https://tools.ietf.org/html/rfc8259)합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-102">`Utf8JsonReader` processes the text sequentially with no caching and by default adheres strictly to the [JSON RFC](https://tools.ietf.org/html/rfc8259).</span></span>

<span data-ttu-id="92f7c-103">때 `Utf8JsonReader` 잘못 된 JSON을 발견 하면 throw를 <xref:System.Text.Json.JsonReaderException> 줄에서 줄 번호 및 바이트 위치와 같은 기본 오류 정보를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-103">When `Utf8JsonReader` encounters invalid JSON, it throws a <xref:System.Text.Json.JsonReaderException>  with basic error information like line number and byte position on the line.</span></span>
<span data-ttu-id="92f7c-104">이 형식은 ref struct 이므로 비동기 직접 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-104">Since this type is a ref struct, it doesn't directly support async.</span></span> <span data-ttu-id="92f7c-105">그러나 불완전 한 데이터를 읽고 자세한 데이터는 표시 되 면 읽기를 계속 하려면 재입력에 대 한 지원을 제공지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-105">However, it does provide support for reentrancy to read incomplete data and to continue reading once more data is presented.</span></span>
<span data-ttu-id="92f7c-106">읽는 동안 최대 깊이 설정 하거나 의견을 건너뛸 수의 인스턴스를 만들 수 있게 되기를 <xref:System.Text.Json.JsonReaderState> 판독기에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-106">To be able to set max depth while reading OR allow skipping comments, create an instance of <xref:System.Text.Json.JsonReaderState> and pass it to the reader.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ref System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor([in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte}@,System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ByRef jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader :  * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="92f7c-107">처리할 UTF-8 인코딩 JSON 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-107">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="92f7c-108">입력 시퀀스에 처리할 전체 데이터가 포함되면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-108"><see langword="true" /> when the input sequence contains the entire data to process.</span></span> <span data-ttu-id="92f7c-109">입력 범위에 수행할 더 많은 데이터를 포함한 부분 데이터가 포함되는 경우에만 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-109"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="92f7c-110">생성자에 대한 첫 번째 호출인 경우 기본 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-110">If this is the first call to the constructor, pass in a default state.</span></span> <span data-ttu-id="92f7c-111">그렇지 않으면, 이전 인스턴스 <see cref="T:System.Text.Json.Utf8JsonReader" />의 상태를 캡처하고 다시 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-111">Otherwise, capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="92f7c-112"><see cref="T:System.Text.Json.Utf8JsonReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-112">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-113">이 형식은 ref struct 이므로 스택 전용 형식이, 및 ref 구조체의 모든 제한 사항에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-113">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="92f7c-114">이 생성자를 허용 하는 이유는 이유는 <xref:System.Text.Json.JsonReaderState>합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-114">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="92f7c-115">처리할 UTF-8 인코딩 JSON 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-115">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="92f7c-116">입력 범위에 처리할 전체 데이터가 포함되면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-116"><see langword="true" /> when the input span contains the entire data to process.</span></span> <span data-ttu-id="92f7c-117">입력 범위에 수행할 더 많은 데이터를 포함한 부분 데이터가 포함되는 경우에만 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-117"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="92f7c-118">판독기 상태를 포함하는 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-118">A struct that contains the reader state.</span></span> <span data-ttu-id="92f7c-119">생성자를 첫 번째로 호출하면 기본 상태를 반영해야 합니다. 그렇지 않으면, <see cref="T:System.Text.Json.Utf8JsonReader" />의 이전 인스턴스로부터 상태를 캡처하고 다시 전달해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-119">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="92f7c-120"><see cref="T:System.Text.Json.Utf8JsonReader" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-120">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-121">이 형식은 ref struct 이므로 스택 전용 형식이, 및 ref 구조체의 모든 제한 사항에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-121">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="92f7c-122">이 생성자를 허용 하는 이유는 이유는 <xref:System.Text.Json.JsonReaderState>합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-122">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-123">지정된 UTF-8 인코딩 입력 텍스트로 현재 인스턴스 <see cref="T:System.Text.Json.Utf8JsonReader" />에 대해 지금까지 <see cref="T:System.Text.Json.Utf8JsonReader" />에 의해 사용된 바이트의 총 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-123">Gets the total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> with the given UTF-8 encoded input text.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-124">현재 토큰의 깊이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-124">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="92f7c-125">현재 토큰의 깊이입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-125">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-126">`CurrentDepth` 속성 재귀 깊이 중첩 된 개체를 추적 / 지금까지 처리 JSON 텍스트 내에서 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-126">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text processed so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-127">호출자에 의해 캡처되고 추가 데이터로 <see cref="T:System.Text.Json.Utf8JsonReader" /> 생성자에 다시 전달되어야 하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 상태의 현재 스냅숏을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-127">Gets the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader" /> state that must  be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-128">와 달리 합니다 <xref:System.Text.Json.Utf8JsonReader>, ref 구조체는, 상태 async/await 경계를 넘어 감당할 수 있습니다 및의 새 인스턴스를 계속 하기 전에 비동기식으로 더 많은 데이터의 읽기를 지원 하기 위해이 형식 필요 하므로 <xref:System.Text.Json.Utf8JsonReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-128">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-129">원본으로부터 다음 JSON 토큰 값을 <see cref="T:System.Boolean" />으로 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-129">Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-130"><see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이 <see cref="F:System.Text.Json.JsonTokenType.True" />이면 <see langword="true" />입니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이 <see cref="F:System.Text.Json.JsonTokenType.False" />인 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-130"><see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-131">JSON 토큰의 값은 부울 값이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.True" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.False" />).</span><span class="sxs-lookup"><span data-stu-id="92f7c-131">The value of the JSON token is not a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-132">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Decimal" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-132">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-133"><see cref="T:System.Decimal" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-133">The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-134">`GetDecimal` 예외를 throw 하기 위해 전체 u t F-8로 인코딩된 토큰 값은 구문 분석할 경우는 <xref:System.Decimal> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-134">The `GetDecimal` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Decimal> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-135">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-135">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-136">JSON 토큰 값이 <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-136">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-137">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Double" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-137">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-138"><see cref="T:System.Double" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-138">The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-139">`GetDouble` 예외를 throw 하기 위해 전체 u t F-8로 인코딩된 토큰 값은 구문 분석할 경우는 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-139">The `GetDouble` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Double> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-140">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-140">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-141">JSON 토큰 값이 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-141">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-142">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int32" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-142">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-143"><see cref="T:System.Int32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-143">The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-144">`GetInt32` 예외를 throw 하기 위해 전체 u t F-8로 인코딩된 토큰 값은 구문 분석할 경우는 <xref:System.Int32> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-144">The `GetInt32` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int32> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-145">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-145">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-146">JSON 토큰 값이 잘못된 숫자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-146">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="92f7c-147">예를 들어 10진수를 포함하거나 과학적 표기법으로 기록된 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-147">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="92f7c-148">또는</span><span class="sxs-lookup"><span data-stu-id="92f7c-148">- or-</span></span>

<span data-ttu-id="92f7c-149">JSON 토큰 값이 <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-149">The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-150">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int64" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-150">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-151"><see cref="T:System.Int64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-151">The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-152">`GetInt64` 예외를 throw 하기 위해 전체 u t F-8로 인코딩된 토큰 값은 구문 분석할 경우는 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-152">The `GetInt64` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int64> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-153">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-153">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-154">JSON 토큰 값이 잘못된 숫자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-154">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="92f7c-155">예를 들어 10진수를 포함하거나 과학적 표기법으로 기록된 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-155">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="92f7c-156">또는</span><span class="sxs-lookup"><span data-stu-id="92f7c-156">- or-</span></span>

<span data-ttu-id="92f7c-157">JSON 토큰 값이 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-157">The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-158">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Single" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-158">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-159"><see cref="T:System.Single" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-159">The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-160">`GetSingle` 예외를 throw 하기 위해 전체 u t F-8로 인코딩된 토큰 값은 구문 분석할 경우는 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-160">The `GetSingle` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Single> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-161">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-161">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-162">JSON 토큰 값이 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-162">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-163">이스케이프된 원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.String" />으로 트랜스코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-163">Reads the next JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-164"><see cref="T:System.String" />에 구문 분석된 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-164">The token value parsed to a <see cref="T:System.String" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-165">JSON 토큰 값은 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</span><span class="sxs-lookup"><span data-stu-id="92f7c-165">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>

-or-

The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-166">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt32" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-166">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-167"><see cref="T:System.UInt32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-167">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-168">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-168">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-169">JSON 토큰 값이 잘못된 숫자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-169">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="92f7c-170">예를 들어 10진수를 포함하거나 과학적 표기법으로 기록된 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-170">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="92f7c-171">또는</span><span class="sxs-lookup"><span data-stu-id="92f7c-171">- or-</span></span>

<span data-ttu-id="92f7c-172">JSON 토큰 값이 <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-172">The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-173">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt64" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-173">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-174"><see cref="T:System.UInt64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-174">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-175">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-175">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="92f7c-176">JSON 토큰 값이 잘못된 숫자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-176">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="92f7c-177">예를 들어 10진수를 포함하거나 과학적 표기법으로 기록된 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-177">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="92f7c-178">또는</span><span class="sxs-lookup"><span data-stu-id="92f7c-178">- or-</span></span>

<span data-ttu-id="92f7c-179">JSON 토큰 값이 <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-179">The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-180">토큰 값을 가져오기 위해 사용할 <c>값</c> 속성을 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-180">Gets a value that indicates which <c>Value</c> property to use to get the token value.</span></span></summary>
        <value><span data-ttu-id="92f7c-181"><see langword="true" /> 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 토큰 값을 가져오는 데 사용할 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-181"><see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value.</span></span> <span data-ttu-id="92f7c-182"><see langword="false" /> 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 를 대신 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-182"><see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-183">하는 경우 `HasValueSequence` 됩니다 `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-183">If `HasValueSequence` is `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> is empty.</span></span> <span data-ttu-id="92f7c-184">따라서 사용 하 여 토큰 값을 읽기는 <xref:System.Text.Json.Utf8JsonReader.ValueSpan> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-184">Therefore, read the token value using the <xref:System.Text.Json.Utf8JsonReader.ValueSpan> property.</span></span>

<span data-ttu-id="92f7c-185">내에서 입력 데이터를 `ReadOnlySpan<byte>`이 항상 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-185">For input data within a `ReadOnlySpan<byte>`, this always returns `false`.</span></span> <span data-ttu-id="92f7c-186">내에서 입력 데이터를 `ReadOnlySequence<byte>`를 반환 합니다 `true` 토큰 값 여러 개 이상의 분할 하 고 따라서 범위로 표현할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="92f7c-186">For input data within a `ReadOnlySequence<byte>`, this only returns `true` if the token value straddles more than a single segment and hence can't be represented as a span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-187"><see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 ReadOnlySpan&lt;byte&gt;로 생성된 경우 제공된 UTF-8 인코딩 입력 ReadOnlySequence&lt;byte&gt; 또는 기본값 <see cref="T:System.SequencePosition" /> 내에서 현재 <see cref="T:System.SequencePosition" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-187">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="92f7c-188">현재 <see cref="T:System.SequencePosition" /> 제공 된 utf-8 인코딩 내 입력 ReadOnlySequence&lt;바이트&gt; 또는 기본값 <see cref="T:System.SequencePosition" /> 경우를 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체는 ReadOnlySpan를 사용 하 여 생성 된&lt;바이트&gt;합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-188">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92f7c-189">입력 원본으로부터 다음 JSON 토큰을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-189">Read the next JSON token from the input source.</span></span></summary>
        <returns><span data-ttu-id="92f7c-190">토큰을 성공적으로 읽은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-190"><see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonReaderException"><span data-ttu-id="92f7c-191">잘못된 JSON 토큰이 발견되는 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-191">An invalid JSON token is encountered.</span></span>
            
<span data-ttu-id="92f7c-192">또는</span><span class="sxs-lookup"><span data-stu-id="92f7c-192">-or-</span></span>

<span data-ttu-id="92f7c-193">현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="92f7c-193">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-194">UTF-8 인코딩 JSON 텍스트로 마지막으로 처리된 JSON 토큰의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-194">Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="92f7c-195">마지막으로 처리 된 JSON 토큰의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-195">The type of the last processed JSON token.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-196">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-196">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-197">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Decimal" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-197">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-198">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Decimal" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-198"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-199">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-199">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-200">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-200">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-201">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Double" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-201">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-202">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Double" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-202"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-203">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-203">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-204">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-204">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-205">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int32" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-205">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-206">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Int32" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-206"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-207">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-207">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-208">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-208">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-209">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int64" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-209">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-210">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Int64" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-210"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-211">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-211">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-212">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-212">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-213">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Single" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-213">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-214">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Single" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-214"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-215">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-215">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-216">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-216">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-217">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt32" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-217">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-218">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.UInt32" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-218"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-219">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-219">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="92f7c-220">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-220">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="92f7c-221">원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt64" />에 구문 분석합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-221">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="92f7c-222">전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.UInt64" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-222"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92f7c-223">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-223">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-224">마지막으로 처리된 토큰의 값을 입력 페이로드의 ReadOnlySpan&lt;byte&gt; 조각으로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-224">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="92f7c-225">ReadOnlySequence&lt;byte&gt; 내에서 JSON을 제공하고 토큰 값을 나타내는 조각이 단일 세그먼트에 적합한 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />에는 분할된 값이 포함되므로 범위로 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-225">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="92f7c-226">그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />에는 토큰 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-226">Otherwise, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks


<span data-ttu-id="92f7c-227">하는 경우 <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> 됩니다 `false`, `ValueSequence` 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-227">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`, `ValueSequence` is empty.</span></span> <span data-ttu-id="92f7c-228">따라서 액세스만 `ValueSequence` 하는 경우 <xref:System.Text.Json.Utf8JsonReader.HasValueSequence" /> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-228">Therefore, only access `ValueSequence` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence" /> is `true`.</span></span>
<span data-ttu-id="92f7c-229">토큰 값을에서 액세스 해야 하는 고, 그렇지 <xref:System.Text.Json.Utf8JsonReader.ValueSpan>합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-229">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span></span>

 ]]></format>
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92f7c-230">마지막으로 처리된 토큰의 값을 입력 페이로드의 ReadOnlySpan&lt;byte&gt; 조각으로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-230">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="92f7c-231">ReadOnlySequence&lt;byte&gt; 내에서 JSON을 제공하고 토큰 값을 나타내는 조각이 단일 세그먼트에 적합한 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />에는 분할된 값이 포함되므로 범위로 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-231">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="92f7c-232">그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />에는 토큰 값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-232">Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="92f7c-233">하는 경우 <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> 됩니다 `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-233">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> is empty.</span></span> <span data-ttu-id="92f7c-234">따라서 액세스만 `ValueSpan` 하는 경우 <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-234">Therefore, only access `ValueSpan` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`.</span></span>
<span data-ttu-id="92f7c-235">토큰 값을에서 액세스 해야 하는 고, 그렇지 <xref:System.Text.Json.Utf8JsonReader.ValueSequence>합니다.</span><span class="sxs-lookup"><span data-stu-id="92f7c-235">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
