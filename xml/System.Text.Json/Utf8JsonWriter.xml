<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541647" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4a4af-101">캐시되지 않은 정방향 전용 UTF-8 인코딩 JSON 텍스트를 작성할 수 있는 고성능 API를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a4af-102">`Utf8JsonWriter` 쓰기 캐싱 없음 및 기본적으로 순차적으로 텍스트를 준수 하는 [JSON RFC](https://tools.ietf.org/html/rfc8259)를 제외 하 고 메모를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="4a4af-103">유효성 검사 되 면 잘못 된 JSON에 쓰려고 시도 하는 메서드를 사용 throw를 <xref:System.InvalidOperationException> 상황에 맞는 오류 메시지를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="4a4af-104">이 형식은 ref struct 이므로 직접 없으므로 비동기 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="4a4af-105">그러나 일부 데이터를 작성 하 고 청크에서 쓰기를 계속할 수 재입력에 대 한 지원을 제공지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="4a4af-106">공백 및 들여쓰기를 사용 하 여 출력 형식을 지정 하거나 유효성 검사를 건너뛸 수 일의 인스턴스를 만듭니다 <xref:System.Text.Json.JsonWriterState> 작성기에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="4a4af-107">JSON 텍스트를 작성하기 위한 대상으로 사용된 <see cref="T:System.Buffers.IBufferWriter`1" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="4a4af-108">판독기 상태를 포함하는 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-108">A struct that contains the reader state.</span></span> <span data-ttu-id="4a4af-109">생성자를 첫 번째로 호출하면 기본 상태를 반영해야 합니다. 그렇지 않으면, <see cref="T:System.Text.Json.Utf8JsonWriter" />의 이전 인스턴스로부터 상태를 캡처하고 다시 전달해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="4a4af-110">지정된 <see cref="T:System.Text.Json.Utf8JsonWriter" />를 사용하여 <paramref name="bufferWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a4af-111">이 형식은 ref struct 이므로 스택 전용 형식이, 및 ref 구조체의 모든 제한 사항에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="4a4af-112">이 생성자를 허용 하는 이유는 이유는 <xref:System.Text.Json.JsonWriterState>합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4a4af-113"><paramref name="bufferWriter" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a4af-114"><see cref="T:System.Text.Json.Utf8JsonWriter" />라는 현재 인스턴스의 경우 지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" />에 의해 출력에 커밋된 바이트의 총 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="4a4af-115"><see cref="T:System.Buffers.IBufferWriter`1" />이 얼마나 발전했는지 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="4a4af-116">출력에 커밋된 총 바이트 수를 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 지금 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a4af-117"><see cref="T:System.Text.Json.Utf8JsonWriter" />라는 현재 인스턴스의 경우 지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" />에 의해 작성된 바이트의 총 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="4a4af-118">따라서 이미 커밋된 내용 외에도 작성된 데이터가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="4a4af-119">총 쓴 바이트는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 지금 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a4af-120">현재 토큰의 깊이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="4a4af-121">현재 토큰의 깊이입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a4af-122">`CurrentDepth` 속성 재귀 깊이 중첩 된 개체를 추적 / 지금까지 작성 된 JSON 텍스트 내에서 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="4a4af-123">더 이상 데이터를 작성하지 않음을 나타내려면 <see langword="true" />입니다. 그렇지 않으면, <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4a4af-124">더 이상 수행할 데이터가 없는 경우 지금까지 작성된 JSON이 구조적으로 유효한지 유효성을 검사하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="4a4af-125">지금까지 작성된 내용에 따라 기본 <see cref="T:System.Buffers.IBufferWriter`1" />로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-126">불완전한 JSON을 작성하면 <paramref name="isFinalBlock" />이 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="4a4af-127">예를 들어 열기 개체 또는 배열을 종료하는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-128">호출자에 의해 캡처되고 추가 데이터로 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 생성자에 다시 전달되어야 하는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 상태의 현재 스냅숏을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="4a4af-129"><see cref="T:System.Text.Json.Utf8JsonWriter" /> 상태의 현재 스냅숏입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a4af-130">와 달리 합니다 <xref:System.Text.Json.Utf8JsonWriter>, ref 구조체는, 상태 async/await 경계를 넘어 감당할 수 있습니다 및의 새 인스턴스를 계속 하기 전에 비동기식으로 더 많은 데이터의 읽기를 지원 하기 위해이 형식 필요 하므로 <xref:System.Text.Json.Utf8JsonWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="4a4af-131">새로 만들기에 대 한 상태를 가져오는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 첫 번째 작성 된 데이터 일관성 없는 상태로 인해 커밋하지 않고 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="4a4af-132">호출 <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> 현재 상태를 가져오기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-133">JSON 데이터가 작성되고 버퍼링되었지만 아직 <see cref="T:System.Buffers.IBufferWriter`1" />에 플러시되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-134">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-135">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-136">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-137">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-138">속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-139"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-140">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-141">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-142">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-143">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-144">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-145">속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-146"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-147">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-148">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-149">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-150">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-151">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-152">속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-153"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-154">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-155">JSON 배열의 요소인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-156">JSON 배열의 요소로 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-157">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="4a4af-158">JSON 주석으로 작성될 UTF-8 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-159">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-160">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-161"><c>/*..*/</c> 내에서 JSON 주석으로 UTF-8 텍스트 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-162"><paramref name="utf8Value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-163">UTF-8 트랜스코딩 JSON 주석으로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-164">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-165">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-166"><c>/*..*/</c> 내에서 JSON 주석으로 UTF-16 텍스트 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-167"><paramref name="value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-168">UTF-8 트랜스코딩 JSON 주석으로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-169">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-170">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-171"><c>/*..*/</c> 내에서 JSON 주석으로 문자열 텍스트 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-172"><paramref name="value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-173">JSON 배열의 끝 부분을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-174">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-175">JSON 개체의 끝을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-176">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-177">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-178">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-179">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-180">속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-181"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-182">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-183">UTF-8으로 트랜스코딩되고 작성할 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-184">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-185">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-186">속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-187"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-188">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-189">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-190">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-191">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-192">속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-193"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-194">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-195">JSON 배열의 요소로서 JSON 리터럴 "null"을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-196">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-197">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-198">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-199">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-200">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-201">속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-202">기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-203"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-204">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-205">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-206">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-207">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-208">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-209">속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-210">기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-211"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-212">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-213">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-214">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-215">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-216">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-217">속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-218">기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-219">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-220"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-221">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-222">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-223">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-224">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-225">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-226">속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-227">기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-228">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-229"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-230">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-231">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-232">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-233">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-234">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-235">속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-236">기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-237"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-238">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-239">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-240">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-241">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-242">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-243">속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-244">기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-245">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-246"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-247">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-248">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-249">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-250">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-251">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-252">속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-253">기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-254">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-255"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-256">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-257">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-258">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-259">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-260">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-261">속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-262">기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-263"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-264">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-265">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-266">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-267">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-268">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-269">속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-270">기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-271"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-272">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-273">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-274">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-275">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-276">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-277">속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-278">기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-279">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-280"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-281">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-282">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-283">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-284">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-285">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-286">속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-287">기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-288">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-289"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-290">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-291">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-292">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-293">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-294">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-295">속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-296">기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-297"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-298">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-299">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-300">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-301">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-302">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-303">속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-304">기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-305">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-306"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-307">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-308">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-309">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-310">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-311">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-312">속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-313">기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-314">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-315"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-316">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-317">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-318">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-319">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-320">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-321">속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-322">기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-323"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-324">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-325">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-326">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-327">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-328">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-329">속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-330">기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-331"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-332">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-333">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-334">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-335">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-336">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-337">속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-338">기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-339">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-340"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-341">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-342">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-343">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-344">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-345">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-346">속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-347">기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-348">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-349"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-350">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-351">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-352">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-353">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-354">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-355">속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-356">기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-357"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-358">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-359">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-360">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-361">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-362">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-363">속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-364">기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-365">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-366"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-367">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-368">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-369">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-370">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-371">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-372">속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-373">기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-374">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-375"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-376">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-377">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-378">JSON 배열의 요소로 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-379">기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-380">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-381">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-382">JSON 배열의 요소로 <see cref="T:System.Double" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-383">기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-384">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-385">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-386">JSON 배열의 요소로 <see cref="T:System.Int32" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-387">기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-388">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-389">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-390">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-391">JSON 배열의 요소로 <see cref="T:System.Int64" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-392">기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-393">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-394">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-395">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-396">JSON 배열의 요소로 <see cref="T:System.Single" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-397">기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-398">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-399">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-400">JSON 배열의 요소로 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-401">기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-402">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-403">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-404">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-405">JSON 배열의 요소로 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-406">기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</span><span class="sxs-lookup"><span data-stu-id="4a4af-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a4af-407">예를 들어 32767입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-408">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-409">JSON 배열의 시작 부분을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-410">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-411">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-411">-or-</span></span>

<span data-ttu-id="4a4af-412">잘못된 JSON이 작성되는 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-413">작성될 JSON 배열의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-414">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-415">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-416">속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-417"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-418">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-419">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-419">-or-</span></span>

<span data-ttu-id="4a4af-420">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-421">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-422">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-423">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-424">속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-425"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-426">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-427">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-427">-or-</span></span>

<span data-ttu-id="4a4af-428">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-429">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-430">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-431">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-432">속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-433"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-434">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-435">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-435">-or-</span></span>

<span data-ttu-id="4a4af-436">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a4af-437">JSON 개체의 시작 부분을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-438">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-439">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-439">-or-</span></span>

<span data-ttu-id="4a4af-440">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-441">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-442">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-443">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-444">속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-445"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-446">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-447">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-447">-or-</span></span>

<span data-ttu-id="4a4af-448">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-449">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-450">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-451">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-452">속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-453"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-454">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-455">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-455">-or-</span></span>

<span data-ttu-id="4a4af-456">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-457">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-458">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-459">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-460">속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-461"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-462">JSON의 깊이가 최대 깊이인 1000을 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a4af-463">또는</span><span class="sxs-lookup"><span data-stu-id="4a4af-463">-or-</span></span>

<span data-ttu-id="4a4af-464">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-465">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-466">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-467">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-468">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-469">속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-470">기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-471">예를 들어, 2017-06-12T05:30:45.7680000 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-472"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-473">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-474">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-475">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-476">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-477">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-478">속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-479">기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-480">예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-481"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-482">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-483">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-484">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-485">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-486">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-487">속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-488">씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-489"><paramref name="utf8PropertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-490">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-491">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a4af-492">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-493">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-494">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-495">UTF-8 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-496">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-497">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-498">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-499">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-500">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-501">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-502">UTF-8 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-503">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-504">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a4af-505">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-506">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-507">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-508">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-509">UTF-8 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-510">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-511">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-512">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-513">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-514">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-515">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-516">속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-517">기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-518">예를 들어, 2017-06-12T05:30:45.7680000 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-519"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-520">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-521">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-522">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-523">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-524">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-525">속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-526">기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-527">예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-528"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-529">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-530">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-531">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-532">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-533">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-534">속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-535">씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-536"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-537">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-538">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a4af-539">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-540">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-541">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-542">UTF-16 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-543">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-544">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-545">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-546">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-547">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-548">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-549">UTF-16 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-550">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-551">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-552">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-553">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-554">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-555">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-556">UTF-16 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-557">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-558">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-559">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-560">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-561">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-562">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-563">속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-564">기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-565">예를 들어, 2017-06-12T05:30:45.7680000 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-566"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-567">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-568">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-569">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-570">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-571">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-572">속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-573">기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-574">예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-575"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-576">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-577">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-578">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-579">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-580">선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-581">속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-582">씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-583"><paramref name="propertyName" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-584">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-585">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a4af-586">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-587">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-588">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-589">속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-590">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-591">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-592">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-593">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-594">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-595">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-596">속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-597">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-598">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a4af-599">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a4af-600">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-601">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a4af-602">값은 항상 이스케이프됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a4af-603">속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-604">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-605">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-606">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-607">JSON 배열의 요소로 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-608">기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a4af-609">예를 들어, 2017-06-12T05:30:45.7680000 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-610">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-611">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-612">JSON 배열의 요소로 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-613">기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" />합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="4a4af-614">예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-615">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-616">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a4af-617">JSON 배열의 요소로 <see cref="T:System.Guid" /> 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a4af-618">씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-619">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="4a4af-620">JSON 배열의 JSON 문자열 요소로 작성될 UTF-8 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-621">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-622">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-623">JSON 배열의 요소로 UTF-8 텍스트 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-624"><paramref name="utf8Value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-625">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-626">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-627">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-628">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-629">JSON 배열의 요소로 UTF-16 텍스트 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-630"><paramref name="value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-631">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a4af-632">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a4af-633">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a4af-634">선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a4af-635">JSON 배열의 요소로 문자열 텍스트 값(JSON 문자열)을 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4a4af-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a4af-636"><paramref name="value" />이 너무 큰 경우</span><span class="sxs-lookup"><span data-stu-id="4a4af-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a4af-637">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</span><span class="sxs-lookup"><span data-stu-id="4a4af-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
