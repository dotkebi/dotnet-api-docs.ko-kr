<Type Name="IRequestChannel" FullName="System.ServiceModel.Channels.IRequestChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c0226fa8312d59e215fb0db1fe88bb980ce33ca" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56788107" /></Metadata><TypeSignature Language="C#" Value="public interface IRequestChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRequestChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IRequestChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRequestChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRequestChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IRequestChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ec923-101">메시징 엔드포인트 간 요청-응답 통신의 요청측에 있도록 하기 위해 채널이 구현해야 할 계약을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-101">Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="ec923-102"><xref:System.ServiceModel.Channels.IRequestChannel>은 응답 메시지를 반환하는 <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IRequestChannel%23Request%2A> 메서드의 동기 및 비동기 variant를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-102">The <xref:System.ServiceModel.Channels.IRequestChannel> defines synchronous and asynchronous variants of a <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IRequestChannel%23Request%2A> method that returns a response message.</span></span> <span data-ttu-id="ec923-103">이 채널은 요청 메시지를 수신하는 엔드포인트 주소와 URI를 검색하기 위한 <xref:System.ServiceModel.Channels.IRequestChannel.RemoteAddress%2A> 및 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> 속성도 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-103">It also provides a <xref:System.ServiceModel.Channels.IRequestChannel.RemoteAddress%2A> and <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> properties to retrieve the endpoint address and URI to which the request message is sent.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ec923-104">요청-회신 메시지 교환의 회신측에 요청 메시지를 전송하는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-104">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ec923-105">전송할 요청 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-105">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="callback"><span data-ttu-id="ec923-106">요청 메시지를 전송하는 비동기 작업의 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-106">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</span></span></param>
        <param name="state"><span data-ttu-id="ec923-107">애플리케이션에 의해 지정되는 개체로, 요청 메시지를 전송하는 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-107">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</span></span></param>
        <summary><span data-ttu-id="ec923-108">요청-회신 메시지 교환의 회신측에 요청 메시지를 전송하는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-108">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange.</span></span></summary>
        <returns><span data-ttu-id="ec923-109">비동기 메시지 전송을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-109">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-110">요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-110">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ec923-111">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-111">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ec923-112">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-112">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-113">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-113">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ec923-114">전송할 요청 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-114">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="timeout"><span data-ttu-id="ec923-115">응답을 수신해야 할 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-115">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</span></span></param>
        <param name="callback"><span data-ttu-id="ec923-116">요청 메시지를 전송하는 비동기 작업의 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-116">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</span></span></param>
        <param name="state"><span data-ttu-id="ec923-117">애플리케이션에 의해 지정되는 개체로, 요청 메시지를 전송하는 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-117">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</span></span></param>
        <summary><span data-ttu-id="ec923-118">지정된 시간 간격 이내에 요청-회신 메시지 교환의 응답측에 요청 메시지를 전송하는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-118">Begins an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="ec923-119">비동기 메시지 전송을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-119">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-120">요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-120">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> should be thrown.</span></span> <span data-ttu-id="ec923-121">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-121">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ec923-122">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-122">The default value is 65536 bytes.</span></span>  
  
 <span data-ttu-id="ec923-123">함수를 호출하는 동안 `timeout`이 전달되면 이 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-123">If a `timeout` is passed while calling the function then that value is used.</span></span> <span data-ttu-id="ec923-124">바인딩에서 <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A>이 설정된 경우, 함수를 호출하는 동안 `timeout`이 지정되지 않으면 바인딩의 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-124">If the <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> is set on the binding, then the value on the binding is used if no `timeout` is specified while calling the function.</span></span>  
  
 <span data-ttu-id="ec923-125">바인딩에서 또는 함수 호출 도중에 시간 제한이 지정되지 않으면 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A>이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-125">The <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> is used if no timeout is specified on either the binding or while calling the function.</span></span> <span data-ttu-id="ec923-126">기본값은 1분입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-126">This default value is 1 minute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-127">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-127">The following code shows how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ec923-128">작업을 완료하기 전에 지정된 <see cref="T:System.TimeoutException" />이 초과된 경우 작업에서 <paramref name="timeout" />을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-128">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndRequest (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndRequest : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.EndRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ec923-129"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-129">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="ec923-130">전송된 요청에 대해 메시지 기반 응답을 반환하는 비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-130">Completes an asynchronous operation to return a message-based response to a transmitted request.</span></span></summary>
        <returns><span data-ttu-id="ec923-131">요청에 대한 응답으로 수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-131">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-132">요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-132">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ec923-133">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-133">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ec923-134">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-134">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-135">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-135">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress RemoteAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ RemoteAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec923-136">요청 채널에서 보내는 메시지를 수신하는 원격 주소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-136">Gets the remote address to which the request channel sends messages.</span></span></summary>
        <value><span data-ttu-id="ec923-137">요청 채널에서 보내는 메시지를 수신하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-137">The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-138"><xref:System.ServiceModel.EndpointAddress>가 지정되지 않은 경우 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>가 최종 대상과 물리적 주소 둘 모두로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-138">The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is not specified.</span></span> <span data-ttu-id="ec923-139"><xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>가 지정된 경우 이 속성이 메시지를 보낸 실제 물리적 주소이고 이 주소를 통해 메시지가 대상에 도착해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-139">If the <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-140">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-140">The following code shows how to implement this property.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Request">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ec923-141">메시지 기반 요청을 보내고 상호 관련된 메시지 기반 응답을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-141">Sends a message-based request and returns the correlated message-based response.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ec923-142">전송할 요청 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-142">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <summary><span data-ttu-id="ec923-143">메시지 기반 요청을 보내고 상호 관련된 메시지 기반 응답을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-143">Sends a message-based request and returns the correlated message-based response.</span></span></summary>
        <returns><span data-ttu-id="ec923-144">요청에 대한 응답으로 수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-144">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-145"><xref:System.ServiceModel.Channels.IRequestChannel>을 구현하면 응답 메시지가 요청 메시지와 상호 관련됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-145">Implementations of <xref:System.ServiceModel.Channels.IRequestChannel> ensure that the response message is correlated with the request message.</span></span>  
  
 <span data-ttu-id="ec923-146">일반적으로 <xref:System.ServiceModel.Channels.IRequestChannel>의 구현이 처리 중인 요청과 상호 관련되지 않은 메시지를 수신하면 이 메시지는 손실됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-146">Generally, if an implementation of <xref:System.ServiceModel.Channels.IRequestChannel> receives a message that is not correlated to an outstanding request, it is dropped.</span></span>  
  
 <span data-ttu-id="ec923-147">여러 스레드에서 동시에 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-147">The <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> method can be called concurrently across multiple threads.</span></span>  
  
 <span data-ttu-id="ec923-148">메시지를 요청 채널로 전달하면 메시지가 액세스됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-148">Passing the message into the request channel causes the message to be accessed.</span></span> <span data-ttu-id="ec923-149"><xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>를 호출한 후에는 더 이상 메시지를 검사하거나 메시지에서 <xref:System.ServiceModel.Channels.Message.Close%2A>를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-149">After you call <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.</span></span>  
  
 <span data-ttu-id="ec923-150">요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-150">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ec923-151">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-151">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ec923-152">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-152">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-153">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-153">The following code shows how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message * TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request (message, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ec923-154">전송할 요청 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-154">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</span></span></param>
        <param name="timeout"><span data-ttu-id="ec923-155">응답을 수신해야 할 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-155">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</span></span></param>
        <summary><span data-ttu-id="ec923-156">메시지 기반 요청을 보내고 지정된 시간 간격 내에 상호 관련된 메시지 기반 응답을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-156">Sends a message-based request and returns the correlated message-based response within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="ec923-157">요청에 대한 응답으로 수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-157">The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-158"><xref:System.ServiceModel.Channels.IRequestChannel>을 구현하면 응답 메시지가 요청 메시지와 상호 관련됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-158">Implementations of <xref:System.ServiceModel.Channels.IRequestChannel> ensure that the response message is correlated with the request message.</span></span>  
  
 <span data-ttu-id="ec923-159">일반적으로 <xref:System.ServiceModel.Channels.IRequestChannel>의 구현이 처리 중인 요청과 상호 관련되지 않은 메시지를 수신하면 이 메시지는 손실됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-159">Generally, if an implementation of <xref:System.ServiceModel.Channels.IRequestChannel> receives a message that is not correlated to an outstanding request, it is dropped.</span></span>  
  
 <span data-ttu-id="ec923-160">여러 스레드에서 동시에 <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-160">The <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> method can be called concurrently across multiple threads.</span></span>  
  
 <span data-ttu-id="ec923-161">메시지를 요청 채널로 전달하면 메시지가 액세스됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-161">Passing the message into the request channel causes the message to be accessed.</span></span> <span data-ttu-id="ec923-162"><xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>를 호출한 후에는 더 이상 메시지를 검사하거나 메시지에서 <xref:System.ServiceModel.Channels.Message.Close%2A>를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-162">After you call <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, you can no longer inspect the message or call <xref:System.ServiceModel.Channels.Message.Close%2A> on the message.</span></span>  
  
 <span data-ttu-id="ec923-163">요청 메시지가 사용되는 바인딩에서 허용하는 최대 메시지 크기보다 크면 <xref:System.ServiceModel.QuotaExceededException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-163">If the request message is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="ec923-164">최대 메시지 크기는 <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 속성에서 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-164">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="ec923-165">기본값은 65536 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-165">The default value is 65536 bytes.</span></span>  
  
 <span data-ttu-id="ec923-166">함수를 호출하는 동안 `timeout`이 전달되면 이 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-166">If a `timeout` is passed while calling the function then that value is used.</span></span> <span data-ttu-id="ec923-167">바인딩에서 <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A>이 설정된 경우, 함수를 호출하는 동안 `timeout`이 지정되지 않으면 바인딩의 값이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-167">If the <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> is set on the binding, then the value on the binding is used if no `timeout` is specified while calling the function.</span></span>  
  
 <span data-ttu-id="ec923-168">바인딩에서 또는 함수 호출 도중에 시간 제한이 지정되지 않으면 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A>이 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-168">The <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> is used if no timeout is specified on either the binding or while calling the function.</span></span> <span data-ttu-id="ec923-169">기본값은 1분입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-169">This default value is 1 minute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-170">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-170">The following code shows how to implement this method.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ec923-171">작업을 완료하기 전에 지정된 <see cref="T:System.TimeoutException" />이 초과된 경우 작업에서 <paramref name="timeout" />을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-171">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Via As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Via { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Via : Uri" Usage="System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec923-172">요청을 수신하는 전송 주소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-172">Gets the transport address to which the request is send.</span></span></summary>
        <value><span data-ttu-id="ec923-173">메시지를 보낼 전송 주소를 포함하는 <see cref="T:System.Uri" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-173">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec923-174"><xref:System.ServiceModel.EndpointAddress>가 지정되지 않은 경우 <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>가 최종 대상과 물리적 주소 둘 모두로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-174">The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is not specified.</span></span> <span data-ttu-id="ec923-175"><xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>가 지정된 경우 이 속성이 메시지를 보낸 실제 물리적 주소이고 이 주소를 통해 메시지가 대상에 도착해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-175">If the <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec923-176">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ec923-176">The following code shows how to implement this property.</span></span>  
  
 [!code-csharp[S_UE_HttpCookieSession#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>