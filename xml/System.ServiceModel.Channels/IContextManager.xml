<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="201b988b459f1722c1209014d5473e630e59c8f6" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57914839" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c9492-101">채널에서 컨텍스트를 가져오고 설정할 수 있는 인터페이스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-101">Defines an interface that allows you to get and set the context on the channel.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9492-102">설정된 <xref:System.ServiceModel.WSHttpContextBinding> 값과 함께 <xref:System.ServiceModel.SessionMode.NotAllowed>을 사용하는 채널의 경우에는 <xref:System.ServiceModel.Channels.IContextManager>을 호출하여 채널에 <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> 의미 체계를 적용할 때마다 세션을 설정하는 새 채널이 만들어지기 때문에 클라이언트에서 <xref:System.ServiceModel.SessionMode.NotAllowed>를 사용하여 컨텍스트를 검색할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-102">For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel.</span></span> <span data-ttu-id="c9492-103">따라서 이런 경우에는 클라이언트로 컨텍스트를 제대로 다시 전파해도 <xref:System.ServiceModel.Channels.IContextManager>를 사용하여 컨텍스트를 검색할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-103">This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>.</span></span> <span data-ttu-id="c9492-104">다음 코드와 같이 <xref:System.ServiceModel.Channels.ContextMessageProperty>를 사용하여 컨텍스트를 검색할 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-104">You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.</span></span>  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9492-105">컨텍스트 관리를 사용하도록 설정했는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-105">Gets or sets a value that indicates whether the context management is enabled.</span></span></summary>
        <value><span data-ttu-id="c9492-106">컨텍스트가 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-106"><see langword="true" /> if the context is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9492-107">컨텍스트 관리가 활성화되는 경우 컨텍스트 채널은 수명 중에 컨텍스트를 캐시합니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-107">When context management is enabled the context channel caches the context in its lifetime.</span></span> <span data-ttu-id="c9492-108">`IContextManager` 메서드를 호출하여 <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> 채널 속성을 통해 채널에서 컨텍스트를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-108">Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it.</span></span> <span data-ttu-id="c9492-109">채널 속성에서 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> 메서드를 호출하여 채널을 열기 전에 컨텍스트로 채널을 미리 초기화할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-109">The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property.</span></span> <span data-ttu-id="c9492-110">컨텍스트를 사용하여 초기화된 채널은 다시 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-110">Once the channel is initialized with context it cannot be reset.</span></span>  
  
 <span data-ttu-id="c9492-111">다음은 이 모드의 고정 조건입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-111">The following are invariants in this mode:</span></span>  
  
-   <span data-ttu-id="c9492-112">채널을 연 후 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A>를 호출하면 항상 `InvalidOperationException`이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-112">Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="c9492-113">보내는 메시지에 `ContextMessageProperty`를 통해 컨텍스트를 보내려고 하면 `InvalidOperationException`이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-113">Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="c9492-114">컨텍스트를 사용하여 서버에서 메시지를 받은 경우 채널이 이미 컨텍스트로 초기화되었으면 `ProtocolException`이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-114">If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown.</span></span> <span data-ttu-id="c9492-115">컨텍스트를 명시적으로 설정하지 않은 상태로 채널이 열린 경우 서버에서 초기 컨텍스트를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-115">Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.</span></span>  
  
-   <span data-ttu-id="c9492-116">들어오는 메시지의 `ContextMessageProperty`는 항상 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-116">The `ContextMessageProperty` on an incoming message is always `null`.</span></span>  
  
 <span data-ttu-id="c9492-117">컨텍스트 관리가 활성화되지 않는 경우 컨텍스트 채널은 컨텍스트를 관리하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-117">When context management is not enabled, the context channel does not manage context.</span></span> <span data-ttu-id="c9492-118">`ContextMessageProperty`를 통해 컨텍스트를 검색, 관리 및 적용하는 것은 응용 프로그램의 역할입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-118">It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`.</span></span> <span data-ttu-id="c9492-119"><xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> 채널 속성을 사용하여 <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> 또는 `IContextManager`를 호출하려고 하면 `InvalidOperationException`이 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-119">Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.</span></span>  
  
 <span data-ttu-id="c9492-120">컨텍스트 HTTP 쿠키를 제외한 모든 HTTP 쿠키는 채널 수준에서 처리됩니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-120">All HTTP cookies, except for context HTTP cookies, are handled at the channel level.</span></span> <span data-ttu-id="c9492-121">컨텍스트 HTTP 쿠키는 응용 프로그램 수준에서 관리됩니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-121">Context HTTP cookies are managed at the application level.</span></span> <span data-ttu-id="c9492-122">따라서 <xref:System.ServiceModel.Channels.ContextMessageProperty>의 다른 대상 인스턴스와 통신하기 위해 채널이 공유되면 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-122">This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>.</span></span> <span data-ttu-id="c9492-123">다음 표에서는 <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A>가 `true`나 `false`로 설정된 경우 HTTP 쿠키가 어떻게 영향을 받는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-123">The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.</span></span>  
  
|<span data-ttu-id="c9492-124">바인딩</span><span class="sxs-lookup"><span data-stu-id="c9492-124">Binding</span></span>|<span data-ttu-id="c9492-125">IContextManager.Enabled 값</span><span class="sxs-lookup"><span data-stu-id="c9492-125">IContextManager.Enabled Value</span></span>|<span data-ttu-id="c9492-126">컨텍스트 HTTP 쿠키 범위</span><span class="sxs-lookup"><span data-stu-id="c9492-126">Context HTTP Cookie Scope</span></span>|<span data-ttu-id="c9492-127">기타 HTTP 쿠키 범위</span><span class="sxs-lookup"><span data-stu-id="c9492-127">Other HTTP Cookies Scope</span></span>|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|<span data-ttu-id="c9492-128">BasicHttpBinding</span><span class="sxs-lookup"><span data-stu-id="c9492-128">BasicHttpBinding</span></span>|<span data-ttu-id="c9492-129">N/A</span><span class="sxs-lookup"><span data-stu-id="c9492-129">n/a</span></span>|<span data-ttu-id="c9492-130">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="c9492-130">ChannelFactory</span></span>|<span data-ttu-id="c9492-131">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="c9492-131">ChannelFactory</span></span>|  
|<span data-ttu-id="c9492-132">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="c9492-132">BasicHttpContextBinding</span></span>|<span data-ttu-id="c9492-133">true</span><span class="sxs-lookup"><span data-stu-id="c9492-133">true</span></span>|<span data-ttu-id="c9492-134">채널</span><span class="sxs-lookup"><span data-stu-id="c9492-134">Channel</span></span>|<span data-ttu-id="c9492-135">채널</span><span class="sxs-lookup"><span data-stu-id="c9492-135">Channel</span></span>|  
|<span data-ttu-id="c9492-136">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="c9492-136">BasicHttpContextBinding</span></span>|<span data-ttu-id="c9492-137">False</span><span class="sxs-lookup"><span data-stu-id="c9492-137">false</span></span>|<span data-ttu-id="c9492-138">응용 프로그램에서 명시적으로 관리하는 각 메시지</span><span class="sxs-lookup"><span data-stu-id="c9492-138">For each message (explicitly managed by application)</span></span>|<span data-ttu-id="c9492-139">채널</span><span class="sxs-lookup"><span data-stu-id="c9492-139">Channel</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9492-140">컨텍스트를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-140">Gets the context.</span></span></summary>
        <returns><span data-ttu-id="c9492-141">컨텍스트의 이름과 네임스페이스가 있는 키/값 쌍의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-141">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9492-142">다음 코드에서는 클라이언트의 형식화된 프록시 인스턴스에서 컨텍스트를 가져올 수 있는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-142">The following code shows how the context can be obtained from a typed proxy instance on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="c9492-143">설정된 컨텍스트의 이름과 네임스페이스가 있는 키/값 쌍의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-143">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context that is set.</span></span></param>
        <summary><span data-ttu-id="c9492-144">컨텍스트를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-144">Sets the context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9492-145">다음 코드에서는 클라이언트에서 컨텍스트를 설정할 수 있는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c9492-145">The following code shows how the context can be set on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>