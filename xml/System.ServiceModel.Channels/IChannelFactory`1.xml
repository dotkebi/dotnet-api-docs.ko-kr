<Type Name="IChannelFactory&lt;TChannel&gt;" FullName="System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0665580d9b7ea8ab7b3a800b76708a5b75d1873e" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58550099" /></Metadata><TypeSignature Language="C#" Value="public interface IChannelFactory&lt;TChannel&gt; : System.ServiceModel.Channels.IChannelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelFactory`1&lt;TChannel&gt; implements class System.ServiceModel.Channels.IChannelFactory, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelFactory(Of TChannel)&#xA;Implements IChannelFactory" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TChannel&gt;&#xA;public interface class IChannelFactory : System::ServiceModel::Channels::IChannelFactory" />
  <TypeSignature Language="F#" Value="type IChannelFactory&lt;'Channel&gt; = interface&#xA;    interface IChannelFactory&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TChannel" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannelFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TChannel"><span data-ttu-id="1fb38-101">채널 팩터리에서 생성하는 채널 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-101">The type of channel that the channel factory creates.</span></span></typeparam>
    <summary><span data-ttu-id="1fb38-102">형식별 채널을 만드는 채널 팩터리에서 구현해야 하는 인터페이스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-102">Defines the interface that must be implemented by channel factories that create type-specific channels.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb38-103"><xref:System.ServiceModel.Channels.IChannelFactory%601> 계약을 구현하면 매번 채널 형식을 지정할 필요 없이 특정 형식의 여러 채널을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-103">Implementing the <xref:System.ServiceModel.Channels.IChannelFactory%601> contract allows users to create multiple channels of a given type without having to specify the channel type each time.</span></span> <span data-ttu-id="1fb38-104">즉, 채널 형식을 <xref:System.ServiceModel.Channels.IChannelFactory%601> 인터페이스를 구현하는 채널 팩터리에 대한 제네릭 매개 변수로 정의하면 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> 메서드로 형식을 전달할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-104">In other words, defining the channel type as a generic parameter for the channel factory implementing the <xref:System.ServiceModel.Channels.IChannelFactory%601> interface means that it is not necessary to pass the type into the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> methods.</span></span> <span data-ttu-id="1fb38-105">사용자가 다양한 채널 형식을 만들려는 경우 필요한 각 채널 형식에 대한 추가 채널 팩터리를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-105">If users want to create different channel types, they can create additional channel factories for each type of channel required.</span></span> <span data-ttu-id="1fb38-106"><xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 오버로드를 사용하면 최종 대상에서 메시지가 처음 전송된 주소를 구별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-106">The <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload allows you to distinguish the address to which the message is initially sent from the ultimate destination.</span></span> <span data-ttu-id="1fb38-107">주소 지정을 참조 합니다 [주소](~/docs/framework/wcf/feature-details/endpoint-addresses.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-107">For a discussion of addressing, see the [Addresses](~/docs/framework/wcf/feature-details/endpoint-addresses.md) topic.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1fb38-108">지정된 엔드포인트 주소에 대해 지정된 형식의 채널을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-108">Creates a channel of a specified type to a specified endpoint address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb38-109">라우팅을 수동으로 수행하려는 경우 최종 대상으로부터 메시지를 처음 전송한 주소를 구별하려면 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 오버로드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-109">Use the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload to distinguish the address to which the message is initially sent from the ultimate destination when you want to do manual routing.</span></span> <span data-ttu-id="1fb38-110">이 채널 팩터리에서 만든 모든 채널은 채널 팩터리가 닫히면 함께 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-110">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span> <span data-ttu-id="1fb38-111">주소 지정을 참조 합니다 [주소](~/docs/framework/wcf/feature-details/endpoint-addresses.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-111">For a discussion of addressing, see the [Addresses](~/docs/framework/wcf/feature-details/endpoint-addresses.md) topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress -&gt; 'Channel" Usage="iChannelFactory.CreateChannel to" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="to"><span data-ttu-id="1fb38-112">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-112">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</span></span></param>
        <summary><span data-ttu-id="1fb38-113">지정된 엔드포인트 주소에 대해 지정된 형식의 채널을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-113">Creates a channel of a specified type to a specified endpoint address.</span></span></summary>
        <returns><span data-ttu-id="1fb38-114">지정된 엔드포인트 주소에 대한 <paramref name="TChannel" /> 형식의 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-114">A channel of type <paramref name="TChannel" /> to the specified endpoint address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb38-115">라우팅을 수동으로 수행하려는 경우 최종 대상으로부터 메시지를 처음 전송한 주소를 구별하려면 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> 오버로드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-115">Use the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload to distinguish the address to which the message is initially sent from the ultimate destination when you want to do manual routing.</span></span> <span data-ttu-id="1fb38-116">이 채널 팩터리에서 만든 모든 채널은 채널 팩터리가 닫히면 함께 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-116">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to, Uri via);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to, class System.Uri via) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress, via As Uri) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to, Uri ^ via);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress * Uri -&gt; 'Channel" Usage="iChannelFactory.CreateChannel (to, via)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="via" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="to"><span data-ttu-id="1fb38-117">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-117">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</span></span></param>
        <param name="via"><span data-ttu-id="1fb38-118">메시지를 보낼 전송 주소를 포함하는 <see cref="T:System.Uri" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-118">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</span></span></param>
        <summary><span data-ttu-id="1fb38-119">메시지가 전송되는 전송 주소 및 지정된 엔드포인트 주소에 대해 지정된 형식의 채널을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-119">Creates a channel of a specified type to a specified endpoint address and transport address to which messages are sent.</span></span></summary>
        <returns><span data-ttu-id="1fb38-120">지정된 엔드포인트 주소 및 전송 주소에 대한 <paramref name="TChannel" /> 형식의 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-120">A channel of type <paramref name="TChannel" /> to the specified endpoint address and transport address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb38-121">`via`로 지정된 전송 주소는 `to`로 지정된 다른 원격 주소(서비스가 위치한 주소)로 가기 위해 메시지가 처음 전송되어야 하는 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-121">The transport address specified by the `via` is the location to which a message should initially be sent on its way to some other remote address specified by the `to` at which the service is located.</span></span> <span data-ttu-id="1fb38-122">대부분의 인터넷 시나리오에서 `via` URI는 서비스의 최종 <xref:System.ServiceModel.EndpointAddress.Uri%2A> 주소의 `to`와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-122">In most Internet scenarios, the `via` URI is the same as the <xref:System.ServiceModel.EndpointAddress.Uri%2A> of the final `to` address of the service.</span></span> <span data-ttu-id="1fb38-123">수동 라우팅을 수행하려는 경우에만 이 두 주소를 구별합니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-123">You only distinguish between these two addresses when you want to do some kind of manual routing.</span></span> <span data-ttu-id="1fb38-124">이 채널 팩터리에서 만든 모든 채널은 채널 팩터리가 닫히면 함께 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-124">Note that any channels created by this channel factory are closed when the channel factory is closed.</span></span> <span data-ttu-id="1fb38-125">주소 지정을 참조 합니다 [주소](~/docs/framework/wcf/feature-details/endpoint-addresses.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1fb38-125">For a discussion of addressing, see the [Addresses](~/docs/framework/wcf/feature-details/endpoint-addresses.md) topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>