<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6df1443c8d9a66bd254eeca1f04d6404228dcf12" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56762536" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c0d1f-101">메시지를 수신하기 위해 채널이 구현해야 하는 인터페이스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="c0d1f-102"><xref:System.ServiceModel.Channels.IInputChannel> 계약에는 메시지 수신, 수신 시도 및 수신 대기 기능의 동기 및 비동기 variant가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="c0d1f-103"><xref:System.ServiceModel.Channels.IInputChannel>과 함께 끌어오기 모델을 사용하여 메시지를 수신합니다. <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 호출하여 채널로부터 메시지를 "끌어온" 후 메시지가 도착할 때까지 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="c0d1f-104">대체 사용 패턴은 <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 또는 <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>를 호출한 후 <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>를 호출하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="c0d1f-105">이 방법은 <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> 및 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 호출 사이에 트랜잭션을 시작하는 트랜잭션에 일반적으로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c0d1f-106"><xref:System.ServiceModel.Channels.IInputChannel>이 반드시 단일 발신자에 바인딩될 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="c0d1f-107">다른 채널과 채널 인터페이스도 특정 발신자와 <xref:System.ServiceModel.Channels.IInputChannel> 간의 상관 관계를 제공할 수 있지만 기본 계약에는 이와 같은 제한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="c0d1f-108">각 메시지에 새 <xref:System.ServiceModel.Channels.IInputChannel>을 만들거나 여러 메시지와 발신자에 대해 동일한 <xref:System.ServiceModel.Channels.IInputChannel>을 다시 사용할 수 있도록 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0d1f-109">비동기 수신 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-110">요청 수신을 대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c0d1f-111">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c0d1f-112">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="c0d1f-113">비동기 작업 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c0d1f-114">애플리케이션에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c0d1f-115">연결된 상태 개체가 있는 메시지를 수신하기 위해 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-116">비동기 메시지 수신을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-117">요청 수신을 대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c0d1f-118">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c0d1f-119">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c0d1f-120">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c0d1f-121">채널에서 메시지를 사용할 수 있을 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-122">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-123">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c0d1f-124">비동기 작업 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c0d1f-125">애플리케이션에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c0d1f-126">지정된 시간 제한이 있는 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-127">비동기 수신 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-128">요청 수신을 대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c0d1f-129">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c0d1f-130">동기 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c0d1f-131">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-132">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-133">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-134">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c0d1f-135">작업을 완료하기 전에 지정된 <see cref="T:System.TimeoutException" />이 초과되면 작업에서 <paramref name="timeout" />이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-136">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c0d1f-137">비동기 작업 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c0d1f-138">애플리케이션에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c0d1f-139">지정된 시간 제한이 있는 메시지와 그에 연결된 상태 개체를 수신하기 위해 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-140">비동기 수신 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-141">대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="c0d1f-142">요청 메시지에 응답하는 동안 또는 시간 제한 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="c0d1f-143">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="c0d1f-144"><xref:System.TimeoutException>을 다시 throw하거나 래핑하지 않고 시간 제한을 처리하려면 <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 대신 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="c0d1f-145">시간 제한을 특별히 처리하지 않으려면 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>만 호출합니다. 그렇지 않으면 오류 정보가 손실됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-146">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-147">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-148">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c0d1f-149">지정된 <see langword="false" />이 초과된 경우 <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-150">메시지를 사용할 수 있을 때까지 대기하는 시간 간격을 지정하는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c0d1f-151">비동기 작업 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c0d1f-152">애플리케이션에서 지정하는 개체로, 비동기 작업과 연결된 상태 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c0d1f-153">지정된 시간 제한 및 연결된 상태 개체가 있는 비동기 메시지 도착 대기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-154">요청 메시지의 도착을 대기하기 위해 비동기 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-155">메시지가 도착할 때까지 대기하지 않고 애플리케이션 처리를 계속해야 하는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="c0d1f-156">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단할 수 있는 경우 동기 <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c0d1f-157">지정된 `timeout`까지 스레드가 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="c0d1f-158">이 메서드는 콜백을 통해 해당 작업의 이벤트 처리기 ID에 대한 알림을 수신합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c0d1f-159">채널에서 메시지를 사용할 수 있거나 시간 초과가 발생할 때까지 작업이 완료되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-160">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-161">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-162">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c0d1f-163">지정된 <see langword="false" />이 초과되었고 시간 제한 예외가 아닌 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c0d1f-164"><see cref="T:System.IAsyncResult" /> 메서드 중 하나를 호출하면 반환되는 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="c0d1f-165">메시지를 수신하는 비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-166">수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c0d1f-167">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c0d1f-168"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="c0d1f-169">수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c0d1f-170">메시지를 수신하는 지정된 비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-171">지정된 시간 간격이 경과되기 전에 메시지를 수신하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c0d1f-172">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c0d1f-173">완료한 후 최종 결과를 검색할 <see cref="T:System.IAsyncResult" /> 작업을 식별하는 <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="c0d1f-174">지정된 비동기 메시지 대기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-175"><paramref name="timeout" />이 초과되기 전에 메시지가 도착했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c0d1f-176">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d1f-177">입력 채널이 메시지를 수신하는 주소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="c0d1f-178">입력 채널이 메시지를 수신하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-179">이 입력 채널에 독립형 주소가 없으면(예: 클라이언트에서 시작된 TCP 채널의 입력측인 경우) 이 속성은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="c0d1f-180">이 속성은 상관 관계를 위해 상위 수준 채널에서 사용될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="c0d1f-181">예를 들어 상위 수준 채널이 <xref:System.ServiceModel.Channels.IDuplexChannel>의 맨 위에서 요청-회신을 구현하면 WS-Addressing ReplyTo 헤더에서 <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-182">다음 코드에서는 이 속성을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="c0d1f-183">작업이 시간 제한 간격으로 완료되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="c0d1f-184">입력 채널이 실패한 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="c0d1f-185">입력 채널이 중단된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="c0d1f-186">입력 채널에 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="c0d1f-187">명시적 또는 암시적으로 정의된 시간 간격에 메시지가 사용 가능한 경우 입력 채널이 수신한 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-188">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c0d1f-189">요청 수신을 대기하지 않고 애플리케이션 처리를 계속해야 하는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c0d1f-190">동기 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c0d1f-191">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d1f-192">메시지가 사용 가능한 경우 수신된 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="c0d1f-193">메시지를 사용할 수 없는 경우 기본 시간 간격 동안 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-194">수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-195">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c0d1f-196">요청 수신을 대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c0d1f-197">동기 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c0d1f-198">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c0d1f-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 여러 번 또는 동시에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c0d1f-200">수신된 각 메시지에 대해 하나의 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 호출만 완료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-201">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-202">시간 제한이 초과되어 <see cref="T:System.TimeSpan" />이 throw되기 전에 수신 작업이 완료되어야 하는 기간을 지정하는 <see cref="T:System.TimeoutException" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="c0d1f-203">메시지가 사용 가능한 경우 수신된 메시지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="c0d1f-204">메시지를 사용할 수 없는 경우 지정된 시간 간격 동안 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-205">수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-206">요청 메시지를 수신하거나 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>에 의해 지정된 시간 간격을 초과할 때까지 현재 스레드를 차단할 수 있는 경우 동기 `timeout` 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c0d1f-207">요청 수신을 대기하지 않고 애플리케이션 처리를 계속하려는 경우 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c0d1f-208">동기 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 작업은 명시적 시간 제한과 상관없이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c0d1f-209">메시지를 사용할 수 없으면 사용할 수 있을 때까지 또는 시간 제한을 초과할 때까지 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c0d1f-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 여러 번 또는 동시에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c0d1f-211">수신된 각 메시지에 대해 하나의 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 호출만 완료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-212">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-213">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-214">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-215"><see cref="T:System.IAsyncResult" /> 메서드 중 하나를 호출하면 반환되는 <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="c0d1f-216">수신된 <see cref="T:System.ServiceModel.Channels.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c0d1f-217">지정된 시간 간격 내에 메시지를 수신하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-218"><paramref name="timeout" />이 초과되기 전에 메시지를 수신하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-219"><xref:System.TimeoutException>을 다시 throw하거나 래핑하지 않고 시간 제한을 처리하려면 <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> 대신 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c0d1f-220">시간 제한을 특별히 처리하지 않으려면 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>만 호출합니다. 그렇지 않으면 오류 정보가 손실됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-221">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-222">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-223">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c0d1f-224"><see cref="T:System.TimeSpan" />은 시간 제한 전에 메시지 도착을 대기하는 최대 시간 간격을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="c0d1f-225">지정된 시간 간격 내에 메시지가 도착했는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c0d1f-226"><paramref name="timeout" />이 초과되기 전에 메시지가 도착했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d1f-227"><xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>를 호출하면 다른 어떤 방법으로든 요청 메시지가 수신되거나 처리되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="c0d1f-228"><xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> 메서드는 주로 사용자가 트랜잭션을 사용하여 메시지를 수신하려는 트랜잭션 처리 시나리오에서 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="c0d1f-229">이 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 메서드를 일반적으로 사용하면, 사용자는 트랜잭션을 만들고 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 호출한 후 트랜잭션 시간 제한 전에 메시지가 도착하기를 기대해야 하는데 이것이 항상 가능하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="c0d1f-230">대신 사용자는 원하는 시간 제한(무한도 가능)을 사용하여 <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>를 호출할 수 있습니다. 그러면 메시지가 도착할 때 트랜잭션을 열고 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>를 호출한 후 트랜잭션이 만료되기 전에 메시지를 확실히 돌려받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="c0d1f-231">이 메서드는 동기적이므로 메시지를 사용할 수 있거나 시간 제한이 발생할 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="c0d1f-232">큐에 메시지가 도착할 때까지 대기하는 동안 현재 스레드를 차단하는 것이 허용되는 경우에만 <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c0d1f-233">지정된 `timeout`까지 스레드가 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="c0d1f-234">대기하지 않고 애플리케이션 처리를 계속하려면 비동기 <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c0d1f-235">다음 코드에서는 이 메서드를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c0d1f-236">작업을 완료하기 전에 지정된 <paramref name="timeout" />이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c0d1f-237">지정된 시간 제한이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="c0d1f-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c0d1f-238">지정된 <see langword="false" />이 초과되었고 시간 제한 예외가 아닌 경우 작업에서 <paramref name="timeout" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="c0d1f-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>