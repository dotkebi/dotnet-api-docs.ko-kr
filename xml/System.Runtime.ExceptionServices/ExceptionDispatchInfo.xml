<Type Name="ExceptionDispatchInfo" FullName="System.Runtime.ExceptionServices.ExceptionDispatchInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7fb1d328fb63a3f7f164e074f1a4454947464c52" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58710950" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExceptionDispatchInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExceptionDispatchInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExceptionDispatchInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionDispatchInfo sealed" />
  <TypeSignature Language="F#" Value="type ExceptionDispatchInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1940a-101">상태가 코드의 특정 지점에 캡처되는 예외를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-101">Represents an exception whose state is captured at a certain point in code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1940a-102"><xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> 개체는 스택 추적 정보 및 예외 캡처는 지점에 포함 된 Watson 정보를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-102">The <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> object stores the stack trace information and Watson information that the exception contains at the point where it is captured.</span></span> <span data-ttu-id="1940a-103">예외가 throw 될 수 있습니다 다른 시간에 및 다른 스레드에서 호출 하 여는 <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1940a-103">The exception can be thrown at another time and possibly on another thread by calling the <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1940a-104">지점에 캡처된 위치 지점에서 이동 해야 하는 경우 예외가 throw 됩니다 여기서는 <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-104">The exception is thrown as if it had flowed from the point where it was captured to the point where the <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A> method is called.</span></span>  
  
 <span data-ttu-id="1940a-105"><xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> serialize 할 수 없습니다 하며 응용 프로그램 도메인 경계를 교차 하는 적합 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-105"><xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> cannot be serialized and is not intended to cross application domain boundaries.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture (Exception source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(class System.Exception source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture (source As Exception) As ExceptionDispatchInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::ExceptionServices::ExceptionDispatchInfo ^ Capture(Exception ^ source);" />
      <MemberSignature Language="F#" Value="static member Capture : Exception -&gt; System.Runtime.ExceptionServices.ExceptionDispatchInfo" Usage="System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ExceptionServices.ExceptionDispatchInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="1940a-106">상태가 캡처되고 반환된 개체로 표시되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-106">The exception whose state is captured, and which is represented by the returned object.</span></span></param>
        <summary><span data-ttu-id="1940a-107">코드의 현재 지점에서 지정된 예외를 나타내는 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-107">Creates an <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object that represents the specified exception at the current point in code.</span></span></summary>
        <returns><span data-ttu-id="1940a-108">코드의 현재 지점에서 지정된 예외를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-108">An object that represents the specified exception at the current point in code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1940a-109">사용할 수는 <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> 반환 된 개체를이 메서드에 의해 다른 시간에 및 지정된 된 예외가 다시 throw 할 다른 스레드에서 것 처럼 예외 다시 throw 되는 시점에 캡처된 여기서이 지점에서 이동 했습니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-109">You can use the <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo> object that is returned by this method at another time and possibly on another thread to rethrow the specified exception, as if the exception had flowed from this point where it was captured to the point where it is rethrown.</span></span>  
  
 <span data-ttu-id="1940a-110">예외가 캡처될 때 활성, 현재 스택 추적 정보 및에 포함 된 Watson 정보 예외 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-110">If the exception is active when it is captured, the current stack trace information and Watson information that is contained in the exception is stored.</span></span>  <span data-ttu-id="1940a-111">활성 상태인 경우 즉,이 throw 되지 했으면, 됩니다 없기 모든 스택 추적 정보 또는 Watson 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-111">If it is inactive, that is, if it has not been thrown, it will not have any stack trace information or Watson information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1940a-112"><paramref name="source" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-112"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SourceException">
      <MemberSignature Language="C#" Value="public Exception SourceException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception SourceException" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ SourceException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceException : Exception" Usage="System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1940a-113">현재 인스턴스로 표시되는 예외를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-113">Gets the exception that is represented by the current instance.</span></span></summary>
        <value><span data-ttu-id="1940a-114">현재 인스턴스로 표시되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-114">The exception that is represented by the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1940a-115">이 속성은 사용 작업 병렬 라이브러리, 예를 들어 여러 예외를 결합 하는 <xref:System.AggregateException> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-115">This property is used by the Task Parallel Library, for example, to combine multiple exceptions in an <xref:System.AggregateException> object.</span></span> <span data-ttu-id="1940a-116">응용 프로그램 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-116">It is not intended to be used by application code.</span></span> <span data-ttu-id="1940a-117">사용 된 <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A> 캡처된 예외 상태를 복원 하 고 throw 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="1940a-117">Use the <xref:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw%2A> method to restore the state of the captured exception and throw it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public void Throw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Throw() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Sub Throw ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Throw();" />
      <MemberSignature Language="F#" Value="member this.Throw : unit -&gt; unit" Usage="exceptionDispatchInfo.Throw " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1940a-118">예외가 캡처될 때 저장된 상태로 복원한 후 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 개체로 표현되는 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-118">Throws the exception that is represented by the current <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object, after restoring the state that was saved when the exception was captured.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1940a-119">예외를 복원할 때 복원 지점을 나타낼에 스택 추적에서 다음 문자열 삽입 됩니다. "예외 throw 된 위치를 이전 위치에서 스택 추적의 끝"입니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-119">When the exception is restored, the following string is inserted in the stack trace to indicate the restore point: "End of stack trace from the previous location where the exception was thrown".</span></span> <span data-ttu-id="1940a-120">이 내부 예외 또는 마샬링된 예외 스택 추적에 표시 된 방식과 유사 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="1940a-120">This is similar to the way inner exceptions or marshaled exceptions are indicated in stack traces.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static void Throw (Exception source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Throw(class System.Exception source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Throw (source As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Throw(Exception ^ source);" />
      <MemberSignature Language="F#" Value="static member Throw : Exception -&gt; unit" Usage="System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Exception" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>