<Namespace Name="System.Transactions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27e12b25390a72364c77196a34eae502971d0d2b" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59353280" /></Metadata><Docs>
    <summary><span data-ttu-id="4aeab-101"><see cref="N:System.Transactions" /> 네임스페이스에는 트랜잭션 응용 프로그램과 리소스 관리자를 작성하는 데 사용할 수 있는 클래스가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-101">The <see cref="N:System.Transactions" /> namespace contains classes that allow you to write your own transactional application and resource manager.</span></span> <span data-ttu-id="4aeab-102">특히 참가자가 하나 이상인 트랜잭션(로컬 또는 분산)을 만들고 참가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-102">Specifically, you can create and participate in a transaction (local or distributed) with one or multiple participants.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="4aeab-103">`System.Transactions` 인프라는 트랜잭션 프로그래밍 간단 하 고 효율적인 플랫폼 전체 SQL Server, ADO.NET, MSMQ, 및는 MSDTC Microsoft Distributed Transaction Coordinator ()에서 시작 된 트랜잭션을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-103">The `System.Transactions` infrastructure makes transactional programming simple and efficient throughout the platform by supporting transactions initiated in SQL Server, ADO.NET, MSMQ, and the Microsoft Distributed Transaction Coordinator (MSDTC).</span></span> <span data-ttu-id="4aeab-104">모두 명시적 프로그래밍 모델을 기반으로 제공 합니다 <xref:System.Transactions.Transaction> 사용 하는 암시적 프로그래밍 모델 뿐만 아니라 클래스는 <xref:System.Transactions.TransactionScope> 트랜잭션을 관리 하는 자동으로 인프라에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-104">It provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure.</span></span> <span data-ttu-id="4aeab-105">개발에 대 한 암시적 쉽게 모델을 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-105">It is highly recommended that you use the easier implicit model for development.</span></span> <span data-ttu-id="4aeab-106">시작 하려면 참조는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-106">To get started, see the [Implementing An Implicit Transaction Using Transaction Scope](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)) topic.</span></span> <span data-ttu-id="4aeab-107">트랜잭션 응용 프로그램 작성에 대 한 자세한 내용은 참조 하세요. [쓰기는 트랜잭션 응용 프로그램](~/docs/framework/data/transactions/writing-a-transactional-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-107">For more information on writing a transactional application, see [Writing A Transactional Application](~/docs/framework/data/transactions/writing-a-transactional-application.md).</span></span>
  
 <span data-ttu-id="4aeab-108">`System.Transactions` 또한 리소스 관리자를 구현 하기 위한 형식을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-108">`System.Transactions` also provides types for you to implement a resource manager.</span></span> <span data-ttu-id="4aeab-109">기본 트랜잭션 관리자는 `System.Transactions` 인프라를 사용 하면 일시적인 리소스나 하나의 지속적인 리소스 커밋 또는 롤백 효율적으로 인 리스트 먼 트를 합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-109">The transaction manager native to the `System.Transactions` infrastructure allows volatile resources or a single durable resource enlistment to commit or roll back efficiently.</span></span> <span data-ttu-id="4aeab-110">리소스 관리자 구현에 대 한 자세한 내용은 참조 하세요. [는 리소스 관리자 구현](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-110">For more information on implementing a resource manager, see [Implementing A Resource Manager](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e).</span></span>  
  
 <span data-ttu-id="4aeab-111">트랜잭션 관리자는 추가 지속적인 리소스 관리자를 트랜잭션과 트랜잭션에 참여 하는 경우 DTC와 같은 디스크 기반 트랜잭션 관리자를 통해 조정 하 여 로컬 트랜잭션이 분산된 트랜잭션으로 투명 하 게도 에스컬레이션 합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-111">The transaction manager also transparently escalates local transactions to distributed transactions by coordinating through a disk-based transaction manager like the DTC, when an additional durable resource manager enlists itself with a transaction.</span></span> <span data-ttu-id="4aeab-112">`System.Transactions` 인프라에서 성능을 향상시키는 두 가지 주요 방법은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-112">There are two key ways that the `System.Transactions` infrastructure provides enhanced performance.</span></span>  
  
-   <span data-ttu-id="4aeab-113">즉 동적 에스컬레이션 된 `System.Transactions` 인프라에서 msdtc만 트랜잭션이 실제로 필요할 때.</span><span class="sxs-lookup"><span data-stu-id="4aeab-113">Dynamic Escalation, which means that the `System.Transactions` infrastructure only engages the MSDTC when it is actually required for a transaction.</span></span> <span data-ttu-id="4aeab-114">이 영역에서 자세히 설명 합니다 [트랜잭션 관리 에스컬레이션](https://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-114">This area is covered in depth in the [Transaction Management Escalation](https://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7) topic.</span></span>  
  
-   <span data-ttu-id="4aeab-115">데이터베이스 등의 리소스가 트랜잭션에 참가한 유일한 엔터티인 경우 트랜잭션을 소유할 수 있게 해 주는 승격 가능한 인리스트먼트입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-115">Promotable Enlistments, which allows a resource, such as a database, to take ownership of the transaction if it is the only entity participating in the transaction.</span></span> <span data-ttu-id="4aeab-116">나중에 필요한 경우는 `System.Transactions` 인프라 트랜잭션 MSDTC로의 관리를 에스컬레이션할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-116">Later, if needed, the `System.Transactions` infrastructure can still escalate the management of the transaction to MSDTC.</span></span> <span data-ttu-id="4aeab-117">이 방법을 사용하면 MSDTC를 사용할 가능성이 더 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-117">This further reduces the chance of using the MSDTC.</span></span> <span data-ttu-id="4aeab-118">이 영역에서 자세히 설명 합니다 [최적화를 사용 하 여 단일 단계 커밋 및 승격 가능한 단일 단계 알림을](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85)) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-118">This area is covered in depth in the [Optimization Using Single Phase Commit and Promotable Single Phase Notification](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85)) topic.</span></span>  
  
 <span data-ttu-id="4aeab-119">`System.Transactions` 노출 하는 리소스의 형식에 대 한 액세스를 제한 하는 세 가지 신뢰 수준을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-119">`System.Transactions` defines three levels of trust that restrict access on the types of resources it exposes.</span></span> <span data-ttu-id="4aeab-120">특히 합니다 *System.Transactions* 으로 표시 된 대로 어셈블리를 부분적으로 신뢰할 수 있는 코드에서 호출할 수 있습니다는 `AllowPartiallyTrustedCallers` 특성 (APTCA).</span><span class="sxs-lookup"><span data-stu-id="4aeab-120">Specifically, the *System.Transactions* assembly can be called by partially trusted code as it has been marked with the `AllowPartiallyTrustedCallers` attribute (APTCA).</span></span> <span data-ttu-id="4aeab-121">이 특성은 각 형식의 공개적으로 액세스 가능한 각 메서드에 자동으로 배치될 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 권한 집합에 대한 암시적 `FullTrust`를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-121">This attribute essentially removes the implicit <xref:System.Security.Permissions.SecurityAction.LinkDemand> for the `FullTrust` permission set that is otherwise automatically placed on each publicly accessible method in each type.</span></span> <span data-ttu-id="4aeab-122">그러나 일부 형식과 멤버에는 더 강력한 권한이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-122">However, some types and members still require stronger permissions.</span></span>  
  
 <span data-ttu-id="4aeab-123">다음은 형식의 목록 및 부분적으로에서 호출할 수 없는 멤버는 신뢰할 수 있는 코드 다음 선언적 보안 특성으로 데코레이팅되기 때문에:</span><span class="sxs-lookup"><span data-stu-id="4aeab-123">The following is a list of types and members that are not callable by partially trusted code because they are decorated with the following declarative security attribute:</span></span>  
  
 `PermissionSetAttribute(SecurityAction.LinkDemand, Name := "FullTrust")`  
  
 <span data-ttu-id="4aeab-124">System.Transactions.Transaction.EnlistDurable</span><span class="sxs-lookup"><span data-stu-id="4aeab-124">System.Transactions.Transaction.EnlistDurable</span></span>  
  
 <span data-ttu-id="4aeab-125">System.Transactions.Transaction.EnlistPromotableSinglePhase</span><span class="sxs-lookup"><span data-stu-id="4aeab-125">System.Transactions.Transaction.EnlistPromotableSinglePhase</span></span>  
  
 <span data-ttu-id="4aeab-126">System.Transactions.TransactionInterop</span><span class="sxs-lookup"><span data-stu-id="4aeab-126">System.Transactions.TransactionInterop</span></span>  
  
 <span data-ttu-id="4aeab-127">System.Transactions.TransactionManager.DistributedTransactionStarted</span><span class="sxs-lookup"><span data-stu-id="4aeab-127">System.Transactions.TransactionManager.DistributedTransactionStarted</span></span>  
  
 <span data-ttu-id="4aeab-128">System.Transactions.TransactionManager.HostCurrentTransactionCallback</span><span class="sxs-lookup"><span data-stu-id="4aeab-128">System.Transactions.TransactionManager.HostCurrentTransactionCallback</span></span>  
  
 <span data-ttu-id="4aeab-129">System.Transactions.TransactionManager.Reenlist</span><span class="sxs-lookup"><span data-stu-id="4aeab-129">System.Transactions.TransactionManager.Reenlist</span></span>  
  
 <span data-ttu-id="4aeab-130">System.Transactions.TransactionManager.RecoveryComplete</span><span class="sxs-lookup"><span data-stu-id="4aeab-130">System.Transactions.TransactionManager.RecoveryComplete</span></span>  
  
 <span data-ttu-id="4aeab-131">System.Transactions.TransactionScope.TransactionScope (System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)</span><span class="sxs-lookup"><span data-stu-id="4aeab-131">System.Transactions.TransactionScope.TransactionScope (System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)</span></span>  
  
 <span data-ttu-id="4aeab-132">M:System.Transactions.TransactionScope.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)</span><span class="sxs-lookup"><span data-stu-id="4aeab-132">M:System.Transactions.TransactionScope.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)</span></span>  
  
 <span data-ttu-id="4aeab-133">다양 한에 대 한 자세한 내용은 신뢰 수준, 참조 [리소스 액세스의 보안 신뢰 수준](https://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51)합니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-133">For more information on the various trust levels, see [Security Trust Levels in Accessing Resources](https://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51).</span></span>  
  
 <span data-ttu-id="4aeab-134">핵심 개발 기술 \ 데이터 액세스 \ 트랜잭션 처리 \\</span><span class="sxs-lookup"><span data-stu-id="4aeab-134">Core Development Technologies\Data Access\Transaction Processing\\</span></span>  
  
 <span data-ttu-id="4aeab-135">사용 하는 방법에 대 한 자세한 내용은 합니다 `System.Transactions` 네임 스페이스 개념 설명서를 참조할 수 있습니다 [트랜잭션 처리](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85))"핵심 개발 기술 \ 데이터 액세스 처리아래에있는\\"문서의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-135">For more information on how to use the `System.Transactions` namespace, you can consult the conceptual documentation [Transaction Processing](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85)), located under the "Core Development Technologies\Data Access\Transaction Processing\\" section in the documentation.</span></span> <span data-ttu-id="4aeab-136">특히, 다음 항목에서 자세한 정보를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4aeab-136">Specifically, you can find more information in the following topics.</span></span>  
  
 [<span data-ttu-id="4aeab-137">System.Transactions에서 제공 하는 기능</span><span class="sxs-lookup"><span data-stu-id="4aeab-137">Features Provided By System.Transactions</span></span>](https://msdn.microsoft.com/library/99cc5ce0-b7fd-4d78-a553-a3dd3f17ed45)  
  
 [<span data-ttu-id="4aeab-138">리소스 관리자 구현</span><span class="sxs-lookup"><span data-stu-id="4aeab-138">Implementing A Resource Manager</span></span>](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>