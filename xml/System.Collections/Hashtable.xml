<Type Name="Hashtable" FullName="System.Collections.Hashtable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="153f1973d094497347a92986c8222bc9e4cc7d79" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58726410" /></Metadata><TypeSignature Language="C#" Value="public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Hashtable extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Hashtable" />
  <TypeSignature Language="VB.NET" Value="Public Class Hashtable&#xA;Implements ICloneable, IDeserializationCallback, IDictionary, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Hashtable : ICloneable, System::Collections::IDictionary, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Hashtable = class&#xA;    interface IDictionary&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="78b2b-101">키의 해시 코드에 따라 구성된 키/값 쌍의 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-101">Represents a collection of key/value pairs that are organized based on the hash code of the key.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="78b2b-102">각 요소는에 저장 된 키/값 쌍을 <xref:System.Collections.DictionaryEntry> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-102">Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="78b2b-103">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-103">A key cannot be `null`, but a value can be.</span></span>  

> [!IMPORTANT]
>  <span data-ttu-id="78b2b-104">사용 하는 권장 하지 않습니다는 `Hashtable` 새로운 개발에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-104">We don't recommend that you use the `Hashtable` class for new development.</span></span> <span data-ttu-id="78b2b-105">제네릭 사용 하는 권장 대신 <xref:System.Collections.Generic.Dictionary%602> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-105">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Dictionary%602> class.</span></span> <span data-ttu-id="78b2b-106">자세한 내용은 [제네릭이 아닌 컬렉션을 사용 하지 않아야](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) github입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-106">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>
  
 <span data-ttu-id="78b2b-107">키로 사용 하는 개체를 <xref:System.Collections.Hashtable> 재정의 하는 데 필요한 합니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 메서드 (또는 <xref:System.Collections.IHashCodeProvider> 인터페이스) 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드 (또는 <xref:System.Collections.IComparer> 인터페이스).</span><span class="sxs-lookup"><span data-stu-id="78b2b-107">The objects used as keys by a <xref:System.Collections.Hashtable> are required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method (or the <xref:System.Collections.IHashCodeProvider> interface) and the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method (or the <xref:System.Collections.IComparer> interface).</span></span> <span data-ttu-id="78b2b-108">구현 메서드 및 인터페이스를 모두 대/소문자 구분; 동일한 방식으로 처리 해야 합니다. 그렇지 않은 경우는 <xref:System.Collections.Hashtable> 올바르게 작동할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-108">The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the <xref:System.Collections.Hashtable> might behave incorrectly.</span></span> <span data-ttu-id="78b2b-109">예를 들어, 만들 때를 <xref:System.Collections.Hashtable>를 사용 해야 합니다는 <xref:System.Collections.CaseInsensitiveHashCodeProvider> 클래스 (또는 모든 대/소문자 <xref:System.Collections.IHashCodeProvider> 구현) 사용 하 여를 <xref:System.Collections.CaseInsensitiveComparer> 클래스 (모든 대/소문자 또는 <xref:System.Collections.IComparer> 구현).</span><span class="sxs-lookup"><span data-stu-id="78b2b-109">For example, when creating a <xref:System.Collections.Hashtable>, you must use the <xref:System.Collections.CaseInsensitiveHashCodeProvider> class (or any case-insensitive <xref:System.Collections.IHashCodeProvider> implementation) with the <xref:System.Collections.CaseInsensitiveComparer> class (or any case-insensitive <xref:System.Collections.IComparer> implementation).</span></span>  
  
 <span data-ttu-id="78b2b-110">또한 이러한 메서드 키에 있는 동안 동일한 매개 변수를 사용 하 여 호출 하는 경우 동일한 결과 생성 해야 합니다는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-110">Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-111">대신 사용 하는 것을 <xref:System.Collections.Hashtable> 생성자를 <xref:System.Collections.IEqualityComparer> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-111">An alternative is to use a <xref:System.Collections.Hashtable> constructor with an <xref:System.Collections.IEqualityComparer> parameter.</span></span> <span data-ttu-id="78b2b-112">키가 같은지 여부 단순히 참조 같음의 상속된 된 구현 된 경우 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 고 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 충분 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-112">If key equality were simply reference equality, the inherited implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> would suffice.</span></span>  
  
 <span data-ttu-id="78b2b-113">키 개체 변경 하지 않아야에 키로 사용할으로 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-113">Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="78b2b-114">요소에 추가 된 경우는 <xref:System.Collections.Hashtable>, 키의 해시 코드를 기반으로 하는 버킷에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-114">When an element is added to the <xref:System.Collections.Hashtable>, the element is placed into a bucket based on the hash code of the key.</span></span> <span data-ttu-id="78b2b-115">후속 조회 키의 키의 해시 코드를 사용 하 여 검색할 하나만 특정 버킷의 요소를 찾는 데 필요한 키 비교 수가 상당히 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-115">Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.</span></span>  
  
 <span data-ttu-id="78b2b-116">로드 비율을 <xref:System.Collections.Hashtable> 버킷과 요소의 최대 비율을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-116">The load factor of a <xref:System.Collections.Hashtable> determines the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-117">더 작은 부하 요인으로 인해 메모리 사용 증가 하는 대신 더 빠르게 평균 조회 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-117">Smaller load factors cause faster average lookup times at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-118">일반적으로 1.0의 기본 로드 비율 속도 크기 간의 최상의 균형을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-118">The default load factor of 1.0 generally provides the best balance between speed and size.</span></span> <span data-ttu-id="78b2b-119">다른 로드 비율을 수도 있습니다 될 때 지정 되는 <xref:System.Collections.Hashtable> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-119">A different load factor can also be specified when the <xref:System.Collections.Hashtable> is created.</span></span>  
  
 <span data-ttu-id="78b2b-120">요소에 추가 되는 <xref:System.Collections.Hashtable>의 실제 로드 비율을 <xref:System.Collections.Hashtable> 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-120">As elements are added to a <xref:System.Collections.Hashtable>, the actual load factor of the <xref:System.Collections.Hashtable> increases.</span></span> <span data-ttu-id="78b2b-121">실제 로드 비율에 지정된 된 로드 비율의 버킷 수를 도달 하면 합니다 <xref:System.Collections.Hashtable> 현재 배의 보다 큰 가장 작은 소수를 자동으로 증가 <xref:System.Collections.Hashtable> 버킷입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-121">When the actual load factor reaches the specified load factor, the number of buckets in the <xref:System.Collections.Hashtable> is automatically increased to the smallest prime number that is larger than twice the current number of <xref:System.Collections.Hashtable> buckets.</span></span>  
  
 <span data-ttu-id="78b2b-122">각 키 개체를 <xref:System.Collections.Hashtable> 를 호출 하 여 액세스할 수 있는 고유한 해시 함수를 제공 해야 <xref:System.Collections.Hashtable.GetHash%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-122">Each key object in the <xref:System.Collections.Hashtable> must provide its own hash function, which can be accessed by calling <xref:System.Collections.Hashtable.GetHash%2A>.</span></span> <span data-ttu-id="78b2b-123">그러나 구현 하는 개체 <xref:System.Collections.IHashCodeProvider> 전달할 수는 <xref:System.Collections.Hashtable> 생성자 및 테이블의 모든 개체에 대 한 해시 함수가 사용 됨을 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-123">However, any object implementing <xref:System.Collections.IHashCodeProvider> can be passed to a <xref:System.Collections.Hashtable> constructor, and that hash function is used for all objects in the table.</span></span>  
  
 <span data-ttu-id="78b2b-124">용량을 <xref:System.Collections.Hashtable> 요소입니다는 <xref:System.Collections.Hashtable> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-124">The capacity of a <xref:System.Collections.Hashtable> is the number of elements the <xref:System.Collections.Hashtable> can hold.</span></span> <span data-ttu-id="78b2b-125">요소에 추가 되는 <xref:System.Collections.Hashtable>, 용량을 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-125">As elements are added to a <xref:System.Collections.Hashtable>, the capacity is automatically increased as required through reallocation.</span></span>  
  
 <span data-ttu-id="78b2b-126">**.NET framework에만 해당:** 에 대 한 매우 큰 <xref:System.Collections.Hashtable> 개체를 설정 하 여 64 비트 시스템에서 2 십억 요소에 최대 용량을 늘릴 수 있습니다는 `enabled` 특성을 [ `<gcAllowVeryLargeObjects>` ](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) 구성 요소를 `true` 에 런타임 환경입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-126">**.NET Framework only:** For very large <xref:System.Collections.Hashtable> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="78b2b-127">합니다 `foreach` C# 언어의 (`For Each` Visual basic에서) 컬렉션 요소의 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-127">The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="78b2b-128">각 요소의 이후는 <xref:System.Collections.Hashtable> 는 키/값 쌍은 요소 형식이 키의 형식 또는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-128">Since each element of the <xref:System.Collections.Hashtable> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="78b2b-129">요소 형식은 대신 <xref:System.Collections.DictionaryEntry>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-129">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="78b2b-130">예:</span><span class="sxs-lookup"><span data-stu-id="78b2b-130">For example:</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cpp/remarks.cpp#01)]
 [!code-csharp[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cs/remarks.cs#01)]
 [!code-vb[System.Collections.Hashtable_ClassExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/vb/remarks.vb#01)]  
  
 <span data-ttu-id="78b2b-131">`foreach` 문을 열거자를 컬렉션에 쓰는 것부터 읽기 가능 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-131">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
 <span data-ttu-id="78b2b-132">직렬화 및 역직렬화에 대 한 열거자 때문에 <xref:System.Collections.Hashtable> 요소를 다시 정렬 될 하면, 호출 하지 않고 열거를 계속 불가능는 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-132">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b2b-133">키에 상속 될 수 있으므로 동작을 변경할의 절대적인 고유성을 보장할 수 없습니다를 사용 하 여 비교 하 여는 <xref:System.Type.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-133">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-134">다음 예제에서는 만들기, 초기화 및 다양 한 함수를 수행 하는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable> 및 해당 키와 값을 출력 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-134">The following example shows how to create, initialize and perform various functions to a <xref:System.Collections.Hashtable> and how to print out its keys and values.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cpp/hashtable_example.cpp#00)]
 [!code-csharp[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/cs/hashtable_example.cs#00)]
 [!code-vb[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ClassExample/vb/hashtable_example.vb#00)]
 [!code-powershell[System.Collections.Hashtable_ClassExample#00](~/samples/snippets/powershell/VS_Snippets_CLR_System/system.collections.hashtable.class/ps/hashtable.ps1#00)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="78b2b-135"><see cref="T:System.Collections.Hashtable" /> 스레드를 여러 판독기 스레드 및 단일 쓰기 스레드가 사용 해도 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-135"><see cref="T:System.Collections.Hashtable" /> is thread safe for use by multiple reader threads and a single writing thread.</span></span> <span data-ttu-id="78b2b-136">이 스레드로부터 안전만 스레드 중 하나 (업데이트) 쓰기 작업을 수행할 때 다중 스레드 사용에 대 한 기록기 serialize 되는 읽기 잠금 해제 허용 하는 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-136">It is thread safe for multi-thread use when only one of the threads perform write (update) operations, which allows for lock-free reads provided that the writers are serialized to the <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="78b2b-137">에 여러 기록기 모든 작업을 지원 하기 위해 합니다 <see cref="T:System.Collections.Hashtable" /> 에서 반환 되는 래퍼를 통해 수행 해야 합니다는 <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> 읽기는 스레드가 없는 제공 하는 메서드를를 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-137">To support multiple writers all operations on the <see cref="T:System.Collections.Hashtable" /> must be done through the wrapper returned by the <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" /> method, provided that there are no threads reading the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="78b2b-138">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-138">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="78b2b-139">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-139">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="78b2b-140">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-140">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.IHashCodeProvider" />
    <altmember cref="M:System.Object.GetHashCode" />
    <altmember cref="M:System.Object.Equals(System.Object)" />
    <altmember cref="T:System.Collections.DictionaryEntry" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="T:System.Collections.IEqualityComparer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="78b2b-141"><see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-141">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78b2b-142">기본 초기 용량, 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-142">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity, load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-143">해시 테이블의 용량 최적의 부하 비율에 따라 해시 테이블 버킷 수를 계산 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-143">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="78b2b-144">용량 자동으로 증가 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="78b2b-144">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="78b2b-145">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-145">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-146">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-146">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-147">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-147">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-148">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-148">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-149">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-149">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-150">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-150">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-151">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-151">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-152">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-152">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-153">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-153">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-154">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-154">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-155">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-155">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <summary><span data-ttu-id="78b2b-156">지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-156">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-157">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율, 해시 코드 공급자 및 비교자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-157">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-158">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-158">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-159">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-159">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-160">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-160">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-161">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-161">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-162">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-162">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-163">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-163">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-164">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-164">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-165">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-165">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-166">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-166">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-167">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-167">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-168">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-168">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-169">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-169">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-170">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-170">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-171"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-171"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable equalityComparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="equalityComparer"><span data-ttu-id="78b2b-172"><see cref="T:System.Collections.IEqualityComparer" /> 개체와 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-172">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="78b2b-173">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-173">-or-</span></span> 
 <span data-ttu-id="78b2b-174">기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-174"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="78b2b-175">기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-175">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-176">기본 초기 용량 및 로드 비율과 지정된 <see cref="T:System.Collections.Hashtable" /> 개체를 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-176">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity and load factor, and the specified <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-177">해시 테이블의 용량 최적의 부하 비율에 따라 해시 테이블 버킷 수를 계산 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-177">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="78b2b-178">용량 자동으로 증가 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="78b2b-178">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="78b2b-179">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-179">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-180">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-180">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-181">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-181">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-182"><xref:System.Collections.IEqualityComparer> 개체 해시 코드 공급자 및 비교자를 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-182">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="78b2b-183">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자에서 키로 사용 하는 개체를 <xref:System.Collections.Hashtable> 개체 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-183">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-184">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-184">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-185">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-185">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-186">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-186">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-187">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-187">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-188">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-188">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-189"><xref:System.Collections.IEqualityComparer> 대/소문자 문자열을 사용 하 여 조회를 수행 하는 시나리오도 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-189">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-190">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-190">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-191">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-191">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-192"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-192">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <summary><span data-ttu-id="78b2b-193">지정된 초기 용량과 기본 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-193">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-194">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-194">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-195">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-195">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-196">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-196">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-197">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-197">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-198">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-198">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-199">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-199">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-200">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-200">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-201">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-201">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-202">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-202">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-203">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-203">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-204">이 생성자는 O (`n`) 작업, 여기서 `n` 는 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-204">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-205">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-205">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-206"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-206"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-207">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-207">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="78b2b-208"><see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-208">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-209">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-209">-or-</span></span> 
 <span data-ttu-id="78b2b-210">기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-210"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="78b2b-211">기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-211">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-212">지정된 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-212">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-213">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율과 지정된 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-213">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-214">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-214">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-215">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-215">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-216">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-216">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-217">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-217">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-218">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-218">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-219"><xref:System.Collections.IEqualityComparer> 개체 해시 코드 공급자 및 비교자를 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-219">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="78b2b-220">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자에서 키로 사용 하는 개체를 <xref:System.Collections.Hashtable> 개체 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-220">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-221">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-221">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-222">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-222">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-223">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-223">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-224">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-224">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-225">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-225">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-226"><xref:System.Collections.IEqualityComparer> 대/소문자 문자열을 사용 하 여 조회를 수행 하는 시나리오도 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-226">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-227">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-227">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-228">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-228">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-229">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-229">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-230"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-230"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="loadFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-231">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-231">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-232">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-232">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-233">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-233">The result is the maximum ratio of elements to buckets.</span></span></param>
        <summary><span data-ttu-id="78b2b-234">지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-234">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-235">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율과 기본 해시 코드 공급자 및 비교자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-235">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-236">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-236">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-237">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-237">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-238">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-238">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-239">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-239">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-240">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-240">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-241">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-241">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-242">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-242">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-243">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-243">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-244">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-244">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-245">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-245">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-246">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-246">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-247">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-247">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-248">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-248">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-249">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-249">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-250"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-250"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-251"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-251"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-252">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-252">-or-</span></span> 
 <span data-ttu-id="78b2b-253"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-253"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hcp"><span data-ttu-id="78b2b-254"><see cref="T:System.Collections.IHashCodeProvider" /> 개체의 모든 키에 대한 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-254">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" /> object.</span></span>  
  
<span data-ttu-id="78b2b-255">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-255">-or-</span></span> 
 <span data-ttu-id="78b2b-256">각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-256"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="78b2b-257">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-257">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="78b2b-258">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-258">-or-</span></span> 
 <span data-ttu-id="78b2b-259">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-259"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-260">기본 초기 용량 및 로드 비율과 지정된 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-260">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-261">해시 테이블의 용량 최적의 부하 비율에 따라 해시 테이블 버킷 수를 계산 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-261">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="78b2b-262">용량 자동으로 증가 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="78b2b-262">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="78b2b-263">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-263">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-264">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-264">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-265">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-265">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-266">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-266">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-267">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-267">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-268">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-268">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-269">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-269">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-270">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-270">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-271">사용자 지정 해시 코드 공급자 및 사용자 지정 비교자를 대/소문자 문자열을 사용 하 여 조회를 수행 하는 등의 시나리오를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-271">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-272">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-272">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-273">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-273">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-274"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-274">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="78b2b-275"><see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-275">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-276">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-276">-or-</span></span> 
 <span data-ttu-id="78b2b-277">기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-277"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="78b2b-278">기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-278">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-279">지정된 초기 용량 및 <see cref="T:System.Collections.Hashtable" />와 기본 로드 비율을 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-279">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity and <see cref="T:System.Collections.IEqualityComparer" />, and the default load factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-280">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-280">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-281">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-281">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-282">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-282">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-283">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-283">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-284">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-284">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-285"><xref:System.Collections.IEqualityComparer> 개체 해시 코드 공급자 및 비교자를 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-285">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="78b2b-286">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자, 개체에서 키로 사용 합니다 <xref:System.Collections.Hashtable> 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-286">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-287">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-287">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-288">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-288">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-289">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-289">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-290">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-290">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-291">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-291">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-292"><xref:System.Collections.IEqualityComparer> 대/소문자 문자열을 사용 하 여 조회를 수행 하는 시나리오도 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-292">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-293">이 생성자는 (`n`) 작업, 여기서 `n` 는 `capacity` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-293">This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-294">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-294">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-295"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-295"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="loadFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-296"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-296">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-297">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-297">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-298">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-298">The result is the maximum ratio of elements to buckets.</span></span></param>
        <summary><span data-ttu-id="78b2b-299">지정된 초기 용량 및 로드 비율과 기본 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-299">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-300">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-300">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-301">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-301">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-302">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-302">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-303">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-303">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-304">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-304">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-305">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-305">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-306">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-306">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-307">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-307">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-308">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-308">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-309">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-309">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-310">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-310">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-311">이 생성자는 (`n`) 작업, 여기서 `n` 는 `capacity` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-311">This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-312">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-312">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-313"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-313"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="78b2b-314">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-314">-or-</span></span> 
 <span data-ttu-id="78b2b-315"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-315"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-316">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-316">-or-</span></span> 
 <span data-ttu-id="78b2b-317"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-317"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-318"><paramref name="capacity" />가 오버플로를 일으킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-318"><paramref name="capacity" /> is causing an overflow.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Hashtable(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="78b2b-319"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-319">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="78b2b-320"><see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Hashtable" />개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-320">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-321">지정된 <see cref="T:System.Collections.Hashtable" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 사용하여 serialize할 수 있는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-321">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class that is serializable using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-322">해시 테이블의 용량 최적의 부하 비율에 따라 해시 테이블 버킷 수를 계산 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-322">A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</span></span> <span data-ttu-id="78b2b-323">용량 자동으로 증가 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="78b2b-323">Capacity is automatically increased as required.</span></span>  
  
 <span data-ttu-id="78b2b-324">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-324">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-325">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-325">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-326">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-326">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-327">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-327">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-328">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-328">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-329">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-329">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-330">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-330">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-331">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-331">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-332">이 생성자는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-332">This constructor is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-333">직렬화 및 역직렬화에 대 한 열거자 때문에 <xref:System.Collections.Hashtable> 요소를 다시 정렬 될 하면, 호출 하지 않고 열거를 계속 불가능는 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-333">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-334"><paramref name="info" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-334"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IDictionary, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-335">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-335">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="hcp"><span data-ttu-id="78b2b-336"><see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-336">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-337">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-337">-or-</span></span> 
 <span data-ttu-id="78b2b-338">각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-338"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="78b2b-339">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-339">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="78b2b-340">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-340">-or-</span></span> 
 <span data-ttu-id="78b2b-341">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-341"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-342">지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-342">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-343">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율과 지정된 해시 코드 공급자 및 비교자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-343">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer.</span></span> <span data-ttu-id="78b2b-344">이 API는 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-344">This API is obsolete.</span></span> <span data-ttu-id="78b2b-345">다른 방법을 보려면 <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="78b2b-345">For an alternative, see <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-346">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-346">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-347">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-347">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-348">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-348">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-349">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-349">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-350">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-350">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-351">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-351">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-352">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-352">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-353">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-353">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-354">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-354">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-355">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-355">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-356">사용자 지정 해시 코드 공급자 및 사용자 지정 비교자를 대/소문자 문자열을 사용 하 여 조회를 수행 하는 등의 시나리오를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-356">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-357">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-357">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-358">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-358">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-359">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-359">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CPP/hashtable_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/CS/hashtable_ctordictionary.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionary/VB/hashtable_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-360"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-360"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-361">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-361">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-362">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-362">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-363">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-363">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="78b2b-364"><see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-364">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-365">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-365">-or-</span></span> 
 <span data-ttu-id="78b2b-366">기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-366"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="78b2b-367">기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-367">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-368">지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-368">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-369">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율 및 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-369">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-370">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-370">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-371">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-371">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-372">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-372">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-373">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-373">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-374">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-374">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-375">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-375">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-376"><xref:System.Collections.IEqualityComparer> 개체 해시 코드 공급자 및 비교자를 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-376">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="78b2b-377">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자에서 키로 사용 하는 개체를 <xref:System.Collections.Hashtable> 개체 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-377">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-378">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-378">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-379">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-379">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-380">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-380">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-381">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-381">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-382">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-382">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-383"><xref:System.Collections.IEqualityComparer> 대/소문자 문자열을 사용 하 여 조회를 수행 하는 시나리오도 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-383">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-384">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-384">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-385">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-385">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-386">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-386">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-387"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-387"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-388"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-388"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-389">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-389">-or-</span></span> 
 <span data-ttu-id="78b2b-390"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-390"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use Hashtable(int, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-391"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-391">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="hcp"><span data-ttu-id="78b2b-392"><see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-392">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-393">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-393">-or-</span></span> 
 <span data-ttu-id="78b2b-394">각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-394"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="78b2b-395">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-395">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="78b2b-396">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-396">-or-</span></span> 
 <span data-ttu-id="78b2b-397">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-397"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-398">지정된 초기 용량, 해시 코드 공급자 및 비교자와 기본 로드 비율을 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-398">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-399">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-399">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-400">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-400">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-401">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-401">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-402">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-402">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span>  
  
 <span data-ttu-id="78b2b-403">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-403">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-404">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-404">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-405">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-405">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-406">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-406">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-407">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-407">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-408">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-408">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-409">사용자 지정 해시 코드 공급자 및 사용자 지정 비교자를 대/소문자 문자열을 사용 하 여 조회를 수행 하는 등의 시나리오를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-409">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-410">이 생성자는 (`n`) 작업, 여기서 `n` 는 `capacity` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-410">This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-411">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-411">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CPP/hashtable_ctorint.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/CS/hashtable_ctorint.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorInt/VB/hashtable_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-412"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-412"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single, equalityComparer As IEqualityComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor, System::Collections::IEqualityComparer ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single * System.Collections.IEqualityComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor, equalityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-413"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-413">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-414">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-414">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-415">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-415">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="78b2b-416"><see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-416">The <see cref="T:System.Collections.IEqualityComparer" /> object that defines the hash code provider and the comparer to use with the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-417">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-417">-or-</span></span> 
 <span data-ttu-id="78b2b-418">기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-418"><see langword="null" /> to use the default hash code provider and the default comparer.</span></span> <span data-ttu-id="78b2b-419">기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-419">The default hash code provider is each key's implementation of <see cref="M:System.Object.GetHashCode" /> and the default comparer is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-420">지정된 초기 용량, 로드 비율 및 <see cref="T:System.Collections.Hashtable" /> 개체를 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-420">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, load factor, and <see cref="T:System.Collections.IEqualityComparer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-421">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-421">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-422">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-422">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-423">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-423">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-424">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-424">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-425">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-425">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-426">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-426">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-427"><xref:System.Collections.IEqualityComparer> 개체 해시 코드 공급자 및 비교자를 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-427">The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer.</span></span> <span data-ttu-id="78b2b-428">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자, 개체에서 키로 사용 합니다 <xref:System.Collections.Hashtable> 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-428">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-429">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-429">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-430">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-430">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-431">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-431">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-432">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-432">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-433">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-433">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-434"><xref:System.Collections.IEqualityComparer> 대/소문자 문자열을 사용 하 여 조회를 수행 하는 시나리오도 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-434">The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-435">이 생성자는 (`n`) 작업, 여기서 `n` 는 `capacity` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-435">This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-436">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-436">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-437"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-437"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="78b2b-438">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-438">-or-</span></span> 
 <span data-ttu-id="78b2b-439"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-439"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-440">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-440">-or-</span></span> 
 <span data-ttu-id="78b2b-441"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-441"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, loadFactor As Single, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(System::Collections::IDictionary ^ d, float loadFactor, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : System.Collections.IDictionary * single * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (d, loadFactor, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use Hashtable(IDictionary, float, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="78b2b-442">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-442">The <see cref="T:System.Collections.IDictionary" /> object to copy to a new <see cref="T:System.Collections.Hashtable" /> object.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-443">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-443">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-444">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-444">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="hcp"><span data-ttu-id="78b2b-445"><see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-445">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-446">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-446">-or-</span></span> 
 <span data-ttu-id="78b2b-447">각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-447"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="78b2b-448">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-448">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="78b2b-449">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-449">-or-</span></span> 
 <span data-ttu-id="78b2b-450">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-450"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-451">지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-451">Initializes a new instance of the <see cref="T:System.Collections.Hashtable" /> class by copying the elements from the specified dictionary to the new <see cref="T:System.Collections.Hashtable" /> object.</span></span> <span data-ttu-id="78b2b-452">새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율, 해시 코드 공급자 및 비교자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-452">The new <see cref="T:System.Collections.Hashtable" /> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-453">초기 용량을 원본 사전의 요소 수로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-453">The initial capacity is set to the number of elements in the source dictionary.</span></span> <span data-ttu-id="78b2b-454">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-454">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-455">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-455">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-456">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-456">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-457">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-457">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-458">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-458">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-459">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-459">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-460">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-460">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-461">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-461">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-462">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-462">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-463">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-463">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-464">사용자 지정 해시 코드 공급자 및 사용자 지정 비교자를 대/소문자 문자열을 사용 하 여 조회를 수행 하는 등의 시나리오를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-464">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-465">새 요소의 <xref:System.Collections.Hashtable> 열거자가 반복는 동일한 순서로 정렬 되는 <xref:System.Collections.IDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-465">The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.</span></span>  
  
 <span data-ttu-id="78b2b-466">이 생성자는 (`n`) 작업, 여기서 `n` 의 요소 수를 `d` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="78b2b-466">This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-467">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-467">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CPP/hashtable_ctordictionaryfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/CS/hashtable_ctordictionaryfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorDictionaryFloat/VB/hashtable_ctordictionaryfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-468"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-468"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-469"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-469"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-470">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-470">-or-</span></span> 
 <span data-ttu-id="78b2b-471"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-471"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, loadFactor As Single, hcp As IHashCodeProvider, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Hashtable(int capacity, float loadFactor, System::Collections::IHashCodeProvider ^ hcp, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Hashtable : int * single * System.Collections.IHashCodeProvider * System.Collections.IComparer -&gt; System.Collections.Hashtable" Usage="new System.Collections.Hashtable (capacity, loadFactor, hcp, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use Hashtable(int, float, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="loadFactor" Type="System.Single" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hcp" Type="System.Collections.IHashCodeProvider" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="78b2b-472"><see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-472">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> object can initially contain.</span></span></param>
        <param name="loadFactor"><span data-ttu-id="78b2b-473">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-473">A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</span></span> <span data-ttu-id="78b2b-474">결과는 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-474">The result is the maximum ratio of elements to buckets.</span></span></param>
        <param name="hcp"><span data-ttu-id="78b2b-475"><see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-475">The <see cref="T:System.Collections.IHashCodeProvider" /> object that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</span></span>  
  
<span data-ttu-id="78b2b-476">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-476">-or-</span></span> 
 <span data-ttu-id="78b2b-477">각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-477"><see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="78b2b-478">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-478">The <see cref="T:System.Collections.IComparer" /> object to use to determine whether two keys are equal.</span></span>  
  
<span data-ttu-id="78b2b-479">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-479">-or-</span></span> 
 <span data-ttu-id="78b2b-480">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-480"><see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-481">지정된 초기 용량, 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-481">Initializes a new, empty instance of the <see cref="T:System.Collections.Hashtable" /> class using the specified initial capacity, load factor, hash code provider, and comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-482">여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-482">Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object.</span></span> <span data-ttu-id="78b2b-483">용량을 자동으로 부하 비율에 따라 필요에 따라 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-483">Capacity is automatically increased as required based on the load factor.</span></span>  
  
 <span data-ttu-id="78b2b-484">로드 비율에 버킷과 요소의 최대 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-484">The load factor is the maximum ratio of elements to buckets.</span></span> <span data-ttu-id="78b2b-485">로드 비율을 더 작은 메모리 사용 증가 하는 대신 빠른 조회를 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-485">A smaller load factor means faster lookup at the cost of increased memory consumption.</span></span> <span data-ttu-id="78b2b-486">1.0의 로드 비율을은 적절 한 속도와 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-486">A load factor of 1.0 is the best balance between speed and size.</span></span>  
  
 <span data-ttu-id="78b2b-487">실제 로드 비율과 지정된 된 로드 비율에 도달 하면 현재 버킷 수가 두 번 보다 큰 가장 작은 소수를 버킷 수가 자동으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-487">When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</span></span>  
  
 <span data-ttu-id="78b2b-488">키에 대 한 해시 코드를 분배 하는 해시 코드 공급자는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-488">The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-489">기본 해시 코드 공급자는 키의 구현의 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-489">The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-490">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-490">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="78b2b-491">모든 키를 <xref:System.Collections.Hashtable> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-491">Every key in a <xref:System.Collections.Hashtable> must be unique.</span></span> <span data-ttu-id="78b2b-492">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-492">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b2b-493">사용자 지정 해시 코드 공급자 및 사용자 지정 비교자를 대/소문자 문자열을 사용 하 여 조회를 수행 하는 등의 시나리오를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-493">The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="78b2b-494">이 생성자는 (`n`) 작업, 여기서 `n` 는 `capacity` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-494">This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-495">다음 코드 예제를 사용 하 여 해시 테이블을 다른 만듭니다 <xref:System.Collections.Hashtable> 생성자 각각 같은 요소를 포함 하는 경우에 해시 테이블의 동작의 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-495">The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</span></span>  
  
 [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CPP/hashtable_ctorintfloat.cpp#1)]
 [!code-csharp[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/CS/hashtable_ctorintfloat.cs#1)]
 [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctorIntFloat/VB/hashtable_ctorintfloat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-496"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-496"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="78b2b-497">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-497">-or-</span></span> 
 <span data-ttu-id="78b2b-498"><paramref name="loadFactor" />가 0.1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-498"><paramref name="loadFactor" /> is less than 0.1.</span></span>  
  
<span data-ttu-id="78b2b-499">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-499">-or-</span></span> 
 <span data-ttu-id="78b2b-500"><paramref name="loadFactor" />가 1.0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-500"><paramref name="loadFactor" /> is greater than 1.0.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="hashtable.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-501">추가할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-501">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="78b2b-502">추가할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-502">The value of the element to add.</span></span> <span data-ttu-id="78b2b-503">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-503">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-504">지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Hashtable" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-504">Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-505">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-505">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="78b2b-506">개체의 상태와 해당 해시 코드 값 간에 상관 관계가 있는 일반적으로 쓰일 수 없습니다 키로 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-506">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="78b2b-507">예를 들어, 문자열 개체는 키로 사용 하 여 StringBuilder 개체 보다 더 나은입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-507">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="78b2b-508">사용할 수도 있습니다는 <xref:System.Collections.Hashtable.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.Hashtable>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-508">You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="78b2b-509">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.Hashtable>설정의 <xref:System.Collections.Hashtable.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-509">However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="78b2b-510">반면,는 <xref:System.Collections.Hashtable.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-510">In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="78b2b-511">하는 경우 <xref:System.Collections.Hashtable.Count%2A> 의 용량 보다 작습니다.는 <xref:System.Collections.Hashtable>,이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-511">If <xref:System.Collections.Hashtable.Count%2A> is less than the capacity of the <xref:System.Collections.Hashtable>, this method is an O(1) operation.</span></span> <span data-ttu-id="78b2b-512">이 메서드는 O가 용량을 늘려야 하는 새 요소를 수용할 수 있도록 하는 경우 (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-512">If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-513">다음 예제에서는 요소를 추가 하는 방법의 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-513">The following example shows how to add elements to the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-514"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-514"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-515">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Hashtable" />에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-515">An element with the same key already exists in the <see cref="T:System.Collections.Hashtable" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78b2b-516"><see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-516">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="78b2b-517">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-517">-or-</span></span> 
<span data-ttu-id="78b2b-518"><see cref="T:System.Collections.Hashtable" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-518">The <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Hashtable.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="hashtable.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78b2b-519"><see cref="T:System.Collections.Hashtable" />에서 요소를 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-519">Removes all elements from the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-520"><xref:System.Collections.Hashtable.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-520"><xref:System.Collections.Hashtable.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span> <span data-ttu-id="78b2b-521">용량 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-521">The capacity remains unchanged.</span></span>  
  
 <span data-ttu-id="78b2b-522">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-522">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-523">다음 예제에서는 값의 선택을 취소 하는 방법의 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-523">The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78b2b-524"><see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-524">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="hashtable.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78b2b-525"><see cref="T:System.Collections.Hashtable" />의 부분 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-525">Creates a shallow copy of the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="78b2b-526"><see cref="T:System.Collections.Hashtable" />의 부분 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-526">A shallow copy of the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-527">컬렉션의 단순 복사본은 참조 형식 또는 값 형식에만 참조에서 참조 하는 개체 복사는 하지 여부를 컬렉션의 요소를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-527">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="78b2b-528">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-528">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="78b2b-529">반면, 컬렉션의 전체 복사본을 요소를 복사 하 고 뿐만 아니라 요소에 의해 직접 또는 간접적으로 참조 하는 모든 것.</span><span class="sxs-lookup"><span data-stu-id="78b2b-529">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="78b2b-530">합니다 <xref:System.Collections.Hashtable> 복제본은 동일한 개수 용량이 동일 <xref:System.Collections.IHashCodeProvider> 구현 및 동일 <xref:System.Collections.IComparer> 원래 구현 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-530">The <xref:System.Collections.Hashtable> clone has the same count, the same capacity, the same <xref:System.Collections.IHashCodeProvider> implementation, and the same <xref:System.Collections.IComparer> implementation as the original <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="78b2b-531">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-531">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="comparer">
      <MemberSignature Language="C#" Value="protected System.Collections.IComparer comparer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.comparer" />
      <MemberSignature Language="VB.NET" Value="Protected Property comparer As IComparer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IComparer ^ comparer { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.comparer : System.Collections.IComparer with get, set" Usage="System.Collections.Hashtable.comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use KeyComparer properties.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-532"><see cref="T:System.Collections.IComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-532">Gets or sets the <see cref="T:System.Collections.IComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-533"><see cref="T:System.Collections.IComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-533">The <see cref="T:System.Collections.IComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-534">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-534">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-535">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IEqualityComparer" />를 사용하여 해시 테이블을 만든 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-535">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IEqualityComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="hashtable.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-536"><see cref="T:System.Collections.Hashtable" />에서 찾을 수 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-536">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-537"><see cref="T:System.Collections.Hashtable" />에 특정 키가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-537">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="78b2b-538"><see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-538"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-539"><xref:System.Collections.Hashtable.Contains%2A>는 <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-539"><xref:System.Collections.Hashtable.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="78b2b-540">와 동일 하 게 작동 <xref:System.Collections.Hashtable.ContainsKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-540">It behaves exactly as <xref:System.Collections.Hashtable.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-541">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-541">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="78b2b-542">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="78b2b-542">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="78b2b-543">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-543">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-544">다음 예제에서는 확인 하는 방법을 보여 줍니다 여부를 <xref:System.Collections.Hashtable> 특정 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-544">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-545"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-545"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="hashtable.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-546"><see cref="T:System.Collections.Hashtable" />에서 찾을 수 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-546">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-547"><see cref="T:System.Collections.Hashtable" />에 특정 키가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-547">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="78b2b-548"><see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-548"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-549">이 메서드가 동일 하 게 동작 <xref:System.Collections.Hashtable.Contains%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-549">This method behaves exactly as <xref:System.Collections.Hashtable.Contains%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-550">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-550">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="78b2b-551">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="78b2b-551">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="78b2b-552">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-552">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-553">다음 예제에서는 확인 하는 방법을 보여 줍니다 여부를 <xref:System.Collections.Hashtable> 특정 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-553">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-554"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-554"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Contains(System.Object)" />
        <altmember cref="M:System.Collections.Hashtable.ContainsValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="hashtable.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="78b2b-555"><see cref="T:System.Collections.Hashtable" />에서 찾을 값입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-555">The value to locate in the <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="78b2b-556">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-556">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-557"><see cref="T:System.Collections.Hashtable" />에 특정 값이 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-557">Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="78b2b-558">지정된 <see langword="true" />을 가진 요소가 <see cref="T:System.Collections.Hashtable" />에 포함되어 있으면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-558"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-559">요소의 값을 <xref:System.Collections.Hashtable> 사용 하 여 지정 된 값과 비교할는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-559">The values of the elements of the <xref:System.Collections.Hashtable> are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="78b2b-560">이 메서드는; 선형 검색을 수행합니다. 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-560">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-561">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="78b2b-561">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="78b2b-562">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-562">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-563">다음 예제에서는 확인 하는 방법을 보여 줍니다 여부를 <xref:System.Collections.Hashtable> 특정 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-563">The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.</span></span>  
  
 [!code-cpp[Classic Hashtable.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.ContainsKey(System.Object)" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="hashtable.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="78b2b-564"><see cref="T:System.Array" />에서 복사한 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.Hashtable" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-564">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="78b2b-565"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-565">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="78b2b-566"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-566">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="78b2b-567"><see cref="T:System.Collections.Hashtable" /> 요소를 지정한 인덱스의 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-567">Copies the <see cref="T:System.Collections.Hashtable" /> elements to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-568">요소에 복사 됩니다는 <xref:System.Array> 열거자가 반복 나타나는 순서에서는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-568">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="78b2b-569">에 있는 키를 복사 하는 <xref:System.Collections.Hashtable>를 사용 하 여 `Hashtable.Keys.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-569">To copy only the keys in the <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="78b2b-570">값만 복사 하는 <xref:System.Collections.Hashtable>를 사용 하 여 `Hashtable.Values.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-570">To copy only the values in the <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="78b2b-571">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-571">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-572">다음 예제에서는 키 목록을 가져오거나의 값 목록을 복사 하는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable> 는 1 차원으로 <xref:System.Array>입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-572">The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Hashtable.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-573"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-573"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78b2b-574"><paramref name="arrayIndex" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-574"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-575"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-575"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="78b2b-576">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-576">-or-</span></span> 
<span data-ttu-id="78b2b-577">소스 <see cref="T:System.Collections.Hashtable" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-577">The number of elements in the source <see cref="T:System.Collections.Hashtable" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="78b2b-578">소스 <see cref="T:System.Collections.Hashtable" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-578">The type of the source <see cref="T:System.Collections.Hashtable" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Hashtable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Hashtable.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-579"><see cref="T:System.Collections.Hashtable" />에 포함된 키/값 쌍의 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-579">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-580"><see cref="T:System.Collections.Hashtable" />에 포함된 키/값 쌍의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-580">The number of key/value pairs contained in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-581">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-581">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="protected System.Collections.IEqualityComparer EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEqualityComparer EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property EqualityComparer As IEqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IEqualityComparer ^ EqualityComparer { System::Collections::IEqualityComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.IEqualityComparer" Usage="System.Collections.Hashtable.EqualityComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-582"><see cref="T:System.Collections.IEqualityComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-582">Gets the <see cref="T:System.Collections.IEqualityComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-583"><see cref="T:System.Collections.IEqualityComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-583">The <see cref="T:System.Collections.IEqualityComparer" /> to use for the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-584"><xref:System.Collections.IEqualityComparer> 해시 코드 공급자 및 비교자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-584">The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider.</span></span> <span data-ttu-id="78b2b-585">경우는 <xref:System.Collections.IEqualityComparer> 에 사용 되는 <xref:System.Collections.Hashtable> 생성자, 개체에서 키로 사용 합니다 <xref:System.Collections.Hashtable> 재정의할 필요가 없습니다를 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-585">If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> and <xref:System.Object.Equals%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="78b2b-586">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-586">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-587">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IHashCodeProvider" /> 및 <see cref="T:System.Collections.IComparer" />를 사용하여 해시 테이블을 만든 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-587">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IHashCodeProvider" /> and an <see cref="T:System.Collections.IComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.Comparer" />
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="hashtable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78b2b-588"><see cref="T:System.Collections.IDictionaryEnumerator" />를 반복하는 <see cref="T:System.Collections.Hashtable" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-588">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="78b2b-589"><see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-589">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-590">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="78b2b-590">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="78b2b-591">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-591">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="78b2b-592">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-592">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="78b2b-593">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-593">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="78b2b-594">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-594">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="78b2b-595"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-595"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="78b2b-596">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-596">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="78b2b-597">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-597">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-598"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-598"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="78b2b-599"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-599"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="78b2b-600">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-600">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="78b2b-601">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-601">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="78b2b-602">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-602">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="78b2b-603"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-603">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-604">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-604">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="78b2b-605">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-605">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="78b2b-606">열거자는 컬렉션에 독점적으로 액세스할 수 있는 권한이 없으므로 컬렉션을 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-606">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span>  <span data-ttu-id="78b2b-607">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-607">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="78b2b-608">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-608">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="78b2b-609">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-609">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="78b2b-610">직렬화 및 역직렬화에 대 한 열거자 때문에 <xref:System.Collections.Hashtable> 요소를 다시 정렬 될 하면, 호출 하지 않고 열거를 계속 불가능는 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-610">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-611">다음 예제에서는 사용 하는 비교 <xref:System.Collections.Hashtable.GetEnumerator%2A> 및 `foreach` 의 콘텐츠를 열거 하는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-611">The following example compares the use of <xref:System.Collections.Hashtable.GetEnumerator%2A> and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Hashtable Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable Example/CS/source2.cs#2)]
 [!code-vb[Classic Hashtable Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetHash">
      <MemberSignature Language="C#" Value="protected virtual int GetHash (object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetHash(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetHash(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetHash (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int GetHash(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetHash : obj -&gt; int&#xA;override this.GetHash : obj -&gt; int" Usage="hashtable.GetHash key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-612">해시 코드가 반환될 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-612">The <see cref="T:System.Object" /> for which a hash code is to be returned.</span></span></param>
        <summary><span data-ttu-id="78b2b-613">지정한 키의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-613">Returns the hash code for the specified key.</span></span></summary>
        <returns><span data-ttu-id="78b2b-614"><paramref name="key" />의 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-614">The hash code for <paramref name="key" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-615">특정 해시 테이블을 만든 경우 <xref:System.Collections.IHashCodeProvider> 구현에서는이 메서드는 해시 코드 공급자를 사용 하 여 사용 하 여이 고, 그렇지 않으면 합니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 구현의 `key`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-615">If the hash table was created with a specific <xref:System.Collections.IHashCodeProvider> implementation, this method uses that hash code provider; otherwise, it uses the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> implementation of `key`.</span></span>  
  
 <span data-ttu-id="78b2b-616">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-616">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="78b2b-617"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-617"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="hashtable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="78b2b-618"><see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-618">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <param name="context"><span data-ttu-id="78b2b-619"><see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Hashtable" />개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-619">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-620"><see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Hashtable" />을 serialize하는 데 필요한 데이터를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-620">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-621">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-621">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-622"><paramref name="info" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-622"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78b2b-623">컬렉션이 수정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-623">The collection was modified.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="78b2b-624">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-624">requires full trust for the immediate caller.</span></span> <span data-ttu-id="78b2b-625">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-625">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="hcp">
      <MemberSignature Language="C#" Value="protected System.Collections.IHashCodeProvider hcp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IHashCodeProvider hcp" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.hcp" />
      <MemberSignature Language="VB.NET" Value="Protected Property hcp As IHashCodeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IHashCodeProvider ^ hcp { System::Collections::IHashCodeProvider ^ get(); void set(System::Collections::IHashCodeProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.hcp : System.Collections.IHashCodeProvider with get, set" Usage="System.Collections.Hashtable.hcp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Please use EqualityComparer property.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IHashCodeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-626">해시 코드를 분배할 수 있는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-626">Gets or sets the object that can dispense hash codes.</span></span></summary>
        <value><span data-ttu-id="78b2b-627">해시 코드를 분배할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-627">The object that can dispense hash codes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-628">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-628">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78b2b-629">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IEqualityComparer" />를 사용하여 해시 테이블을 만든 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-629">The property is set to a value, but the hash table was created using an <see cref="T:System.Collections.IEqualityComparer" />.</span></span></exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.Hashtable.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-630"><see cref="T:System.Collections.Hashtable" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-630">Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="78b2b-631"><see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-631"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78b2b-632">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-632">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-633">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-633">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="78b2b-634">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-634">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="78b2b-635">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-635">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.Hashtable.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-636"><see cref="T:System.Collections.Hashtable" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-636">Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="78b2b-637"><see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-637"><see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78b2b-638">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-638">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-639">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-639">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="78b2b-640">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-640">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="78b2b-641">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-641">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Hashtable.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-642"><see cref="T:System.Collections.Hashtable" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-642">Gets a value indicating whether access to the <see cref="T:System.Collections.Hashtable" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="78b2b-643"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-643"><see langword="true" /> if access to the <see cref="T:System.Collections.Hashtable" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78b2b-644">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-644">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-645"><xref:System.Collections.Hashtable> 동시 지원할 수 있습니다 하나 기록기 및 다중 판독기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-645">A <xref:System.Collections.Hashtable> can support one writer and multiple readers concurrently.</span></span> <span data-ttu-id="78b2b-646">여러 기록기를 지원 하려면 모든 작업에서 반환 되는 래퍼를 통해 수행 해야 합니다는 <xref:System.Collections.Hashtable.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-646">To support multiple writers, all operations must be done through the wrapper returned by the <xref:System.Collections.Hashtable.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="78b2b-647">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-647">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="78b2b-648">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-648">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="78b2b-649">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-649">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="78b2b-650">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="78b2b-650">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-651">다음 예제에서는 동기화 하는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable>, 확인을 <xref:System.Collections.Hashtable> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.Hashtable>입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-651">The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
        <altmember cref="P:System.Collections.Hashtable.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.Hashtable.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-652">가져오거나 설정할 값이 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-652">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="78b2b-653">지정된 키에 연결된 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-653">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="78b2b-654">지정한 키와 연결된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-654">The value associated with the specified key.</span></span> <span data-ttu-id="78b2b-655">지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 <see langword="null" />이 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 요소가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-655">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new element using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-656">이 속성은 `myCollection[key]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-656">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="78b2b-657">사용할 수도 있습니다는 <xref:System.Collections.Hashtable.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.Hashtable>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-657">You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="78b2b-658">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.Hashtable>설정의 <xref:System.Collections.Hashtable.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-658">However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="78b2b-659">반면,는 <xref:System.Collections.Hashtable.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-659">In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="78b2b-660">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-660">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="78b2b-661">구분 하기 위해 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 합니다 <xref:System.Collections.Hashtable.Contains%2A> 메서드 또는 <xref:System.Collections.Hashtable.ContainsKey%2A> 확인 하는 방법 키 목록에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-661">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Hashtable.Contains%2A> method or the <xref:System.Collections.Hashtable.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="78b2b-662">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-662">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 <span data-ttu-id="78b2b-663">C# 언어 사용 합니다 [ `this` ](~/docs/csharp/language-reference/keywords/this.md) 구현 하는 대신 인덱서를 정의 하는 키워드는 <xref:System.Collections.IList.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-663">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property.</span></span> <span data-ttu-id="78b2b-664">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Hashtable.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-664">Visual Basic implements <xref:System.Collections.Hashtable.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-665"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-665"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78b2b-666">속성이 설정되어 있으며 <see cref="T:System.Collections.Hashtable" />가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-666">The property is set and the <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="78b2b-667">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-667">-or-</span></span> 
<span data-ttu-id="78b2b-668">속성이 설정되어 있고 <paramref name="key" />가 컬렉션에 없으며 <see cref="T:System.Collections.Hashtable" />의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-668">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyEquals">
      <MemberSignature Language="C#" Value="protected virtual bool KeyEquals (object item, object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyEquals(object item, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function KeyEquals (item As Object, key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool KeyEquals(System::Object ^ item, System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member KeyEquals : obj * obj -&gt; bool&#xA;override this.KeyEquals : obj * obj -&gt; bool" Usage="hashtable.KeyEquals (item, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="78b2b-669"><paramref name="key" />와 비교할 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-669">The <see cref="T:System.Object" /> to compare with <paramref name="key" />.</span></span></param>
        <param name="key"><span data-ttu-id="78b2b-670"><paramref name="item" />과 비교할 <see cref="T:System.Collections.Hashtable" />의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-670">The key in the <see cref="T:System.Collections.Hashtable" /> to compare with <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="78b2b-671">특정 <see cref="T:System.Object" />를 <see cref="T:System.Collections.Hashtable" />의 특정 키와 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-671">Compares a specific <see cref="T:System.Object" /> with a specific key in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="78b2b-672"><paramref name="item" />과 <paramref name="key" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-672"><see langword="true" /> if <paramref name="item" /> and <paramref name="key" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-673">특정 해시 테이블을 만든 경우 <xref:System.Collections.IComparer> 구현에서는이 메서드는 해당 비교자;를, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`).</span><span class="sxs-lookup"><span data-stu-id="78b2b-673">If the hash table was created with a specific <xref:System.Collections.IComparer> implementation, this method uses that comparer; that is, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`).</span></span> <span data-ttu-id="78b2b-674">사용 하 여이 고, 그렇지 `item.Equals(key)`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-674">Otherwise, it uses `item.Equals(key)`.</span></span>  
  
 <span data-ttu-id="78b2b-675">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-675">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-676"><paramref name="item" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-676"><paramref name="item" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="78b2b-677">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-677">-or-</span></span> 
 <span data-ttu-id="78b2b-678"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-678"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.Hashtable.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-679"><see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Hashtable" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-679">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-680"><see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-680">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-681">에 있는 키의 순서를 <xref:System.Collections.ICollection> 지정 되지의 연결된 된 값과 같은 순서로 이지만 합니다 <xref:System.Collections.ICollection> 반환한는 <xref:System.Collections.Hashtable.Values%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-681">The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method.</span></span>  
  
 <span data-ttu-id="78b2b-682">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 키를 다시 참조 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-682">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-683">따라서를 변경 합니다 <xref:System.Collections.Hashtable> 계속에 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-683">Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="78b2b-684">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-684">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Hashtable.Values" />
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public virtual void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDeserialization (sender As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDeserialization(System::Object ^ sender);" />
      <MemberSignature Language="F#" Value="abstract member OnDeserialization : obj -&gt; unit&#xA;override this.OnDeserialization : obj -&gt; unit" Usage="hashtable.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="78b2b-685">deserialization 이벤트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-685">The source of the deserialization event.</span></span></param>
        <summary><span data-ttu-id="78b2b-686"><see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-686">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-687">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Hashtable.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-687">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-688">직렬화 및 역직렬화에 대 한 열거자 때문에 <xref:System.Collections.Hashtable> 요소를 다시 정렬 될 하면, 호출 하지 않고 열거를 계속 불가능는 <xref:System.Collections.IEnumerator.Reset%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-688">Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="78b2b-689">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" />과 관련된 <see cref="T:System.Collections.Hashtable" /> 개체가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-689">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Hashtable" /> is invalid.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="hashtable.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78b2b-690">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-690">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="78b2b-691"><see cref="T:System.Collections.Hashtable" />에서 지정한 키를 가지는 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-691">Removes the element with the specified key from the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-692">경우는 <xref:System.Collections.Hashtable> 지정된 된 키를 사용 하 여 요소를 포함 하지 않습니다는 <xref:System.Collections.Hashtable> 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-692">If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged.</span></span> <span data-ttu-id="78b2b-693">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-693">No exception is thrown.</span></span>  
  
 <span data-ttu-id="78b2b-694">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-694">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-695">다음 예제에서는 요소를 제거 하는 방법의 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-695">The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.Remove Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-696"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-696"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78b2b-697"><see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="78b2b-697">The <see cref="T:System.Collections.Hashtable" /> is read-only.</span></span>  
  
<span data-ttu-id="78b2b-698">또는</span><span class="sxs-lookup"><span data-stu-id="78b2b-698">-or-</span></span> 
<span data-ttu-id="78b2b-699"><see cref="T:System.Collections.Hashtable" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-699">The <see cref="T:System.Collections.Hashtable" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Hashtable Synchronized(class System.Collections.Hashtable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (table As Hashtable) As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Hashtable ^ Synchronized(System::Collections::Hashtable ^ table);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Hashtable -&gt; System.Collections.Hashtable" Usage="System.Collections.Hashtable.Synchronized table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Collections.Hashtable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="78b2b-700">동기화할 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-700">The <see cref="T:System.Collections.Hashtable" /> to synchronize.</span></span></param>
        <summary><span data-ttu-id="78b2b-701"><see cref="T:System.Collections.Hashtable" />에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-701">Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <returns><span data-ttu-id="78b2b-702"><see cref="T:System.Collections.Hashtable" />에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-702">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-703"><xref:System.Collections.Hashtable.Synchronized%2A> 메서드는 스레드로부터 안전 하 게 여러 판독기와 작성기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-703">The <xref:System.Collections.Hashtable.Synchronized%2A> method is thread safe for multiple readers and writers.</span></span> <span data-ttu-id="78b2b-704">또한 동기화 된 래퍼 작성 한 번에 하나의 기록기 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-704">Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.</span></span>  
  
 <span data-ttu-id="78b2b-705">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-705">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="78b2b-706">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-706">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="78b2b-707">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-707">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="78b2b-708">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="78b2b-708">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="78b2b-709">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-709">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b2b-710">다음 예제에서는 동기화 하는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable>, 확인을 <xref:System.Collections.Hashtable> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.Hashtable>입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-710">The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78b2b-711"><paramref name="table" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-711"><paramref name="table" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.Hashtable.IsSynchronized" />
        <altmember cref="P:System.Collections.Hashtable.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Hashtable.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-712"><see cref="T:System.Collections.Hashtable" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-712">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-713"><see cref="T:System.Collections.Hashtable" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-713">An object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-714">동기화 된 버전을 만들려면 합니다 <xref:System.Collections.Hashtable>를 사용 하 여를 <xref:System.Collections.Hashtable.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-714">To create a synchronized version of the <xref:System.Collections.Hashtable>, use the <xref:System.Collections.Hashtable.Synchronized%2A> method.</span></span> <span data-ttu-id="78b2b-715">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.Hashtable> 를 사용 하 여는 <xref:System.Collections.Hashtable.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-715">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Hashtable> using the <xref:System.Collections.Hashtable.SyncRoot%2A> property.</span></span> <span data-ttu-id="78b2b-716">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.Hashtable.SyncRoot%2A> 의 합니다 <xref:System.Collections.Hashtable>에서 직접는 <xref:System.Collections.Hashtable> 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-716">The synchronizing code must perform operations on the <xref:System.Collections.Hashtable.SyncRoot%2A> of the <xref:System.Collections.Hashtable>, not directly on the <xref:System.Collections.Hashtable> .</span></span> <span data-ttu-id="78b2b-717">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-717">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="78b2b-718">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Hashtable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-718">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Hashtable> object.</span></span>  
  
 <span data-ttu-id="78b2b-719">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-719">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="78b2b-720">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-720">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="78b2b-721">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-721">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="78b2b-722">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Hashtable.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="78b2b-722">The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/CS/remarks.cs#2)]
 [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Hashtable.IsSynchronized Example/VB/remarks.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Hashtable.IsSynchronized" />
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78b2b-723">컬렉션을 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-723">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="78b2b-724">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-724">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-725">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="78b2b-725">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="78b2b-726">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-726">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="78b2b-727">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-727">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="78b2b-728">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-728">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="78b2b-729">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-729">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="78b2b-730"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-730"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="78b2b-731">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-731">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="78b2b-732">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-732">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-733"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-733"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="78b2b-734"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-734"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="78b2b-735">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-735">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="78b2b-736">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-736">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="78b2b-737">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-737">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="78b2b-738"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-738">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="78b2b-739">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-739">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="78b2b-740">에 변경 내용이 추가 하는 등 컬렉션을 수정 또는 요소 삭제에 열거자를 무효화 될 수 있습니다 하 고,을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 나 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-740">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="78b2b-741">컬렉션 사이 수정 된 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 고 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효화 된 경우에로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-741">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="78b2b-742">열거자는 컬렉션에 독점적으로 액세스할 수 있는 권한이 없으므로 컬렉션을 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-742">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="78b2b-743">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-743">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="78b2b-744">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-744">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="78b2b-745">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-745">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Hashtable.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.Hashtable.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78b2b-746"><see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.Hashtable" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-746">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Hashtable" />.</span></span></summary>
        <value><span data-ttu-id="78b2b-747"><see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-747">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Hashtable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b2b-748">에 있는 값의 순서를 <xref:System.Collections.ICollection> 지정 되지 동일한 순서에 연결된 된 키와 이지만 합니다 <xref:System.Collections.ICollection> 반환한를 <xref:System.Collections.Hashtable.Keys%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="78b2b-748">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="78b2b-749">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 값을 다시 참조 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-749">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>.</span></span> <span data-ttu-id="78b2b-750">따라서를 변경 합니다 <xref:System.Collections.Hashtable> 계속에 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-750">Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="78b2b-751">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="78b2b-751">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Hashtable.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>