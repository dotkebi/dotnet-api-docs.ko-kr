<Type Name="DictionaryBase" FullName="System.Collections.DictionaryBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2f2b93f1950d4c01486461510f5ca9d9fccede73" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56054673" /></Metadata><TypeSignature Language="C#" Value="public abstract class DictionaryBase : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit DictionaryBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.DictionaryBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DictionaryBase&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictionaryBase abstract : System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type DictionaryBase = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="393b2-101">강력한 형식의 키/값 쌍 컬렉션에 대한 <see langword="abstract" /> 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-101">Provides the <see langword="abstract" /> base class for a strongly typed collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!IMPORTANT]
>  <span data-ttu-id="393b2-102">사용 하는 권장 하지 않습니다는 `DictionaryBase` 새로운 개발에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-102">We don't recommend that you use the `DictionaryBase` class for new development.</span></span> <span data-ttu-id="393b2-103">대신, 제네릭을 사용 하는 좋습니다 <xref:System.Collections.Generic.Dictionary%602> 또는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-103">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Dictionary%602> or <xref:System.Collections.ObjectModel.KeyedCollection%602> class .</span></span> <span data-ttu-id="393b2-104">자세한 내용은 [제네릭이 아닌 컬렉션을 사용 하지 않아야](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) github입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-104">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

<span data-ttu-id="393b2-105">C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) 문 및 Visual Basic [마다](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) 문 컬렉션에 요소 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-105">The C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) statement and the Visual Basic [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) statement return an object of the type of the elements in the collection.</span></span> <span data-ttu-id="393b2-106">각 요소의 이후는 <xref:System.Collections.DictionaryBase> 는 키/값 쌍은 요소 형식이 키의 형식 또는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-106">Since each element of the <xref:System.Collections.DictionaryBase> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="393b2-107">요소 형식은 대신 <xref:System.Collections.DictionaryEntry>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-107">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span>  
  
 <span data-ttu-id="393b2-108">`foreach` 문을 열거자를 컬렉션에 쓰는 것부터 읽기 가능 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-108">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="393b2-109">키에 상속 될 수 있으므로 동작을 변경할의 절대적인 고유성을 보장할 수 없습니다를 사용 하 여 비교 하 여는 <xref:System.Type.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="393b2-109">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-110">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-110">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="393b2-111">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-111">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="393b2-112">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-112">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="393b2-113">이 구현에 대 한 동기화 (스레드로부터 안전 하면) 래퍼를 제공 하지 않습니다는 <see cref="T:System.Collections.DictionaryBase" />, 파생된 클래스의 자체 동기화 된 버전을 만들 수 있지만 합니다 <see cref="T:System.Collections.DictionaryBase" /> 를 사용 하 여는 <see cref="P:System.Collections.ICollection.SyncRoot" /> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-113">This implementation does not provide a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.DictionaryBase" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.DictionaryBase" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="393b2-114">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-114">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="393b2-115">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-115">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="393b2-116">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-116">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="393b2-117">이 기본 클래스는 강력한 형식의 사용자 지정 컬렉션을 만들 수는 쉽게 수행할 수 있도록 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-117">This base class is provided to make it easier for implementers to create a strongly typed custom collection.</span></span> <span data-ttu-id="393b2-118">구현자는 자체를 만드는 대신이 기본 클래스를 확장 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-118">Implementers are encouraged to extend this base class instead of creating their own.</span></span>  
  
<span data-ttu-id="393b2-119">이 기본 클래스의 멤버는 파생된 된 클래스를 통해 사용 하기에 적합 하 고 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-119">Members of this base class are protected and are intended to be used through a derived class only.</span></span></para></block>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="N:System.Collections.Generic" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="393b2-120">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="393b2-120">Performing Culture-Insensitive String Operations</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DictionaryBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DictionaryBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-121"><see cref="T:System.Collections.DictionaryBase" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-121">Initializes a new instance of the <see cref="T:System.Collections.DictionaryBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-122">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-122">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="dictionaryBase.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-123"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스의 콘텐츠를 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-123">Clears the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-124"><xref:System.Collections.DictionaryBase.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-124"><xref:System.Collections.DictionaryBase.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="393b2-125">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.DictionaryBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-125">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="dictionaryBase.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="393b2-126"><see cref="T:System.Array" /> 인스턴스에서 복사된 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.DictionaryBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-126">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span> <span data-ttu-id="393b2-127"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-127">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="393b2-128"><paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-128">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="393b2-129">지정한 인덱스에서 1차원 <see cref="T:System.Collections.DictionaryBase" />에 <see cref="T:System.Array" /> 엔트리를 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-129">Copies the <see cref="T:System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-130">요소에 복사 됩니다는 <xref:System.Array> 열거자가 반복 나타나는 순서에서는 <xref:System.Collections.DictionaryBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-130">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.DictionaryBase>.</span></span>  
  
 <span data-ttu-id="393b2-131">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.DictionaryBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-131">This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="393b2-132"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-132"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="393b2-133"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-133"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="393b2-134"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-134"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="393b2-135">또는</span><span class="sxs-lookup"><span data-stu-id="393b2-135">-or-</span></span> 
<span data-ttu-id="393b2-136">소스 <see cref="T:System.Collections.DictionaryBase" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-136">The number of elements in the source <see cref="T:System.Collections.DictionaryBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="393b2-137">소스 <see cref="T:System.Collections.DictionaryBase" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-137">The type of the source <see cref="T:System.Collections.DictionaryBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.DictionaryBase.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.DictionaryBase.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-138"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 포함된 요소의 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-138">Gets the number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="393b2-139"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 포함된 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-139">The number of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-140">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-140">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Dictionary { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.IDictionary" Usage="System.Collections.DictionaryBase.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-141"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 포함된 요소의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-141">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="393b2-142"><see cref="T:System.Collections.IDictionary" /> 인스턴스 자체를 나타내는 <see cref="T:System.Collections.DictionaryBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-142">An <see cref="T:System.Collections.IDictionary" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-143">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-143">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-144">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-144">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-145">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-145">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="dictionaryBase.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-146"><see cref="T:System.Collections.IDictionaryEnumerator" /> 인스턴스를 반복하는 <see cref="T:System.Collections.DictionaryBase" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-146">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="393b2-147"><see cref="T:System.Collections.IDictionaryEnumerator" /> 인스턴스의 <see cref="T:System.Collections.DictionaryBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-147">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-148">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-148">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="393b2-149">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-149">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="393b2-150">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-150">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="393b2-151">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-151">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="393b2-152"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-152"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="393b2-153">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-153">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="393b2-154">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-154">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="393b2-155"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-155"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="393b2-156"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-156"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="393b2-157">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-157">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="393b2-158">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-158">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="393b2-159">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-159">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="393b2-160"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-160">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="393b2-161">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-161">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="393b2-162">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-162">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="393b2-163">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-163">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="393b2-164">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-164">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="393b2-165">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-165">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="393b2-166">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-166">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-167">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-167">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="InnerHashtable">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable InnerHashtable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable InnerHashtable" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.InnerHashtable" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InnerHashtable As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ InnerHashtable { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerHashtable : System.Collections.Hashtable" Usage="System.Collections.DictionaryBase.InnerHashtable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-168"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 포함된 요소의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-168">Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="393b2-169"><see cref="T:System.Collections.Hashtable" /> 인스턴스 자체를 나타내는 <see cref="T:System.Collections.DictionaryBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-169">A <see cref="T:System.Collections.Hashtable" /> representing the <see cref="T:System.Collections.DictionaryBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-170">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-170">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-171">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-171">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClear">
      <MemberSignature Language="C#" Value="protected virtual void OnClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClear" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClear ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClear();" />
      <MemberSignature Language="F#" Value="abstract member OnClear : unit -&gt; unit&#xA;override this.OnClear : unit -&gt; unit" Usage="dictionaryBase.OnClear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-172"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스의 내용을 지우기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-172">Performs additional custom processes before clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-173">이 메서드의 기본 구현 컬렉션을 지울 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-173">The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</span></span>  
  
 <span data-ttu-id="393b2-174">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-174">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-175">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-175">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-176">이 메서드를 내부에서 모든 요소를 삭제 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-176">This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-177">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-177">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-178"><see cref="M:System.Collections.DictionaryBase.OnClear" /> 표준 일반 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> 표준 지우기 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-178"><see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span>  
  
<span data-ttu-id="393b2-179">예를 들어, 구현자는 전역의 선택을 취소 하 여 삭제의 특정 요소를 제외할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-179">For example, implementers can exempt certain elements from deletion by a global Clear.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClearComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnClearComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClearComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnClearComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClearComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClearComplete();" />
      <MemberSignature Language="F#" Value="abstract member OnClearComplete : unit -&gt; unit&#xA;override this.OnClearComplete : unit -&gt; unit" Usage="dictionaryBase.OnClearComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-180"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스의 내용을 지운 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-180">Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-181">이 메서드의 기본 구현은 컬렉션 지워진 후 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-181">The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</span></span>  
  
 <span data-ttu-id="393b2-182">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-182">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-183">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-183">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-184">이 메서드를 내부에서 모든 요소를 삭제 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-184">This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-185">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-185">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-186"><see cref="M:System.Collections.DictionaryBase.OnClear" /> 표준 일반 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> 표준 지우기 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-186"><see cref="M:System.Collections.DictionaryBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnGet">
      <MemberSignature Language="C#" Value="protected virtual object OnGet (object key, object currentValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object OnGet(object key, object currentValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnGet (key As Object, currentValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ OnGet(System::Object ^ key, System::Object ^ currentValue);" />
      <MemberSignature Language="F#" Value="abstract member OnGet : obj * obj -&gt; obj&#xA;override this.OnGet : obj * obj -&gt; obj" Usage="dictionaryBase.OnGet (key, currentValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="currentValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-187">가져올 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-187">The key of the element to get.</span></span></param>
        <param name="currentValue"><span data-ttu-id="393b2-188"><paramref name="key" />와 연관된 요소의 현재 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-188">The current value of the element associated with <paramref name="key" />.</span></span></param>
        <summary><span data-ttu-id="393b2-189"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에서 지정한 키와 값이 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-189">Gets the element with the specified key and value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="393b2-190">지정된 키와 값의 요소를 포함하는 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-190">An <see cref="T:System.Object" /> containing the element with the specified key and value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-191">이 메서드의 기본 구현은 반환 `currentValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-191">The default implementation of this method returns `currentValue`.</span></span> <span data-ttu-id="393b2-192">지정된 된 요소를 검색할 때 추가 작업을 수행 하려면 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-192">It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</span></span>  
  
 <span data-ttu-id="393b2-193">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-193">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-194">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-194">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-195">이 메서드를 기본 표준 동작을 실행할 때 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-195">This method allows implementers to define processes that must be performed when executing the standard Get behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-196">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-196">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-197"><see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> 기본에서 검색 된 값을 반환 하기 전에 수행할 프로세스를 지정 수 <see cref="T:System.Collections.Hashtable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-197"><see cref="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)" /> can be used to specify processes to perform before returning the value retrieved from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-198">예를 들어, 구현자 수를 다른 형식으로 반환 하기 전에 값을 캐스팅 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-198">For example, implementers can cast the value into another type before returning it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnInsert">
      <MemberSignature Language="C#" Value="protected virtual void OnInsert (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsert(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsert (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsert(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsert : obj * obj -&gt; unit&#xA;override this.OnInsert : obj * obj -&gt; unit" Usage="dictionaryBase.OnInsert (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-199">삽입할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-199">The key of the element to insert.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-200">삽입할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-200">The value of the element to insert.</span></span></param>
        <summary><span data-ttu-id="393b2-201"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 새 요소를 삽입하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-201">Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-202">이 메서드의 기본 구현은 지정된 된 요소를 삽입 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-202">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</span></span>  
  
 <span data-ttu-id="393b2-203">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-203">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-204">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-204">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-205">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-205">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-206">이 메서드를 내부에 요소를 삽입 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-206">This method allows implementers to define processes that must be performed before inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-207">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-207">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-208"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 표준 Insert 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> 표준 삽입 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-208"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span></span>  
  
<span data-ttu-id="393b2-209">예를 들어, 어떤 유형의 개체를 삽입할 수 구현자를 제한할 수는 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-209">For example, implementers can restrict which types of objects can be inserted into the <see cref="T:System.Collections.Hashtable" />.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsertComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInsertComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsertComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsertComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsertComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsertComplete : obj * obj -&gt; unit&#xA;override this.OnInsertComplete : obj * obj -&gt; unit" Usage="dictionaryBase.OnInsertComplete (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-210">삽입할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-210">The key of the element to insert.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-211">삽입할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-211">The value of the element to insert.</span></span></param>
        <summary><span data-ttu-id="393b2-212"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 새 요소를 삽입한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-212">Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-213">이 메서드의 기본 구현은 지정된 된 요소를 삽입 한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-213">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</span></span>  
  
 <span data-ttu-id="393b2-214">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-214">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-215">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-215">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-216">이 메서드를 기본 요소를 삽입 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-216">This method allows implementers to define processes that must be performed after inserting the element into the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-217">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-217">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-218"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> 표준 Insert 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> 표준 삽입 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-218"><see cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" /> is invoked after the standard Insert behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnRemove">
      <MemberSignature Language="C#" Value="protected virtual void OnRemove (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemove(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemove (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemove(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemove : obj * obj -&gt; unit&#xA;override this.OnRemove : obj * obj -&gt; unit" Usage="dictionaryBase.OnRemove (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-219">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-219">The key of the element to remove.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-220">제거할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-220">The value of the element to remove.</span></span></param>
        <summary><span data-ttu-id="393b2-221"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에서 요소를 제거하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-221">Performs additional custom processes before removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-222">이 메서드의 기본 구현은 지정된 된 요소를 제거 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-222">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</span></span>  
  
 <span data-ttu-id="393b2-223">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-223">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-224">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-224">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-225">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-225">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-226">이 메서드를 기본 요소를 제거 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-226">This method allows implementers to define processes that must be performed before removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-227">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-227">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-228"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 표준 제거 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> 표준 제거 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-228"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span></span>  
  
<span data-ttu-id="393b2-229">로 인해 구현자 항상 예외를 throw 하 여 요소의 제거를 방지할 수는 예를 들어 <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-229">For example, implementers can prevent removal of elements by always throwing an exception in <see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClear" />
      </Docs>
    </Member>
    <Member MemberName="OnRemoveComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveComplete (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveComplete(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveComplete (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveComplete(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveComplete : obj * obj -&gt; unit&#xA;override this.OnRemoveComplete : obj * obj -&gt; unit" Usage="dictionaryBase.OnRemoveComplete (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-230">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-230">The key of the element to remove.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-231">제거할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-231">The value of the element to remove.</span></span></param>
        <summary><span data-ttu-id="393b2-232"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에서 요소를 제거한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-232">Performs additional custom processes after removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-233">이 메서드의 기본 구현은 지정된 된 요소를 제거한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-233">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</span></span>  
  
 <span data-ttu-id="393b2-234">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-234">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-235">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-235">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-236">이 메서드를 기본 요소를 제거한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-236">This method allows implementers to define processes that must be performed after removing the element from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-237">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-237">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-238"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> 표준 제거 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> 표준 제거 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-238"><see cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)" /> is invoked after the standard Remove behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnClearComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnSet">
      <MemberSignature Language="C#" Value="protected virtual void OnSet (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSet(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSet (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSet(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSet : obj * obj * obj -&gt; unit&#xA;override this.OnSet : obj * obj * obj -&gt; unit" Usage="dictionaryBase.OnSet (key, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-239">찾을 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-239">The key of the element to locate.</span></span></param>
        <param name="oldValue"><span data-ttu-id="393b2-240"><paramref name="key" />와 연관된 요소의 이전 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-240">The old value of the element associated with <paramref name="key" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="393b2-241"><paramref name="key" />와 연관된 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-241">The new value of the element associated with <paramref name="key" />.</span></span></param>
        <summary><span data-ttu-id="393b2-242"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 값을 설정하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-242">Performs additional custom processes before setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-243">이 메서드의 기본 구현은 지정된 된 요소를 설정 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-243">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</span></span>  
  
 <span data-ttu-id="393b2-244">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-244">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-245">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-245">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-246">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-246">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-247">이 메서드를 기본 지정된 된 요소를 설정 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-247">This method allows implementers to define processes that must be performed before setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-248">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-248">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-249"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 표준 집합 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> 표준 집합 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-249"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span>  
  
<span data-ttu-id="393b2-250">예를 들어, 내에서 검사를 수행 하 여 값을 덮어쓸 수 구현자를 제한할 수 <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-250">For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnSetComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSetComplete (object key, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetComplete(object key, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetComplete (key As Object, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetComplete(System::Object ^ key, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSetComplete : obj * obj * obj -&gt; unit&#xA;override this.OnSetComplete : obj * obj * obj -&gt; unit" Usage="dictionaryBase.OnSetComplete (key, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-251">찾을 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-251">The key of the element to locate.</span></span></param>
        <param name="oldValue"><span data-ttu-id="393b2-252"><paramref name="key" />와 연관된 요소의 이전 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-252">The old value of the element associated with <paramref name="key" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="393b2-253"><paramref name="key" />와 연관된 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-253">The new value of the element associated with <paramref name="key" />.</span></span></param>
        <summary><span data-ttu-id="393b2-254"><see cref="T:System.Collections.DictionaryBase" /> 인스턴스에 값을 설정한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-254">Performs additional custom processes after setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-255">이 메서드의 기본 구현은 지정한 요소를 설정한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-255">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</span></span>  
  
 <span data-ttu-id="393b2-256">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-256">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-257">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-257">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-258">이 메서드를 내부에서 지정된 된 요소를 설정한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-258">This method allows implementers to define processes that must be performed after setting the specified element in the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-259">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-259">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-260"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> 표준 집합 동작 전에 호출 되 고 <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> 표준 집합 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-260"><see cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnValidate">
      <MemberSignature Language="C#" Value="protected virtual void OnValidate (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidate(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidate (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidate(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnValidate : obj * obj -&gt; unit&#xA;override this.OnValidate : obj * obj -&gt; unit" Usage="dictionaryBase.OnValidate (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-261">유효성을 검사할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-261">The key of the element to validate.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-262">유효성을 검사할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-262">The value of the element to validate.</span></span></param>
        <summary><span data-ttu-id="393b2-263">지정한 키와 값을 가지는 요소의 유효성을 검사할 때 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-263">Performs additional custom processes when validating the element with the specified key and value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-264">이 메서드의 기본 구현은 지정된 된 요소의 유효성을 검사할 때 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-264">The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.</span></span>  
  
 <span data-ttu-id="393b2-265">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.DictionaryBase.Dictionary%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.DictionaryBase.InnerHashtable%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-265">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-266">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-266">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-267">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-267">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="393b2-268">이 메서드를 기본 표준 동작을 실행할 때 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-268">This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <see cref="T:System.Collections.Hashtable" />.</span></span> <span data-ttu-id="393b2-269">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-269">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="393b2-270"><see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> 컬렉션에 허용 되는 개체의 유형에 제한이 적용 하려면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-270"><see cref="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)" /> can be used to impose restrictions on the type of objects that are accepted into the collection.</span></span> <span data-ttu-id="393b2-271">기본 구현에서는 <see langword="null" /> 에 추가 하거나 기본 제거할 <see cref="T:System.Collections.Hashtable" />합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-271">The default implementation prevents <see langword="null" /> from being added to or removed from the underlying <see cref="T:System.Collections.Hashtable" />.</span></span></para></block>
        <altmember cref="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-272"><see cref="T:System.Collections.DictionaryBase" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-272">Gets a value indicating whether access to a <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="393b2-273"><see cref="T:System.Collections.DictionaryBase" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-273"><see langword="true" /> if access to the <see cref="T:System.Collections.DictionaryBase" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="393b2-274">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-274">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-275"><xref:System.Collections.DictionaryBase> 개체가 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-275">A <xref:System.Collections.DictionaryBase> object is not synchronized.</span></span> <span data-ttu-id="393b2-276">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.DictionaryBase> 를 사용 하 여 클래스를 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-276">Derived classes can provide a synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-277">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-277">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="393b2-278">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-278">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="393b2-279">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-279">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-280">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-280">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="393b2-281">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-281">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-282"><see cref="T:System.Collections.DictionaryBase" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-282">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="393b2-283"><see cref="T:System.Collections.DictionaryBase" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-283">An object that can be used to synchronize access to the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-284">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.DictionaryBase> 를 사용 하 여 클래스를 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-284">Derived classes can provide their own synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="393b2-285">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.ICollection.SyncRoot%2A> 의 속성을 <xref:System.Collections.DictionaryBase> 개체에 직접를 <xref:System.Collections.DictionaryBase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-285">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.DictionaryBase> object, not directly on the <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="393b2-286">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-286">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="393b2-287">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.DictionaryBase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-287">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.DictionaryBase> object.</span></span>  
  
 <span data-ttu-id="393b2-288">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-288">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="393b2-289">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-289">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="393b2-290">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-290">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-291">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-291">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.DictionaryBase#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/source2.cs#3)]
 [!code-vb[System.Collections.DictionaryBase#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/source2.vb#3)]  
  
 <span data-ttu-id="393b2-292">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-292">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
        <altmember cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-293">추가할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-293">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="393b2-294">추가할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-294">The value of the element to add.</span></span></param>
        <summary><span data-ttu-id="393b2-295">지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.DictionaryBase" />에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-295">Adds an element with the specified key and value into the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-296">개체의 상태와 해당 해시 코드 값 간에 상관 관계가 있는 일반적으로 쓰일 수 없습니다 키로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-296">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="393b2-297">예를 들어 <xref:System.String> 개체 보다는 <xref:System.Text.StringBuilder> 키로 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-297">For example, <xref:System.String> objects are better than <xref:System.Text.StringBuilder> objects for use as keys.</span></span>  
  
 <span data-ttu-id="393b2-298">사용할 수도 있습니다는 <xref:System.Collections.IDictionary.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.DictionaryBase>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-298">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="393b2-299">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.DictionaryBase>설정의 <xref:System.Collections.IDictionary.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-299">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="393b2-300">반면,는 <xref:System.Collections.IDictionary.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-300">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="393b2-301">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-301">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-302">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-302">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="393b2-303"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-303"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="393b2-304">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.DictionaryBase" />에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-304">An element with the same key already exists in the <see cref="T:System.Collections.DictionaryBase" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="393b2-305"><see cref="T:System.Collections.DictionaryBase" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-305">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
<span data-ttu-id="393b2-306">또는</span><span class="sxs-lookup"><span data-stu-id="393b2-306">-or-</span></span> 
<span data-ttu-id="393b2-307"><see cref="T:System.Collections.DictionaryBase" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-307">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-308"><see cref="T:System.Collections.DictionaryBase" />에서 찾을 수 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-308">The key to locate in the <see cref="T:System.Collections.DictionaryBase" />.</span></span></param>
        <summary><span data-ttu-id="393b2-309"><see cref="T:System.Collections.DictionaryBase" />에 특정 키가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-309">Determines whether the <see cref="T:System.Collections.DictionaryBase" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="393b2-310"><see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.DictionaryBase" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-310"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-311">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-311">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="393b2-312">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0부터 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드 `key` 결정할 여부를 `item` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-312">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="393b2-313">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `key` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-313">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `key` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-314">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-314">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="393b2-315"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-315"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="393b2-316">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="393b2-316">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-317"><see cref="T:System.Collections.DictionaryBase" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-317">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="393b2-318"><see cref="T:System.Collections.DictionaryBase" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-318"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="393b2-319">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-319">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-320">크기가 고정된 된 컬렉션인 컬렉션 만들어지기는 하지만 기존 요소를 수정할 수는 후에 추가 하거나 제거할 요소의 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-320">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="393b2-321">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-321">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="393b2-322">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-322">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-323"><see cref="T:System.Collections.DictionaryBase" /> 개체가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-323">Gets a value indicating whether a <see cref="T:System.Collections.DictionaryBase" /> object is read-only.</span></span></summary>
        <value><span data-ttu-id="393b2-324"><see cref="T:System.Collections.DictionaryBase" /> 개체가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-324"><see langword="true" /> if the <see cref="T:System.Collections.DictionaryBase" /> object is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="393b2-325">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-325">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-326">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-326">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="393b2-327">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-327">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="393b2-328">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-328">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IDictionary::Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-329">가져오거나 설정할 값이 있는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-329">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="393b2-330">지정한 키와 관련된 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-330">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="393b2-331">지정한 키와 관련된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-331">The value associated with the specified key.</span></span> <span data-ttu-id="393b2-332">지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 <see langword="null" />이 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 요소가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-332">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new element using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-333">이 속성은 `myCollection[key]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-333">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="393b2-334">사용할 수도 있습니다는 <xref:System.Collections.IDictionary.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.DictionaryBase>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-334">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="393b2-335">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.DictionaryBase>설정의 <xref:System.Collections.IDictionary.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-335">However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="393b2-336">반면,는 <xref:System.Collections.IDictionary.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-336">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="393b2-337">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-337">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-338">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-338">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="393b2-339"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-339"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="393b2-340">속성이 설정되어 있으며 <see cref="T:System.Collections.DictionaryBase" />가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-340">The property is set and the <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
<span data-ttu-id="393b2-341">또는</span><span class="sxs-lookup"><span data-stu-id="393b2-341">-or-</span></span> 
<span data-ttu-id="393b2-342">속성이 설정되어 있고 <paramref name="key" />가 컬렉션에 없으며 <see cref="T:System.Collections.DictionaryBase" />의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-342">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-343"><see cref="T:System.Collections.ICollection" /> 개체의 키가 포함된 <see cref="T:System.Collections.DictionaryBase" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-343">Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="393b2-344"><see cref="T:System.Collections.ICollection" /> 개체의 키가 포함된 <see cref="T:System.Collections.DictionaryBase" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-344">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-345">에 있는 키의 순서를 <xref:System.Collections.ICollection> 개체 지정 되지 않지만 연결 된 값의 순서와 동일 합니다 <xref:System.Collections.ICollection> 에서 반환 된 개체는 <xref:System.Collections.IDictionary.Values%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="393b2-345">The order of the keys in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated values in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Values%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-346">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 키를 다시 참조 <xref:System.Collections.DictionaryBase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-346">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="393b2-347">따라서를 변경 합니다 <xref:System.Collections.DictionaryBase> 반영 되도록 하려면 계속 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-347">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="393b2-348">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-348">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-349">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하의 속성.</span><span class="sxs-lookup"><span data-stu-id="393b2-349">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="393b2-350">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-350">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="393b2-351"><see cref="T:System.Collections.DictionaryBase" />에서 지정한 키를 가지는 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-351">Removes the element with the specified key from the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-352">경우는 <xref:System.Collections.DictionaryBase> 지정된 된 키를 사용 하 여 요소를 포함 하지 않습니다는 <xref:System.Collections.DictionaryBase> 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-352">If the <xref:System.Collections.DictionaryBase> does not contain an element with the specified key, the <xref:System.Collections.DictionaryBase> remains unchanged.</span></span> <span data-ttu-id="393b2-353">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-353">No exception is thrown.</span></span>  
  
 <span data-ttu-id="393b2-354">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-354">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-355">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하로 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-355">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="393b2-356"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-356"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="393b2-357"><see cref="T:System.Collections.DictionaryBase" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="393b2-357">The <see cref="T:System.Collections.DictionaryBase" /> is read-only.</span></span>  
  
<span data-ttu-id="393b2-358">또는</span><span class="sxs-lookup"><span data-stu-id="393b2-358">-or-</span></span> 
<span data-ttu-id="393b2-359"><see cref="T:System.Collections.DictionaryBase" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-359">The <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="393b2-360">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="393b2-360">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="393b2-361"><see cref="T:System.Collections.ICollection" /> 개체의 값이 포함된 <see cref="T:System.Collections.DictionaryBase" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-361">Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></summary>
        <value><span data-ttu-id="393b2-362"><see cref="T:System.Collections.ICollection" /> 개체의 값이 포함된 <see cref="T:System.Collections.DictionaryBase" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-362">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.DictionaryBase" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-363">에 있는 값의 순서를 <xref:System.Collections.ICollection> 개체는 지정 되지 이지만의 연결된 된 키와 순서가 동일 합니다 <xref:System.Collections.ICollection> 에서 반환 된 개체는 <xref:System.Collections.IDictionary.Keys%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="393b2-363">The order of the values in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated keys in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="393b2-364">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 값을 다시 참조 <xref:System.Collections.DictionaryBase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-364">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.DictionaryBase> object.</span></span> <span data-ttu-id="393b2-365">따라서를 변경 합니다 <xref:System.Collections.DictionaryBase> 반영 되도록 하려면 계속 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-365">Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="393b2-366">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-366">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="393b2-367">다음 코드 예제에서는 구현 합니다 <xref:System.Collections.DictionaryBase> 클래스를 사용 하 여 구현에는 사전을 만듭니다 <xref:System.String> 키와 값을 <xref:System.String.Length%2A> 5 자 이하의 속성.</span><span class="sxs-lookup"><span data-stu-id="393b2-367">The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.</span></span>  
  
 [!code-cpp[System.Collections.DictionaryBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CPP/dictionarybase.cpp#1)]
 [!code-csharp[System.Collections.DictionaryBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.DictionaryBase/CS/dictionarybase.cs#1)]
 [!code-vb[System.Collections.DictionaryBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.DictionaryBase/VB/dictionarybase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.IDictionary.Keys" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="393b2-368"><see cref="T:System.Collections.IEnumerator" />를 반복하는 <see cref="T:System.Collections.DictionaryBase" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-368">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.DictionaryBase" />.</span></span></summary>
        <returns><span data-ttu-id="393b2-369"><see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.DictionaryBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-369">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="393b2-370">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-370">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="393b2-371">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-371">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="393b2-372">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-372">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="393b2-373">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-373">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="393b2-374"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-374"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="393b2-375">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-375">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="393b2-376">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-376">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="393b2-377"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-377"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="393b2-378"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-378"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="393b2-379">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-379">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="393b2-380">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-380">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="393b2-381">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-381">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="393b2-382"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-382">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="393b2-383">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-383">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="393b2-384">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-384">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="393b2-385">컬렉션 사이 수정 된 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 고 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효화 된 경우에로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-385">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="393b2-386">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-386">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="393b2-387">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-387">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="393b2-388">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-388">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="393b2-389">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="393b2-389">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>