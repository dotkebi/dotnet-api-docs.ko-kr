<Type Name="IList" FullName="System.Collections.IList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae17b03994606bf2c1e86152b7259e8442ea8944" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58682739" /></Metadata><TypeSignature Language="C#" Value="public interface IList : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IList implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IList" />
  <TypeSignature Language="VB.NET" Value="Public Interface IList&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public interface class IList : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IList = interface&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="eaeaa-101">인덱스로 각각 액세스할 수 있는 제네릭이 아닌 개체 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-101">Represents a non-generic collection of objects that can be individually accessed by index.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-102"><xref:System.Collections.IList> 하위 항목을 <xref:System.Collections.ICollection> 인터페이스 및 모든 제네릭이 아닌 목록의 기본 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-102"><xref:System.Collections.IList> is a descendant of the <xref:System.Collections.ICollection> interface and is the base interface of all non-generic lists.</span></span> <span data-ttu-id="eaeaa-103"><xref:System.Collections.IList> 세 가지 범주로 나뉩니다. 구현: 읽기 전용, 고정 크기 및 가변 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-103"><xref:System.Collections.IList> implementations fall into three categories: read-only, fixed-size, and variable-size.</span></span> <span data-ttu-id="eaeaa-104">읽기 전용 <xref:System.Collections.IList> 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-104">A read-only <xref:System.Collections.IList> cannot be modified.</span></span> <span data-ttu-id="eaeaa-105">고정 크기 <xref:System.Collections.IList> 를 추가 하거나 제거할 요소의 수 없도록 없지만 기존 요소를 수정할 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-105">A fixed-size <xref:System.Collections.IList> does not allow the addition or removal of elements, but it allows the modification of existing elements.</span></span> <span data-ttu-id="eaeaa-106">가변 크기 <xref:System.Collections.IList> 를 추가, 제거 및 요소를 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-106">A variable-size <xref:System.Collections.IList> allows the addition, removal, and modification of elements.</span></span>  
  
 <span data-ttu-id="eaeaa-107">이 인터페이스의 제네릭 버전을 참조 하세요. <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-107">For the generic version of this interface, see <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-108">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-108">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#01)]
 [!code-vb[System.Collections.IList_Implementation#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.ArrayList" />
    <altmember cref="T:System.Collections.ICollection" />
    <altmember cref="T:System.Collections.Generic.IList`1" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj -&gt; int" Usage="iList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="eaeaa-109"><see cref="T:System.Collections.IList" />에 추가할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-109">The object to add to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="eaeaa-110"><see cref="T:System.Collections.IList" />에 항목을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-110">Adds an item to the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="eaeaa-111">새 요소가 삽입된 위치 또는 -1(항목이 컬렉션에 삽입되지 않았음을 나타냄)입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-111">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="eaeaa-112">다음 예제에서는 구현의 <xref:System.Collections.IList> 인터페이스를 간단 하 고 고정 크기 목록을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-112">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple, fixed-size list.</span></span> <span data-ttu-id="eaeaa-113">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-113">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-114"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-114">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="eaeaa-115">또는</span><span class="sxs-lookup"><span data-stu-id="eaeaa-115">-or-</span></span> 
<span data-ttu-id="eaeaa-116"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-116">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit" Usage="iList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eaeaa-117"><see cref="T:System.Collections.IList" />에서 항목을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-117">Removes all items from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-118">이 메서드를 구현 하는 방법에 다를 수 있습니다는 <xref:System.Collections.ICollection.Count%2A?displayProperty=nameWithType> 컬렉션의 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-118">Implementations of this method can vary in how they handle the <xref:System.Collections.ICollection.Count%2A?displayProperty=nameWithType> and the capacity of a collection.</span></span> <span data-ttu-id="eaeaa-119">일반적으로 개수는 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-119">Typically, the count is set to zero, and references to other objects from elements of the collection are also released.</span></span> <span data-ttu-id="eaeaa-120">변경 되지 않은 상태로 남아 있을 수 또는 용량 0 또는 기본값을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-120">The capacity can be set to zero or a default value, or it can remain unchanged.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-121">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-121">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-122">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-122">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-123"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-123">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool" Usage="iList.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="eaeaa-124"><see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-124">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="eaeaa-125"><see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-125">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="eaeaa-126"><see cref="T:System.Object" />가 <see cref="T:System.Collections.IList" />에 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-126"><see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-127">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-127">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="eaeaa-128">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-128">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-129">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-129">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-130">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-130">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : obj -&gt; int" Usage="iList.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="eaeaa-131"><see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-131">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="eaeaa-132"><see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-132">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="eaeaa-133">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-133">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-134">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-134">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="eaeaa-135">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-135">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-136">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-136">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-137">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-137">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * obj -&gt; unit" Usage="iList.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="eaeaa-138"><paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-138">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="eaeaa-139"><see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-139">The object to insert into the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="eaeaa-140">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-140">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-141">`index`가 <xref:System.Collections.IList>의 항목 수와 같으면 `value`가 끝에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-141">If `index` equals the number of items in the <xref:System.Collections.IList>, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="eaeaa-142">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-142">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="eaeaa-143">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-143">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="eaeaa-144">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-144">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-145">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-145">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-146">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-146">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eaeaa-147"><paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-147"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-148"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-148">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="eaeaa-149">또는</span><span class="sxs-lookup"><span data-stu-id="eaeaa-149">-or-</span></span> 
<span data-ttu-id="eaeaa-150"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-150">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="eaeaa-151"><paramref name="value" />가 <see cref="T:System.Collections.IList" />에서 null 참조인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-151"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eaeaa-152"><see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-152">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="eaeaa-153"><see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-153"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-154">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-154">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-155">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-155">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-156">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-156">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eaeaa-157"><see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-157">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="eaeaa-158"><see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-158"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-159">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-159">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-160">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-160">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-161">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-161">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="eaeaa-162">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-162">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="eaeaa-163">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-163">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="eaeaa-164">지정한 인덱스의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-164">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-165">이 속성은 `myCollection[index]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-165">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="eaeaa-166">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.IList.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-166">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property.</span></span> <span data-ttu-id="eaeaa-167">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.IList.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-167">Visual Basic implements <xref:System.Collections.IList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-168">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-168">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-169">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-169">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eaeaa-170"><paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-170"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-171">속성이 설정되어 있으며 <see cref="T:System.Collections.IList" />가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-171">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit" Usage="iList.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="eaeaa-172"><see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-172">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="eaeaa-173"><see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-173">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-174">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-174">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="eaeaa-175">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-175">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="eaeaa-176">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-176">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="eaeaa-177">`value`가 <xref:System.Collections.IList>에 없으면 <xref:System.Collections.IList>가 변경되지 않은 상태로 유지되고 예외는 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-177">If `value` is not found in the <xref:System.Collections.IList>, the <xref:System.Collections.IList> remains unchanged and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-178">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-178">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-179">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-179">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-180"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-180">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="eaeaa-181">또는</span><span class="sxs-lookup"><span data-stu-id="eaeaa-181">-or-</span></span> 
<span data-ttu-id="eaeaa-182"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-182">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="eaeaa-183">하는 경우 <paramref name="value" /> 목록에 있지는 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 메서드 아무 작업도 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-183">If <paramref name="value" /> is not in the list, the <see cref="M:System.Collections.IList.Remove(System.Object)" /> method should do nothing.</span></span> <span data-ttu-id="eaeaa-184">특히, 예외를 throw 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-184">In particular, it should not throw an exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="eaeaa-185">제거할 항목의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-185">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="eaeaa-186">지정한 인덱스에서 <see cref="T:System.Collections.IList" /> 항목을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-186">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaeaa-187">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-187">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="eaeaa-188">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-188">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="eaeaa-189">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-189">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaeaa-190">다음 예제에서는 구현의 <xref:System.Collections.IList> 만들기 단순 목록, 고정 크기 목록에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-190">The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list.</span></span> <span data-ttu-id="eaeaa-191">이 코드는에 대 한 보다 큰 예제의 일부는 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-191">This code is part of a larger example for the <xref:System.Collections.IList> interface.</span></span>  
  
 [!code-csharp[System.Collections.IList_Implementation#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.IList_Implementation/cs/Program.cs#02)]
 [!code-vb[System.Collections.IList_Implementation#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.IList_Implementation/vb/Program.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="eaeaa-192"><paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-192"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eaeaa-193"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="eaeaa-193">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
<span data-ttu-id="eaeaa-194">또는</span><span class="sxs-lookup"><span data-stu-id="eaeaa-194">-or-</span></span> 
<span data-ttu-id="eaeaa-195"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="eaeaa-195">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>