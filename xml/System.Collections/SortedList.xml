<Type Name="SortedList" FullName="System.Collections.SortedList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="271ac854e1b964dc4a7fda27f3e2688911d54ff8" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56072899" /></Metadata><TypeSignature Language="C#" Value="public class SortedList : ICloneable, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.SortedList" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements ICloneable, IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : ICloneable, System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface IDictionary&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="68ee6-101">키를 기준으로 정렬되고 키와 인덱스로 액세스할 수 있는 키/값 쌍의 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="68ee6-102">A <xref:System.Collections.SortedList> 요소가 있는 요소와 같은 키를 통해 액세스할 수 있습니다 <xref:System.Collections.IDictionary> 구현 또는 모든 요소와 같은 해당 인덱스로 <xref:System.Collections.IList> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-102">A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="68ee6-103">사용 하는 권장 하지 않습니다는 `SortedList` 새로운 개발에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-103">We don't recommend that you use the `SortedList` class for new development.</span></span> <span data-ttu-id="68ee6-104">제네릭 사용 하는 권장 대신 <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-104">Instead, we recommend that you use the generic <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="68ee6-105">자세한 내용은 [제네릭이 아닌 컬렉션을 사용 하지 않아야](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) github입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-105">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

 <span data-ttu-id="68ee6-106"><xref:System.Collections.SortedList> 목록, 즉 키에 대 한 하나의 배열 요소의 스토어로 두 배열 및 연관 된 값에 대 한 다른 배열 개체를 내부적으로 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-106">A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.</span></span> <span data-ttu-id="68ee6-107">각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-107">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="68ee6-108">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-108">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="68ee6-109">용량을 <xref:System.Collections.SortedList> 개체가 요소의 수는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-109">The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-110">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-110">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="68ee6-111">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A> 하거나 설정 하 여는 <xref:System.Collections.SortedList.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-111">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span>  
  
 <span data-ttu-id="68ee6-112">**.NET framework에만 해당:** 에 대 한 매우 큰 <xref:System.Collections.SortedList> 개체를 설정 하 여 64 비트 시스템에서 2 십억 요소에 최대 용량을 늘릴 수 있습니다는 `enabled` 특성을 [ `<gcAllowVeryLargeObjects>` ](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) 구성 요소를 `true` 에 런타임 환경입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-112">**.NET Framework only:** For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="68ee6-113">요소의 <xref:System.Collections.SortedList> 개체 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라는 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-113">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span> <span data-ttu-id="68ee6-114">두 경우 모두를 <xref:System.Collections.SortedList> 중복 키를 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-114">In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.</span></span>  
  
 <span data-ttu-id="68ee6-115">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-115">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-116">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-116">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-117">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-117">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-118">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-118">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-119">에 대 한 작업을 <xref:System.Collections.SortedList> 개체에 대 한 작업 보다 느린 경향이 <xref:System.Collections.Hashtable> 정렬로 인해 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-119">Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting.</span></span> <span data-ttu-id="68ee6-120">그러나는 <xref:System.Collections.SortedList> 연결 된 키 또는 인덱스를 통해 값에 대 한 액세스를 허용 하 여 더 많은 유연성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-120">However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</span></span>  
  
 <span data-ttu-id="68ee6-121">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-121">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="68ee6-122">이 컬렉션의 인덱스는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-122">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="68ee6-123">합니다 `foreach` C# 언어의 (`for each` Visual basic에서) 컬렉션 요소의 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-123">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="68ee6-124">각 요소의 이후를 <xref:System.Collections.SortedList> 개체는 키/값 쌍, 요소 형식이 키의 형식 또는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-124">Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="68ee6-125">요소 형식은 아니라 <xref:System.Collections.DictionaryEntry>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-125">Rather, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="68ee6-126">예:</span><span class="sxs-lookup"><span data-stu-id="68ee6-126">For example:</span></span>  
  
 [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]
 [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="68ee6-127">`foreach` 문을 열거자를 컬렉션에 쓰는 것부터 읽기만 허용 하는 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-127">The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-128">다음 코드 예제를 만들고 초기화 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체 및 해당 키와 값을 출력 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-128">The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.</span></span>  
  
 [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="68ee6-129">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-129">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="68ee6-130">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-130">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="68ee6-131"><see cref="T:System.Collections.SortedList" /> 개체 수 여러 판독기 동시에 지원할으로 컬렉션을 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-131">A <see cref="T:System.Collections.SortedList" /> object can support multiple readers concurrently, as long as the collection is not modified.</span></span> <span data-ttu-id="68ee6-132">스레드로부터 안전을 보장 하려면 합니다 <see cref="T:System.Collections.SortedList" />에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다 <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-132">To guarantee the thread safety of the <see cref="T:System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> method.</span></span>  
  
<span data-ttu-id="68ee6-133">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-133">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68ee6-134">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-134">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68ee6-135">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-135">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-136">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-136">Performing Culture-Insensitive String Operations in Collections</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="68ee6-137"><see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-137">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-138">비어 있는 상태이고 기본 초기 용량을 가지며 <see cref="T:System.Collections.SortedList" /> 개체에 추가된 각 키에서 구현하는 <see cref="T:System.IComparable" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-138">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-139">각 키를 구현 해야 합니다 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체.</span><span class="sxs-lookup"><span data-stu-id="68ee6-139">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-140">요소에 따라 정렬 되는 <xref:System.IComparable> 구현에 추가 된 각 키의는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-140">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-141">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-141">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-142">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-142">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-143">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-143">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-144">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-144">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-145">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-145">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-146">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-146">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="68ee6-147">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-147">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="68ee6-148">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-148">-or-</span></span> 
 <span data-ttu-id="68ee6-149">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-149"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <summary><span data-ttu-id="68ee6-150">비어 있고 기본 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-150">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-151">요소는 정렬에 따라 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-151">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="68ee6-152">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 그리고 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-152">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-153">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-153">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-154">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-154">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-155">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-155">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-156">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-156">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-157">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-157">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-158">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-158">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="68ee6-159">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.SortedList" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-159">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="68ee6-160">지정된 사전에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 갖고 있으며 각 키에서 구현된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.IComparable" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-160">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-161">각 키를 구현 해야 합니다 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체.</span><span class="sxs-lookup"><span data-stu-id="68ee6-161">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-162">요소에 따라 정렬 되는 <xref:System.IComparable> 구현에 추가 된 각 키의는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-162">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-163">A <xref:System.Collections.Hashtable> 개체의 한 예로 <xref:System.Collections.IDictionary> 이 생성자에 전달할 수 있는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-163">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="68ee6-164">새 <xref:System.Collections.SortedList> 키와 값에 저장 된 복사본을 포함 하는 개체는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-164">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="68ee6-165">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-165">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-166">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-166">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-167">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-167">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-168">이 생성자는 (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-168">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-169">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-169">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-170"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-170"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68ee6-171"><paramref name="d" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-171">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-172">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-172">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int initialCapacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList initialCapacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity"><span data-ttu-id="68ee6-173"><see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 초기 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-173">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></param>
        <summary><span data-ttu-id="68ee6-174">비어 있는 상태이고 지정된 초기 용량을 가지며 <see cref="T:System.Collections.SortedList" /> 개체에 추가된 각 키에서 구현된 <see cref="T:System.IComparable" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.SortedList" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-174">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-175">각 키를 구현 해야 합니다 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체.</span><span class="sxs-lookup"><span data-stu-id="68ee6-175">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-176">요소에 따라 정렬 되는 <xref:System.IComparable> 구현에 추가 된 각 키의는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-176">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-177">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-177">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-178">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-178">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-179">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-179">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-180">이 생성자는 O (`n`) 작업, 여기서 `n` 는 `initialCapacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-180">This constructor is an O(`n`) operation, where `n` is `initialCapacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-181">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-181">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-182"><paramref name="initialCapacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-182"><paramref name="initialCapacity" /> is less than zero.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68ee6-183">지정된 <paramref name="initialCapacity" />의 <see cref="T:System.Collections.SortedList" /> 개체를 만드는 데 사용할 수 있는 메모리가 충분하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-183">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-184">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-184">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer * int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (comparer, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="68ee6-185">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-185">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="68ee6-186">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-186">-or-</span></span> 
 <span data-ttu-id="68ee6-187">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-187"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <param name="capacity"><span data-ttu-id="68ee6-188"><see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 초기 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-188">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></param>
        <summary><span data-ttu-id="68ee6-189">비어 있고 지정된 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-189">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-190">요소는 정렬에 따라 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-190">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="68ee6-191">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 그리고 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-191">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-192">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-192">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-193">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-193">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-194">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-194">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-195">이 생성자는 O (`n`) 작업, 여기서 `n` 는 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-195">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-196">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-196">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-197"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-197"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68ee6-198">지정된 <paramref name="capacity" />의 <see cref="T:System.Collections.SortedList" /> 개체를 만드는 데 사용할 수 있는 메모리가 충분하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-198">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-199">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-199">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary * System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (d, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="68ee6-200">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.SortedList" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-200">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <param name="comparer"><span data-ttu-id="68ee6-201">키를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-201">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="68ee6-202">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-202">-or-</span></span> 
 <span data-ttu-id="68ee6-203">각 키의 <see cref="T:System.IComparable" /> 구현을 사용하면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-203"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span></span></param>
        <summary><span data-ttu-id="68ee6-204">지정된 사전에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 갖고 있으며 지정된 <see cref="T:System.Collections.SortedList" /> 인터페이스에 따라 정렬되는 <see cref="T:System.Collections.IComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-204">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-205">요소는 정렬에 따라 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-205">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="68ee6-206">경우는 `comparer` 매개 변수는 `null`, <xref:System.IComparable> 각 키의 구현이 사용 됩니다; 그리고 따라서 각 키를 구현 해야 합니다는 <xref:System.IComparable> 인터페이스의 다른 모든 키와 비교할 수는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-206">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-207">A <xref:System.Collections.Hashtable> 개체의 한 예로 <xref:System.Collections.IDictionary> 이 생성자에 전달할 수 있는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-207">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="68ee6-208">새 <xref:System.Collections.SortedList> 키와 값에 저장 된 복사본을 포함 하는 개체는 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-208">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="68ee6-209">용량을 <xref:System.Collections.SortedList> 개체가 요소 수는는 <xref:System.Collections.SortedList> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-209">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="68ee6-210">요소에 추가 되는 <xref:System.Collections.SortedList>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-210">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="68ee6-211">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-211">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-212">이 생성자는 (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `d`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-212">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-213">다음 코드 예제를 사용 하 여 컬렉션을 다른 만듭니다 <xref:System.Collections.SortedList> 생성자 컬렉션 동작의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-213">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-214"><paramref name="d" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-214"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68ee6-215"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="d" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-215"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-216">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-216">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-217">추가할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-217">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="68ee6-218">추가할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-218">The value of the element to add.</span></span> <span data-ttu-id="68ee6-219">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-219">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="68ee6-220">지정한 키와 값을 가진 요소를 <see cref="T:System.Collections.SortedList" /> 개체에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-220">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-221">삽입 지점을 명시적으로 나 기본적으로 선택 된 비교자에 따라 결정 됩니다 때는 <xref:System.Collections.SortedList> 개체가 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-221">The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.</span></span>  
  
 <span data-ttu-id="68ee6-222">경우 <xref:System.Collections.SortedList.Count%2A> 가 이미 <xref:System.Collections.SortedList.Capacity%2A>의 용량을 <xref:System.Collections.SortedList> 개체 자동으로 내부 배열을 다시 할당 하 여 증가 하 고 새 요소가 추가 되기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-222">If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="68ee6-223">사용할 수도 있습니다는 <xref:System.Collections.SortedList.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.SortedList> 개체 (예를 들어 `myCollection["myNonexistentKey"] = myValue`).</span><span class="sxs-lookup"><span data-stu-id="68ee6-223">You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="68ee6-224">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.SortedList>설정의 <xref:System.Collections.SortedList.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-224">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="68ee6-225">반면,는 <xref:System.Collections.SortedList.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-225">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="68ee6-226">요소의 <xref:System.Collections.SortedList> 개체 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라는 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-226">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="68ee6-227">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-227">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="68ee6-228">이 메서드는 O (`n`) 정렬 되지 않은 데이터에 대 한 작업 위치 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-228">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="68ee6-229">o (로그 `n`)는 새 요소가 목록 끝에 추가 되 면 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-229">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="68ee6-230">삽입으로 크기가 조정 작업이 O (`n`).</span><span class="sxs-lookup"><span data-stu-id="68ee6-230">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-231">다음 코드 예제에서는 요소를 추가 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-231">The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-232"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-232"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68ee6-233">지정한 <paramref name="key" />를 가진 요소가 이미 <see cref="T:System.Collections.SortedList" /> 개체에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-233">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span></span>  
  
<span data-ttu-id="68ee6-234">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-234">-or-</span></span> 
<span data-ttu-id="68ee6-235"><see cref="T:System.Collections.SortedList" />가 <see cref="T:System.IComparable" /> 인터페이스를 사용하도록 설정되었으나 <paramref name="key" />는 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-235">The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-236"><see cref="T:System.Collections.SortedList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-236">The <see cref="T:System.Collections.SortedList" /> is read-only.</span></span>  
  
<span data-ttu-id="68ee6-237">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-237">-or-</span></span> 
<span data-ttu-id="68ee6-238"><see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-238">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68ee6-239"><see cref="T:System.Collections.SortedList" />에 요소를 추가할 수 있는 메모리가 충분하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-239">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="68ee6-240">비교자에서 예외를 throw하는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-240">The comparer throws an exception.</span></span></exception>
        <altmember cref="P:System.Collections.SortedList.Item(System.Object)" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.SortedList.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-241"><see cref="T:System.Collections.SortedList" /> 개체의 용량을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-241">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-242"><see cref="T:System.Collections.SortedList" /> 개체에 포함될 수 있는 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-242">The number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-243"><xref:System.Collections.SortedList.Capacity%2A> 요소의 수는 <xref:System.Collections.SortedList> 개체를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-243"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="68ee6-244"><xref:System.Collections.SortedList.Count%2A> 에 실제로 있는 요소의 수는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-244"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-245"><xref:System.Collections.SortedList.Capacity%2A> 항상 보다 크거나 같음 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-245"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="68ee6-246">하는 경우 <xref:System.Collections.SortedList.Count%2A> 초과 <xref:System.Collections.SortedList.Capacity%2A> 요소를 추가 하는 동안 용량을 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-246">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="68ee6-247">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.SortedList.TrimToSize%2A> 하거나 설정 하 여는 <xref:System.Collections.SortedList.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-247">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="68ee6-248">때 변수의 <xref:System.Collections.SortedList.Capacity%2A> 설정 된 명시적으로 지정된 된 용량에 맞게 내부 배열을 다시 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-248">When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="68ee6-249">이 속성의 값을 검색 하는 것은 O(1) 작업; 속성을 설정 하는 O (`n`) 작업을 여기서 `n` 새 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-249">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-250">할당된 값이 <see cref="T:System.Collections.SortedList" /> 개체의 현재 요소 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-250">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68ee6-251">시스템에 사용 가능한 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-251">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-252"><see cref="T:System.Collections.SortedList" /> 개체에서 요소를 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-252">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-253"><xref:System.Collections.SortedList.Count%2A> 0으로 설정 된 한 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-253"><xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="68ee6-254"><xref:System.Collections.SortedList.Capacity%2A> 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-254"><xref:System.Collections.SortedList.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="68ee6-255">용량을 다시 설정 하는 <xref:System.Collections.SortedList> 개체를 호출 <xref:System.Collections.SortedList.TrimToSize%2A> 설정할지를 <xref:System.Collections.SortedList.Capacity%2A> 속성을 직접.</span><span class="sxs-lookup"><span data-stu-id="68ee6-255">To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly.</span></span> <span data-ttu-id="68ee6-256">빈 트리밍 <xref:System.Collections.SortedList> 의 용량을 설정 합니다 <xref:System.Collections.SortedList> 기본 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-256">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="68ee6-257">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-257">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-258">다음 코드 예제를 사용 하지 않는 부분을 트리밍하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 값의 선택을 취소 하는 방법과 개체는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-258">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-259"><see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-259">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="68ee6-260">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-260">-or-</span></span> 
<span data-ttu-id="68ee6-261"><see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-261">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="sortedList.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-262"><see cref="T:System.Collections.SortedList" /> 개체의 단순 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-262">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-263"><see cref="T:System.Collections.SortedList" /> 개체의 단순 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-263">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-264">컬렉션의 단순 복사본은 참조 형식 또는 값 형식 이지만 참조에서 참조 하는 개체를 복사 하지 않습니다 컬렉션의 요소를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-264">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.</span></span> <span data-ttu-id="68ee6-265">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-265">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="68ee6-266">반면, 컬렉션의 전체 복사본을 요소를 복사 하 고 뿐만 아니라 요소에 의해 직접 또는 간접적으로 참조 하는 모든 것.</span><span class="sxs-lookup"><span data-stu-id="68ee6-266">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="68ee6-267">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-267">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="sortedList.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-268"><see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-268">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="68ee6-269"><see cref="T:System.Collections.SortedList" /> 개체에 특정 키가 포함되어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-269">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="68ee6-270"><see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="key" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-270"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-271">요소의 <xref:System.Collections.SortedList> 개체 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라는 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-271">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="68ee6-272"><xref:System.Collections.SortedList.Contains%2A>는 <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-272"><xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68ee6-273">와 동일 하 게 작동 <xref:System.Collections.SortedList.ContainsKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-273">It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-274">이 메서드는 이진 검색 알고리즘을 사용 하 여 따라서이 메서드는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-274">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-275">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="68ee6-275">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="68ee6-276">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-276">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-277">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 특정 요소를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-277">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-278"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-278"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="68ee6-279">비교자에서 예외를 throw하는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-279">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-280">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-280">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-281"><see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-281">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="68ee6-282"><see cref="T:System.Collections.SortedList" /> 개체에 특정 키가 포함되어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-282">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="68ee6-283"><see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="key" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-283"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-284">요소의 <xref:System.Collections.SortedList> 개체 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라는 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-284">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="68ee6-285">이 메서드가 동일 하 게 동작 합니다 <xref:System.Collections.SortedList.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-285">This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="68ee6-286">이 메서드는 이진 검색 알고리즘을 사용 하 여 따라서이 메서드는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-286">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-287">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="68ee6-287">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="68ee6-288">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-288">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-289">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 특정 요소를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-289">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-290"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-290"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="68ee6-291">비교자에서 예외를 throw하는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-291">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-292">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-292">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68ee6-293"><see cref="T:System.Collections.SortedList" /> 개체에서 찾을 값입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-293">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="68ee6-294">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-294">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="68ee6-295"><see cref="T:System.Collections.SortedList" /> 개체에 특정 값이 포함되어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-295">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="68ee6-296"><see cref="T:System.Collections.SortedList" /> 개체에 지정된 <paramref name="value" />를 가진 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-296"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-297">요소의 값을 <xref:System.Collections.SortedList> 사용 하 여 지정 된 값 개체는 비교는 <xref:System.Object.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-297">The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="68ee6-298">이 메서드는; 선형 검색을 수행합니다. 따라서 평균 실행 시간에 비례 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-298">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="68ee6-299">즉,이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-299">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-300">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="68ee6-300">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="68ee6-301">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-301">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-302">다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 <xref:System.Collections.SortedList> 특정 요소를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-302">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-303">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-303">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="sortedList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="68ee6-304"><see cref="T:System.Array" />에서 복사한 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-304">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span></span> <span data-ttu-id="68ee6-305"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-305">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="68ee6-306"><paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-306">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="68ee6-307"><see cref="T:System.Collections.SortedList" /> 요소를 지정한 배열 인덱스에서 시작하여 1차원 <see cref="T:System.Array" /> 개체에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-307">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-308">키/값 쌍을 복사할 합니다 <xref:System.Array> 열거자가 반복는 동일한 순서로 개체는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-308">The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-309">에 있는 키를 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Keys.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-309">To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="68ee6-310">값만 복사 하는 <xref:System.Collections.SortedList>를 사용 하 여 `SortedList.Values.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-310">To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="68ee6-311">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-311">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-312">다음 코드 예제에서 값을 복사 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체를 1 차원으로 <xref:System.Array> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-312">The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.</span></span>  
  
 [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-313"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-313"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-314"><paramref name="arrayIndex" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-314"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68ee6-315"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-315"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="68ee6-316">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-316">-or-</span></span> 
<span data-ttu-id="68ee6-317">소스 <see cref="T:System.Collections.SortedList" /> 개체의 요소 수가 <paramref name="arrayIndex" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-317">The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68ee6-318">소스 <see cref="T:System.Collections.SortedList" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-318">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.SortedList.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.SortedList.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-319"><see cref="T:System.Collections.SortedList" /> 개체에 포함된 요소 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-319">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-320"><see cref="T:System.Collections.SortedList" /> 개체에 포함된 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-320">The number of elements contained in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-321">각 요소는으로 액세스할 수 있는 키/값 쌍을 <xref:System.Collections.DictionaryEntry> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-321">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="68ee6-322"><xref:System.Collections.SortedList.Capacity%2A> 요소의 수는 <xref:System.Collections.SortedList> 개체를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-322"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="68ee6-323"><xref:System.Collections.SortedList.Count%2A> 에 실제로 있는 요소의 수는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-323"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-324"><xref:System.Collections.SortedList.Capacity%2A> 항상 보다 크거나 같음 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-324"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="68ee6-325">하는 경우 <xref:System.Collections.SortedList.Count%2A> 초과 <xref:System.Collections.SortedList.Capacity%2A> 요소를 추가 하는 동안 용량을 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-325">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="68ee6-326">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-326">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetByIndex">
      <MemberSignature Language="C#" Value="public virtual object GetByIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetByIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetByIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByIndex (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetByIndex(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetByIndex : int -&gt; obj&#xA;override this.GetByIndex : int -&gt; obj" Usage="sortedList.GetByIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68ee6-327">가져올 값의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-327">The zero-based index of the value to get.</span></span></param>
        <summary><span data-ttu-id="68ee6-328"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-328">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-329"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-329">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-330">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-330">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-331">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-331">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-332">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-332">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-333">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-333">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-334">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-334">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-335">다음 코드 예제에서는 키 하나 또는 모두를 가져오는 방법을 보여 줍니다 또는 값을 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-335">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-336"><paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-336"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-337"><see cref="T:System.Collections.IDictionaryEnumerator" /> 개체를 반복하는 <see cref="T:System.Collections.SortedList" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-337">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-338"><see cref="T:System.Collections.IDictionaryEnumerator" /> 개체의 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-338">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-339">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-339">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="68ee6-340">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-340">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="68ee6-341">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-341">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="68ee6-342">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-342">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="68ee6-343"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-343"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="68ee6-344">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-344">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="68ee6-345">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-345">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-346"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-346"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="68ee6-347"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-347"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="68ee6-348">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-348">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="68ee6-349">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-349">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="68ee6-350">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-350">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="68ee6-351"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-351">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-352">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-352">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="68ee6-353">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-353">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="68ee6-354">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-354">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="68ee6-355">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-355">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="68ee6-356">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-356">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="68ee6-357">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-357">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual object GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKey (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : int -&gt; obj&#xA;override this.GetKey : int -&gt; obj" Usage="sortedList.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68ee6-358">가져올 키의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-358">The zero-based index of the key to get.</span></span></param>
        <summary><span data-ttu-id="68ee6-359"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-359">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-360"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-360">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-361">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-361">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-362">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-362">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-363">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-363">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-364">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-364">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-365">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-365">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-366">다음 코드 예제에서는 키 하나 또는 모두를 가져오는 방법을 보여 줍니다 또는 값을 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-366">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-367"><paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-367"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetKeyList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetKeyList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKeyList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetKeyList();" />
      <MemberSignature Language="F#" Value="abstract member GetKeyList : unit -&gt; System.Collections.IList&#xA;override this.GetKeyList : unit -&gt; System.Collections.IList" Usage="sortedList.GetKeyList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-368"><see cref="T:System.Collections.SortedList" /> 개체의 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-368">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-369"><see cref="T:System.Collections.IList" /> 개체의 키가 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-369">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-370">반환 된 <xref:System.Collections.IList> 개체는 읽기 전용 보기의 키를 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-370">The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-371">기본 수정한 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.IList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-371">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="68ee6-372">반환된 된 요소의 <xref:System.Collections.IList> 의 키와 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-372">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-373">이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Keys%2A> 속성인 하지만 반환을 <xref:System.Collections.IList> 개체 대신는 <xref:System.Collections.ICollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-373">This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="68ee6-374">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-374">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-375">다음 코드 예제에서는 키 하나 또는 모두를 가져오는 방법을 보여 줍니다 또는 값을 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-375">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
      </Docs>
    </Member>
    <Member MemberName="GetValueList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetValueList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetValueList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetValueList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetValueList();" />
      <MemberSignature Language="F#" Value="abstract member GetValueList : unit -&gt; System.Collections.IList&#xA;override this.GetValueList : unit -&gt; System.Collections.IList" Usage="sortedList.GetValueList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-376"><see cref="T:System.Collections.SortedList" /> 개체의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-376">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-377"><see cref="T:System.Collections.IList" /> 개체의 값이 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-377">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-378">반환 된 <xref:System.Collections.IList> 개체는 값의 읽기 전용 보기를 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-378">The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-379">기본 수정한 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.IList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-379">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="68ee6-380">반환된 된 요소의 <xref:System.Collections.IList> 의 값과 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-380">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-381">이 메서드는 비슷합니다는 <xref:System.Collections.SortedList.Values%2A> 속성인 하지만 반환을 <xref:System.Collections.IList> 개체 대신는 <xref:System.Collections.ICollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-381">This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="68ee6-382">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-382">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-383">다음 코드 예제에서는 키 하나 또는 모두를 가져오는 방법을 보여 줍니다 또는 값을 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-383">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <altmember cref="P:System.Collections.SortedList.Values" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : obj -&gt; int&#xA;override this.IndexOfKey : obj -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-384"><see cref="T:System.Collections.SortedList" /> 개체에서 찾을 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-384">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span></param>
        <summary><span data-ttu-id="68ee6-385"><see cref="T:System.Collections.SortedList" /> 개체의 지정된 키 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-385">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-386"><paramref name="key" />가 <see cref="T:System.Collections.SortedList" /> 개체에 있으면 <paramref name="key" /> 매개 변수의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-386">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-387">요소를 <xref:System.Collections.SortedList> 개체 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라를 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현.</span><span class="sxs-lookup"><span data-stu-id="68ee6-387">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="68ee6-388">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-388">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-389">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-389">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-390">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-390">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-391">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-391">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-392">이 메서드는 이진 검색 알고리즘을 사용 하 여 따라서이 메서드는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-392">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-393">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="68ee6-393">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="68ee6-394">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-394">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-395">다음 코드 예제에는 키 또는 값의 인덱스를 확인 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-395">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-396"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-396"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="68ee6-397">비교자에서 예외를 throw하는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-397">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-398">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-398">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public virtual int IndexOfValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfValue (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfValue : obj -&gt; int&#xA;override this.IndexOfValue : obj -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68ee6-399"><see cref="T:System.Collections.SortedList" /> 개체에서 찾을 값입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-399">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="68ee6-400">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-400">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="68ee6-401">지정한 값이 <see cref="T:System.Collections.SortedList" /> 개체에서 맨 처음 발견되는 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-401">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-402"><paramref name="value" />가 <see cref="T:System.Collections.SortedList" /> 개체에 있으면 <paramref name="value" /> 매개 변수가 맨 처음 발견되는 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-402">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-403">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-403">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-404">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-404">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-405">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-405">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-406">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-406">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-407">요소의 값을 <xref:System.Collections.SortedList> 사용 하 여 지정 된 값과 비교할는 <xref:System.Object.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-407">The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="68ee6-408">이 메서드는 한 선형 검색 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-408">This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-409">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드를 `item` 항목이 있는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="68ee6-409">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="68ee6-410">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-410">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-411">다음 코드 예제에는 키 또는 값의 인덱스를 확인 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-411">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-412">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-412">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.SortedList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-413"><see cref="T:System.Collections.SortedList" /> 개체의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-413">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="68ee6-414"><see cref="T:System.Collections.SortedList" /> 개체의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-414"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="68ee6-415">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-415">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-416">크기가 고정된 된 컬렉션인 컬렉션 만들어지기는 하지만 기존 요소를 수정할 수는 후에 추가 하거나 제거할 요소의 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-416">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="68ee6-417">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-417">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="68ee6-418">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-418">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.SortedList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-419"><see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-419">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span></summary>
        <value><span data-ttu-id="68ee6-420"><see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-420"><see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="68ee6-421">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-421">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-422">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-422">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="68ee6-423">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-423">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="68ee6-424">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-424">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.SortedList.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-425"><see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-425">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="68ee6-426"><see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-426"><see langword="true" /> if access to the <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="68ee6-427">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-427">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-428">스레드로부터 안전을 보장 하려면를 <xref:System.Collections.SortedList> 개체를 반환 하는 래퍼를 통해 모든 작업을 완료 해야 합니다 <xref:System.Collections.SortedList.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-428">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="68ee6-429">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-429">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68ee6-430">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-430">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68ee6-431">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-431">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-432">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-432">The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="68ee6-433">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-433">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 <span data-ttu-id="68ee6-434">다음 코드 예제에는 동기화 하는 방법을 보여 줍니다를 <xref:System.Collections.SortedList> 개체를 결정 합니다. 여부는 <xref:System.Collections.SortedList> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-434">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.SortedList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-435">가져오거나 설정할 값과 관련된 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-435">The key associated with the value to get or set.</span></span></param>
        <summary><span data-ttu-id="68ee6-436"><see cref="T:System.Collections.SortedList" /> 개체의 특정 키와 연관된 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-436">Gets or sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-437"><paramref name="key" />가 있으면 <see cref="T:System.Collections.SortedList" /> 개체의 <paramref name="key" /> 매개 변수와 연관된 값이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-437">The value associated with the <paramref name="key" /> parameter in the <see cref="T:System.Collections.SortedList" /> object, if <paramref name="key" /> is found; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-438">사용할 수는 <xref:System.Collections.SortedList.Item%2A> 구문을 지정 하 여 컬렉션의 특정 요소에 액세스 하는 속성: `myCollection[key]`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-438">You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="68ee6-439">존재 하지 않는 키 값을 설정 하 여 새 요소를 추가 하려면이 속성을 이용할 수 있습니다 합니다 <xref:System.Collections.SortedList> 개체 (예를 들어 `myCollection["myNonexistentKey"] = myValue)`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-439">You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue)`.</span></span> <span data-ttu-id="68ee6-440">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.SortedList>설정의 <xref:System.Collections.SortedList.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-440">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="68ee6-441">반면,는 <xref:System.Collections.SortedList.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-441">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="68ee6-442">키 일 수 없습니다 `null`에 있지만 값 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-442">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="68ee6-443">구분 하기 위해 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 합니다 <xref:System.Collections.SortedList.Contains%2A> 메서드 또는 <xref:System.Collections.SortedList.ContainsKey%2A> 확인 하는 방법 키 목록에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-443">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="68ee6-444">요소의 <xref:System.Collections.SortedList> 키를 기준으로 정렬 됩니다 특정에 따라 하나 <xref:System.Collections.IComparer> 구현 될 때 지정 되는 <xref:System.Collections.SortedList> 생성 인지에 따라는 <xref:System.IComparable> 자체 키를 기준으로 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-444">The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="68ee6-445">C# 언어 사용 합니다 [ `this` ](~/docs/csharp/language-reference/keywords/this.md) 구현 하는 대신 인덱서를 정의 하는 키워드는 <xref:System.Collections.SortedList.Keys%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-445">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A> property.</span></span> <span data-ttu-id="68ee6-446">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.SortedList.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-446">Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="68ee6-447">이 속성의 값을 검색 하는 (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-447">Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="68ee6-448">속성을 설정 하는 O (로그 `n`) 키가 이미 있는 경우 작업은 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-448">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="68ee6-449">키 목록에 없는 경우 속성을 설정 하는 O (`n`) 작업을 정렬 되지 않은 데이터 또는 O (로그 `n`) 새 요소가 목록 끝에 추가 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="68ee6-449">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="68ee6-450">삽입으로 크기가 조정 작업이 O (`n`).</span><span class="sxs-lookup"><span data-stu-id="68ee6-450">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-451"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-451"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-452">속성이 설정되어 있고 <see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-452">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="68ee6-453">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-453">-or-</span></span> 
<span data-ttu-id="68ee6-454">속성이 설정되어 있고 <paramref name="key" />가 컬렉션에 없으며 <see cref="T:System.Collections.SortedList" />의 크기가 고정된 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-454">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="68ee6-455"><see cref="T:System.Collections.SortedList" />에 요소를 추가할 수 있는 메모리가 충분하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-455">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="68ee6-456">비교자에서 예외를 throw하는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-456">The comparer throws an exception.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-457">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-457">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.SortedList.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-458"><see cref="T:System.Collections.SortedList" /> 개체의 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-458">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-459"><see cref="T:System.Collections.ICollection" /> 개체의 키가 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-459">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-460">합니다 <xref:System.Collections.ICollection> 개체는 읽기 전용 보기의 키를 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-460">The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-461">기본 수정한 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-461">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="68ee6-462">요소를 <xref:System.Collections.ICollection> 의 키와 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-462">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-463">이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetKeyList%2A> 메서드이지만 반환을 <xref:System.Collections.ICollection> 개체 대신는 <xref:System.Collections.IList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-463">This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="68ee6-464">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-464">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Values" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-465">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-465">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="68ee6-466">제거할 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-466">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="68ee6-467"><see cref="T:System.Collections.SortedList" /> 개체에서 지정된 키를 가진 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-467">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-468"><xref:System.Collections.SortedList> 개체에 지정한 키를 가진 요소가 없으면 <xref:System.Collections.SortedList>가 변경되지 않은 상태로 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-468">If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged.</span></span> <span data-ttu-id="68ee6-469">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-469">No exception is thrown.</span></span>  
  
 <span data-ttu-id="68ee6-470">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-470">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="68ee6-471">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-471">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="68ee6-472">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-472">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="68ee6-473">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-473">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-474">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-474">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-475"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-475"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-476"><see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-476">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="68ee6-477">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-477">-or-</span></span> 
<span data-ttu-id="68ee6-478"><see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-478">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-479">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-479">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68ee6-480">제거할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-480">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="68ee6-481"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-481">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-482">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-482">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-483">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-483">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-484">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-484">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-485">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-485">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-486">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-486">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="68ee6-487">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-487">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="68ee6-488">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-488">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="68ee6-489">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-489">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-490">다음 코드 예제에서 요소를 제거 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-490">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-491"><paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-491"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-492"><see cref="T:System.Collections.SortedList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-492">The <see cref="T:System.Collections.SortedList" /> is read-only.</span></span>  
  
<span data-ttu-id="68ee6-493">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-493">-or-</span></span> 
<span data-ttu-id="68ee6-494"><see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-494">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetByIndex">
      <MemberSignature Language="C#" Value="public virtual void SetByIndex (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetByIndex(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetByIndex (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetByIndex(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetByIndex : int * obj -&gt; unit&#xA;override this.SetByIndex : int * obj -&gt; unit" Usage="sortedList.SetByIndex (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68ee6-495"><paramref name="value" />를 저장할 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-495">The zero-based index at which to save <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="68ee6-496"><see cref="T:System.Object" /> 개체에 저장할 <see cref="T:System.Collections.SortedList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-496">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span></span> <span data-ttu-id="68ee6-497">값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-497">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="68ee6-498"><see cref="T:System.Collections.SortedList" /> 개체의 지정한 인덱스에서 값을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-498">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-499">인덱스 순서는 정렬 순서를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-499">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="68ee6-500">에 삽입 된 요소에 추가 되 면 <xref:System.Collections.SortedList> 올바른 정렬에서 순서, 인덱싱 및 그에 따라 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-500">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="68ee6-501">요소가 제거 되 면 인덱싱도 그에 따라 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-501">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="68ee6-502">요소는 추가 하거나 제거 하는 특정 키/값 쌍의 인덱스 변경 될 수 있습니다 따라서는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-502">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-503">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-503">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-504">다음 코드 예제에서 기존 요소의 값을 교체 하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-504">The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68ee6-505"><paramref name="index" />가 <see cref="T:System.Collections.SortedList" /> 개체의 유효한 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-505"><paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList Synchronized(class System.Collections.SortedList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (list As SortedList) As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ Synchronized(System::Collections::SortedList ^ list);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.SortedList -&gt; System.Collections.SortedList" Usage="System.Collections.SortedList.Synchronized list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.SortedList" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="68ee6-506">동기화할 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-506">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span></span></param>
        <summary><span data-ttu-id="68ee6-507"><see cref="T:System.Collections.SortedList" /> 개체에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-507">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <returns><span data-ttu-id="68ee6-508"><see cref="T:System.Collections.SortedList" /> 개체에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-508">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-509">스레드로부터 안전을 보장 하려면를 <xref:System.Collections.SortedList> 개체에이 래퍼를 통해 모든 작업을 완료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-509">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="68ee6-510">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-510">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68ee6-511">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-511">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68ee6-512">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-512">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-513">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-513">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="68ee6-514">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-514">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="68ee6-515">다음 코드 예제에는 동기화 하는 방법을 보여 줍니다를 <xref:System.Collections.SortedList> 개체를 결정 합니다. 여부는 <xref:System.Collections.SortedList> 동기화 되 고 동기화를 사용 하 여 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-515">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68ee6-516"><paramref name="list" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-516"><paramref name="list" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.SortedList.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-517"><see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-517">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-518"><see cref="T:System.Collections.SortedList" /> 개체에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-518">An object that can be used to synchronize access to the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-519">동기화 된 버전을 만들려면 합니다 <xref:System.Collections.SortedList> 개체는 <xref:System.Collections.SortedList.Synchronized%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="68ee6-519">To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span> <span data-ttu-id="68ee6-520">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.SortedList> 를 사용 하 여는 <xref:System.Collections.SortedList.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-520">However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property.</span></span> <span data-ttu-id="68ee6-521">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.SortedList.SyncRoot%2A> 의 합니다 <xref:System.Collections.SortedList>에서 직접는 <xref:System.Collections.SortedList>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-521">The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="68ee6-522">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-522">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="68ee6-523">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-523">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="68ee6-524">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-524">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68ee6-525">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-525">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68ee6-526">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-526">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-527">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.SortedList.SyncRoot%2A> 열거 하는 동안 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-527">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="68ee6-528">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-528">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-529"><see cref="T:System.Collections.IEnumerator" />를 반복하는 <see cref="T:System.Collections.SortedList" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-529">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span></span></summary>
        <returns><span data-ttu-id="68ee6-530"><see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.SortedList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-530">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-531">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="68ee6-531">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="68ee6-532">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-532">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="68ee6-533">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-533">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="68ee6-534">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-534">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="68ee6-535">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-535">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="68ee6-536"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-536"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="68ee6-537">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-537">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="68ee6-538">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-538">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-539"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-539"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="68ee6-540"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-540"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="68ee6-541">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-541">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="68ee6-542">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-542">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="68ee6-543">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-543">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="68ee6-544"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-544">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="68ee6-545">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-545">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="68ee6-546">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-546">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="68ee6-547">컬렉션 사이 수정 된 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 고 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효화 된 경우에로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-547">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="68ee6-548">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-548">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68ee6-549">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-549">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68ee6-550">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-550">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="68ee6-551">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-551">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="sortedList.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68ee6-552">용량을 <see cref="T:System.Collections.SortedList" /> 개체의 실제 요소 수로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-552">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-553">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-553">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span>  
  
 <span data-ttu-id="68ee6-554">다시 설정 하는 <xref:System.Collections.SortedList> 개체를 초기 상태로 호출 합니다 <xref:System.Collections.SortedList.Clear%2A> 메서드를 호출 하기 전에 <xref:System.Collections.SortedList.TrimToSize%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-554">To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>.</span></span> <span data-ttu-id="68ee6-555">빈 트리밍 <xref:System.Collections.SortedList> 의 용량을 설정 합니다 <xref:System.Collections.SortedList> 기본 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-555">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="68ee6-556">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.SortedList.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-556">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68ee6-557">다음 코드 예제를 사용 하지 않는 부분을 트리밍하는 방법을 보여 줍니다는 <xref:System.Collections.SortedList> 개체 및 해당 값의 선택을 취소 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-557">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68ee6-558"><see cref="T:System.Collections.SortedList" /> 개체가 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="68ee6-558">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span></span>  
  
<span data-ttu-id="68ee6-559">또는</span><span class="sxs-lookup"><span data-stu-id="68ee6-559">-or-</span></span> 
<span data-ttu-id="68ee6-560"><see cref="T:System.Collections.SortedList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-560">The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.SortedList.Clear" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.SortedList.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68ee6-561"><see cref="T:System.Collections.SortedList" /> 개체의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-561">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span></span></summary>
        <value><span data-ttu-id="68ee6-562"><see cref="T:System.Collections.ICollection" /> 개체의 값이 포함된 <see cref="T:System.Collections.SortedList" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-562">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68ee6-563"><xref:System.Collections.ICollection> 개체는 값의 읽기 전용 보기를 <xref:System.Collections.SortedList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-563">The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="68ee6-564">기본 수정한 <xref:System.Collections.SortedList> 에 바로 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-564">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="68ee6-565">요소를 <xref:System.Collections.ICollection> 값과 같은 순서로 정렬 되는 <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="68ee6-565">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="68ee6-566">이 속성은 비슷합니다는 <xref:System.Collections.SortedList.GetValueList%2A> 메서드이지만 반환을 <xref:System.Collections.ICollection> 개체 대신는 <xref:System.Collections.IList> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-566">This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="68ee6-567">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="68ee6-567">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md"><span data-ttu-id="68ee6-568">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="68ee6-568">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>