<Type Name="CollectionBase" FullName="System.Collections.CollectionBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b9269faa53d9214593af6d55af7d426702c85d6" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58731019" /></Metadata><TypeSignature Language="C#" Value="public abstract class CollectionBase : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CollectionBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.CollectionBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CollectionBase&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionBase abstract : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type CollectionBase = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bb8c6-101">강력한 형식의 컬렉션에 대한 <see langword="abstract" /> 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-101">Provides the <see langword="abstract" /> base class for a strongly typed collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  <span data-ttu-id="bb8c6-102">사용 하는 권장 하지 않습니다는 `CollectionBase` 새로운 개발에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-102">We don't recommend that you use the `CollectionBase` class for new development.</span></span> <span data-ttu-id="bb8c6-103">제네릭 사용 하는 권장 대신 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-103">Instead, we recommend that you use the generic <xref:System.Collections.ObjectModel.Collection%601> class.</span></span> <span data-ttu-id="bb8c6-104">자세한 내용은 [제네릭이 아닌 컬렉션을 사용 하지 않아야](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) github입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-104">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

<span data-ttu-id="bb8c6-105"><xref:System.Collections.CollectionBase> 인스턴스는 항상 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-105">A <xref:System.Collections.CollectionBase> instance is always modifiable.</span></span> <span data-ttu-id="bb8c6-106">참조 <xref:System.Collections.ReadOnlyCollectionBase> 이 클래스의 읽기 전용 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-106">See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.</span></span>  
  
 <span data-ttu-id="bb8c6-107">용량을 <xref:System.Collections.CollectionBase> 요소입니다는 <xref:System.Collections.CollectionBase> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-107">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="bb8c6-108">요소에 추가 되는 <xref:System.Collections.CollectionBase>, 용량을 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-108">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="bb8c6-109">설정 하 여 용량을 줄일 수 있습니다는 <xref:System.Collections.CollectionBase.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-109">The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-110">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-110">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="bb8c6-111">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-111">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="bb8c6-112">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-112">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="bb8c6-113">이 구현은 동기화를 제공 하지 않습니다 스레드로부터 안전한 래퍼를 <see cref="T:System.Collections.CollectionBase" />, 파생된 클래스의 자체 동기화 된 버전을 만들 수 있지만 <see cref="T:System.Collections.CollectionBase" /> 사용 하 여를 <see cref="P:System.Collections.ICollection.SyncRoot" /> 속성.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-113">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.CollectionBase" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.CollectionBase" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="bb8c6-114">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-114">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="bb8c6-115">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-115">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="bb8c6-116">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-116">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-117">이 기본 클래스는 강력한 형식의 사용자 지정 컬렉션을 만들 수는 쉽게 수행할 수 있도록 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-117">This base class is provided to make it easier for implementers to create a strongly typed custom collection.</span></span> <span data-ttu-id="bb8c6-118">구현자는 자체를 만드는 대신이 기본 클래스를 확장 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-118">Implementers are encouraged to extend this base class instead of creating their own.</span></span></para></block>
    <altmember cref="T:System.Collections.ArrayList" />
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.ReadOnlyCollectionBase" />
    <altmember cref="N:System.Collections.Generic" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="bb8c6-119">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="bb8c6-119">Performing Culture-Insensitive String Operations</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bb8c6-120"><see cref="T:System.Collections.CollectionBase" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-120">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CollectionBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CollectionBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bb8c6-121">기본 초기 용량을 사용하여 <see cref="T:System.Collections.CollectionBase" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-121">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class with the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-122">용량을 <xref:System.Collections.CollectionBase> 요소입니다는 <xref:System.Collections.CollectionBase> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-122">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="bb8c6-123">요소에 추가 되는 <xref:System.Collections.CollectionBase>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-123">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="bb8c6-124">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.CollectionBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-124">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="bb8c6-125">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-125">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.CollectionBase.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CollectionBase (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CollectionBase(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.CollectionBase : int -&gt; System.Collections.CollectionBase" Usage="new System.Collections.CollectionBase capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="bb8c6-126">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-126">The number of elements that the new list can initially store.</span></span></param>
        <summary><span data-ttu-id="bb8c6-127">지정된 용량을 사용하여 <see cref="T:System.Collections.CollectionBase" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-127">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class with the specified capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-128">용량을 <xref:System.Collections.CollectionBase> 요소입니다는 <xref:System.Collections.CollectionBase> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-128">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="bb8c6-129">요소에 추가 되는 <xref:System.Collections.CollectionBase>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-129">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="bb8c6-130">컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.CollectionBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-130">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="bb8c6-131">이 생성자는 O (`n`) 작업, 여기서 `n` 는 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-131">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.CollectionBase.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.CollectionBase.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-132"><see cref="T:System.Collections.CollectionBase" />에 포함될 수 있는 요소의 수를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-132">Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.</span></span></summary>
        <value><span data-ttu-id="bb8c6-133"><see cref="T:System.Collections.CollectionBase" />에 포함될 수 있는 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-133">The number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-134"><xref:System.Collections.CollectionBase.Capacity%2A> 요소의 수는 <xref:System.Collections.CollectionBase> 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-134"><xref:System.Collections.CollectionBase.Capacity%2A> is the number of elements that the <xref:System.Collections.CollectionBase> can store.</span></span> <span data-ttu-id="bb8c6-135"><xref:System.Collections.CollectionBase.Count%2A> 에 실제로 있는 요소의 수는 <xref:System.Collections.CollectionBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-135"><xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="bb8c6-136"><xref:System.Collections.CollectionBase.Capacity%2A> 항상 보다 크거나 같음 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-136"><xref:System.Collections.CollectionBase.Capacity%2A> is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>.</span></span> <span data-ttu-id="bb8c6-137">하는 경우 <xref:System.Collections.CollectionBase.Count%2A> 초과 <xref:System.Collections.CollectionBase.Capacity%2A> 요소를 추가 하는 동안 용량을 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-137">If <xref:System.Collections.CollectionBase.Count%2A> exceeds <xref:System.Collections.CollectionBase.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="bb8c6-138">설정 하 여 용량을 줄일 수 있습니다는 <xref:System.Collections.CollectionBase.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-138">The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="bb8c6-139">때 변수의 <xref:System.Collections.CollectionBase.Capacity%2A> 설정 된 명시적으로 지정된 된 용량에 맞게 내부 배열을 다시 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-139">When the value of <xref:System.Collections.CollectionBase.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="bb8c6-140">이 속성의 값을 검색 하는 것은 O(1) 작업; 속성을 설정 하는 O (`n`) 작업을 여기서 `n` 새 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-140">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bb8c6-141"><see cref="P:System.Collections.CollectionBase.Capacity" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 작은 값으로 설정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-141"><see cref="P:System.Collections.CollectionBase.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="bb8c6-142">시스템에 사용 가능한 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-142">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="collectionBase.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bb8c6-143"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에서 개체를 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-143">Removes all objects from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="bb8c6-144">이 메서드는 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-144">This method cannot be overridden.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-145"><xref:System.Collections.CollectionBase.Count%2A> 0으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-145"><xref:System.Collections.CollectionBase.Count%2A> is set to zero.</span></span>  
  
 <span data-ttu-id="bb8c6-146">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-146">This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-147">사용자 지정 작업을 수행 하기 전 또는 컬렉션 지워진 후 보호 된 재정의 <xref:System.Collections.CollectionBase.OnClear%2A> 또는 <xref:System.Collections.CollectionBase.OnClearComplete%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-147">To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.CollectionBase.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-148"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 포함된 요소의 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-148">Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="bb8c6-149">이 속성은 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-149">This property cannot be overridden.</span></span></summary>
        <value><span data-ttu-id="bb8c6-150"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 포함된 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-150">The number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span>  
  
<span data-ttu-id="bb8c6-151">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-151">Retrieving the value of this property is an O(1) operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bb8c6-152">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-152">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collectionBase.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bb8c6-153"><see cref="T:System.Collections.CollectionBase" /> 인스턴스를 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-153">Returns an enumerator that iterates through the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="bb8c6-154"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-154">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-155">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="bb8c6-155">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="bb8c6-156">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-156">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="bb8c6-157">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-157">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="bb8c6-158">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-158">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="bb8c6-159">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-159">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="bb8c6-160"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-160"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="bb8c6-161">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-161">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="bb8c6-162">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-162">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-163"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-163"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="bb8c6-164"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-164"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="bb8c6-165">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-165">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="bb8c6-166">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-166">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="bb8c6-167">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-167">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="bb8c6-168"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-168">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-169">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-169">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="bb8c6-170">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-170">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="bb8c6-171">컬렉션 사이 수정 된 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 고 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효화 된 경우에로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-171">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="bb8c6-172">열거자는 컬렉션에 독점적으로 액세스할 수 있는 권한이 없으므로 컬렉션을 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-172">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="bb8c6-173">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-173">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="bb8c6-174">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-174">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="bb8c6-175">하는 동안를 <xref:System.Collections.CollectionBase.GetEnumerator%2A> 메서드가 기본적으로 COM 클라이언트에 표시 되지 않는 상속을 <xref:System.Collections.CollectionBase> 클래스를 노출할 수 및 COM 클라이언트에서 원하지 않는 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-175">While the <xref:System.Collections.CollectionBase.GetEnumerator%2A> method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients.</span></span>  
  
 <span data-ttu-id="bb8c6-176">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-176">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-177">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-177">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="InnerList">
      <MemberSignature Language="C#" Value="protected System.Collections.ArrayList InnerList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList InnerList" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.InnerList" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InnerList As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ArrayList ^ InnerList { System::Collections::ArrayList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerList : System.Collections.ArrayList" Usage="System.Collections.CollectionBase.InnerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-178"><see cref="T:System.Collections.ArrayList" /> 인스턴스의 요소 목록을 포함하는 <see cref="T:System.Collections.CollectionBase" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-178">Gets an <see cref="T:System.Collections.ArrayList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="bb8c6-179"><see cref="T:System.Collections.ArrayList" /> 인스턴스 자체를 나타내는 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-179">An <see cref="T:System.Collections.ArrayList" /> representing the <see cref="T:System.Collections.CollectionBase" /> instance itself.</span></span>  
  
<span data-ttu-id="bb8c6-180">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-180">Retrieving the value of this property is an O(1) operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-181">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-181">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="protected System.Collections.IList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList List" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.List" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property List As IList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IList ^ List { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.List : System.Collections.IList" Usage="System.Collections.CollectionBase.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-182"><see cref="T:System.Collections.IList" /> 인스턴스의 요소 목록을 포함하는 <see cref="T:System.Collections.CollectionBase" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-182">Gets an <see cref="T:System.Collections.IList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="bb8c6-183"><see cref="T:System.Collections.IList" /> 인스턴스 자체를 나타내는 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-183">An <see cref="T:System.Collections.IList" /> representing the <see cref="T:System.Collections.CollectionBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-184">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-184">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-185">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-185">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-186">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-186">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClear">
      <MemberSignature Language="C#" Value="protected virtual void OnClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnClear" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClear ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClear();" />
      <MemberSignature Language="F#" Value="abstract member OnClear : unit -&gt; unit&#xA;override this.OnClear : unit -&gt; unit" Usage="collectionBase.OnClear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bb8c6-187"><see cref="T:System.Collections.CollectionBase" /> 인스턴스의 콘텐츠를 지운 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-187">Performs additional custom processes when clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-188">이 메서드의 기본 구현 컬렉션을 지울 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-188">The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</span></span>  
  
 <span data-ttu-id="bb8c6-189">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-189">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-190">프로세스가 실패 하면 컬렉션 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-190">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="bb8c6-191">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-191">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-192">이 메서드를 내부에서 모든 요소를 삭제 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-192">This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-193">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-193">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-194"><see cref="M:System.Collections.CollectionBase.OnClear" /> 표준 일반 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> 표준 지우기 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-194"><see cref="M:System.Collections.CollectionBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span>  
  
<span data-ttu-id="bb8c6-195">예를 들어, 구현자는 전역의 선택을 취소 하 여 삭제의 특정 요소를 제외할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-195">For example, implementers can exempt certain elements from deletion by a global Clear.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnClearComplete" />
        <altmember cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClearComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnClearComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClearComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnClearComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClearComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClearComplete();" />
      <MemberSignature Language="F#" Value="abstract member OnClearComplete : unit -&gt; unit&#xA;override this.OnClearComplete : unit -&gt; unit" Usage="collectionBase.OnClearComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bb8c6-196"><see cref="T:System.Collections.CollectionBase" /> 인스턴스의 내용을 지운 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-196">Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-197">이 메서드의 기본 구현은 컬렉션 지워진 후 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-197">The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</span></span>  
  
 <span data-ttu-id="bb8c6-198">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-198">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-199">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-199">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-200">이 메서드를 내부에서 모든 요소를 삭제 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-200">This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-201">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-201">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-202"><see cref="M:System.Collections.CollectionBase.OnClear" /> 표준 일반 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> 표준 지우기 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-202"><see cref="M:System.Collections.CollectionBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnClear" />
        <altmember cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsert">
      <MemberSignature Language="C#" Value="protected virtual void OnInsert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsert (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsert(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsert : int * obj -&gt; unit&#xA;override this.OnInsert : int * obj -&gt; unit" Usage="collectionBase.OnInsert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-203"><paramref name="value" />를 삽입할 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-203">The zero-based index at which to insert <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="bb8c6-204"><paramref name="index" />에 있는 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-204">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-205"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 새 요소를 삽입하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-205">Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-206">이 메서드의 기본 구현은 지정된 된 요소를 삽입 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-206">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</span></span>  
  
 <span data-ttu-id="bb8c6-207">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-207">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-208">프로세스가 실패 하면 컬렉션 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-208">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="bb8c6-209">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-209">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-210">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-210">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-211">이 메서드를 내부에 요소를 삽입 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-211">This method allows implementers to define processes that must be performed before inserting the element into the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-212">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-212">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-213"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 표준 Insert 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 표준 삽입 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-213"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> is invoked after the standard Insert behavior.</span></span>  
  
<span data-ttu-id="bb8c6-214">예를 들어, 어떤 유형의 개체를 삽입할 수 구현자를 제한할 수는 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-214">For example, implementers can restrict which types of objects can be inserted into the <see cref="T:System.Collections.ArrayList" />.</span></span>  
  
 <span data-ttu-id="bb8c6-215"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 이 메서드 전에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-215"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsertComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInsertComplete (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsertComplete(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsertComplete (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsertComplete(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsertComplete : int * obj -&gt; unit&#xA;override this.OnInsertComplete : int * obj -&gt; unit" Usage="collectionBase.OnInsertComplete (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-216"><paramref name="value" />를 삽입할 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-216">The zero-based index at which to insert <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="bb8c6-217"><paramref name="index" />에 있는 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-217">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-218"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 새 요소를 삽입한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-218">Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-219">이 메서드의 기본 구현은 지정된 된 요소를 삽입 한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-219">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</span></span>  
  
 <span data-ttu-id="bb8c6-220">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-220">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-221">컬렉션 중 하나가 발생 하면 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-221">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="bb8c6-222">프로세스가 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-222">The process fails.</span></span>  
  
-   <span data-ttu-id="bb8c6-223">이 메서드는 예외를 throw 하도록 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-223">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="bb8c6-224">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-224">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-225">이 메서드를 기본 요소를 삽입 한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-225">This method allows implementers to define processes that must be performed after inserting the element into the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-226">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-226">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-227"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 표준 Insert 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 표준 삽입 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-227"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> is invoked after the standard Insert behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnRemove">
      <MemberSignature Language="C#" Value="protected virtual void OnRemove (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemove(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemove (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemove(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemove : int * obj -&gt; unit&#xA;override this.OnRemove : int * obj -&gt; unit" Usage="collectionBase.OnRemove (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-228"><paramref name="value" />를 찾을 수 있는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-228">The zero-based index at which <paramref name="value" /> can be found.</span></span></param>
        <param name="value"><span data-ttu-id="bb8c6-229"><paramref name="index" />에서 제거할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-229">The value of the element to remove from <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-230"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에서 요소를 제거할 때 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-230">Performs additional custom processes when removing an element from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-231">이 메서드의 기본 구현은 지정된 된 요소를 제거 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-231">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</span></span>  
  
 <span data-ttu-id="bb8c6-232">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-232">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-233">프로세스가 실패 하면 컬렉션 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-233">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="bb8c6-234">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-234">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-235">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-235">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-236">이 메서드를 기본 요소를 제거 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-236">This method allows implementers to define processes that must be performed before removing the element from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-237">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-237">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-238"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 표준 제거 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 표준 제거 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-238"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> is invoked after the standard Remove behavior.</span></span>  
  
<span data-ttu-id="bb8c6-239">로 인해 구현자 항상 예외를 throw 하 여 요소의 제거를 방지할 수는 예를 들어 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-239">For example, implementers can prevent removal of elements by always throwing an exception in <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />.</span></span>  
  
 <span data-ttu-id="bb8c6-240"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 이 메서드 전에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-240"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnClear" />
      </Docs>
    </Member>
    <Member MemberName="OnRemoveComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveComplete (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveComplete(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveComplete (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveComplete(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveComplete : int * obj -&gt; unit&#xA;override this.OnRemoveComplete : int * obj -&gt; unit" Usage="collectionBase.OnRemoveComplete (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-241"><paramref name="value" />를 찾을 수 있는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-241">The zero-based index at which <paramref name="value" /> can be found.</span></span></param>
        <param name="value"><span data-ttu-id="bb8c6-242"><paramref name="index" />에서 제거할 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-242">The value of the element to remove from <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-243"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에서 요소를 제거한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-243">Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-244">이 메서드의 기본 구현은 지정된 된 요소를 제거한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-244">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</span></span>  
  
 <span data-ttu-id="bb8c6-245">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-245">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-246">컬렉션 중 하나가 발생 하면 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-246">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="bb8c6-247">프로세스가 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-247">The process fails.</span></span>  
  
-   <span data-ttu-id="bb8c6-248">이 메서드는 예외를 throw 하도록 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-248">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="bb8c6-249">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-249">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-250">이 메서드를 기본 요소를 제거한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-250">This method allows implementers to define processes that must be performed after removing the element from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-251">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-251">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-252"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 표준 제거 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 표준 제거 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-252"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> is invoked after the standard Remove behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnClearComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnSet">
      <MemberSignature Language="C#" Value="protected virtual void OnSet (int index, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSet(int32 index, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSet (index As Integer, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSet(int index, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSet : int * obj * obj -&gt; unit&#xA;override this.OnSet : int * obj * obj -&gt; unit" Usage="collectionBase.OnSet (index, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-253"><paramref name="oldValue" />를 찾을 수 있는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-253">The zero-based index at which <paramref name="oldValue" /> can be found.</span></span></param>
        <param name="oldValue"><span data-ttu-id="bb8c6-254"><paramref name="newValue" />로 바꿀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-254">The value to replace with <paramref name="newValue" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="bb8c6-255"><paramref name="index" />에 있는 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-255">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-256"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 값을 설정하기 전에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-256">Performs additional custom processes before setting a value in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-257">이 메서드의 기본 구현은 지정된 된 요소를 설정 하기 전에 일부 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-257">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</span></span>  
  
 <span data-ttu-id="bb8c6-258">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-258">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-259">프로세스가 실패 하면 컬렉션 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-259">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="bb8c6-260">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-260">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-261">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-261">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-262">이 메서드를 기본 지정된 된 요소를 설정 하기 전에 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-262">This method allows implementers to define processes that must be performed before setting the specified element in the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-263">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-263">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-264"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 표준 집합 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 표준 집합 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-264"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span>  
  
<span data-ttu-id="bb8c6-265">예를 들어, 내에서 검사를 수행 하 여 값을 덮어쓸 수 구현자를 제한할 수 <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-265">For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />.</span></span>  
  
 <span data-ttu-id="bb8c6-266"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 이 메서드 전에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-266"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnSetComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSetComplete (int index, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetComplete(int32 index, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetComplete (index As Integer, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetComplete(int index, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSetComplete : int * obj * obj -&gt; unit&#xA;override this.OnSetComplete : int * obj * obj -&gt; unit" Usage="collectionBase.OnSetComplete (index, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-267"><paramref name="oldValue" />를 찾을 수 있는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-267">The zero-based index at which <paramref name="oldValue" /> can be found.</span></span></param>
        <param name="oldValue"><span data-ttu-id="bb8c6-268"><paramref name="newValue" />로 바꿀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-268">The value to replace with <paramref name="newValue" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="bb8c6-269"><paramref name="index" />에 있는 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-269">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-270"><see cref="T:System.Collections.CollectionBase" /> 인스턴스에 값을 설정한 후에 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-270">Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-271">이 메서드의 기본 구현은 지정한 요소를 설정한 후 작업을 수행 하는 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-271">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</span></span>  
  
 <span data-ttu-id="bb8c6-272">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-272">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-273">컬렉션 중 하나가 발생 하면 이전 상태로 되돌립니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-273">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="bb8c6-274">프로세스가 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-274">The process fails.</span></span>  
  
-   <span data-ttu-id="bb8c6-275">이 메서드는 예외를 throw 하도록 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-275">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="bb8c6-276">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-276">The default implementation of this method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-277">이 메서드를 내부에서 지정된 된 요소를 설정한 후 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-277">This method allows implementers to define processes that must be performed after setting the specified element in the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-278">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-278">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-279"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 표준 집합 동작 전에 호출 되 고 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 표준 집합 동작 후에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-279"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnValidate">
      <MemberSignature Language="C#" Value="protected virtual void OnValidate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnValidate : obj -&gt; unit&#xA;override this.OnValidate : obj -&gt; unit" Usage="collectionBase.OnValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bb8c6-280">유효성을 검사할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-280">The object to validate.</span></span></param>
        <summary><span data-ttu-id="bb8c6-281">값의 유효성을 검사할 때 추가로 사용자 지정 프로세스를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-281">Performs additional custom processes when validating a value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-282">이 메서드의 기본 구현을 결정 하는지 여부를 `value` 됩니다 `null`, 그렇다면 throw <xref:System.ArgumentNullException>.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-282">The default implementation of this method determines whether `value` is `null`, and, if so, throws <xref:System.ArgumentNullException>.</span></span> <span data-ttu-id="bb8c6-283">지정된 된 요소의 유효성이 검사 되 면 추가 작업을 수행 하려면 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-283">It is intended to be overridden by a derived class to perform additional action when the specified element is validated.</span></span>  
  
 <span data-ttu-id="bb8c6-284">반환 된 인스턴스에서만 On \* 메서드가 호출 되는 <xref:System.Collections.CollectionBase.List%2A> 속성인 아니라에서 반환한 인스턴스를 <xref:System.Collections.CollectionBase.InnerList%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-284">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-285">이 메서드의 기본 구현에는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-285">The default implementation of this method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-286">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-286">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bb8c6-287"><paramref name="value" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-287"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-288">이 메서드를 기본 표준 동작을 실행할 때 수행 해야 하는 프로세스를 정의 하는 데 사용 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-288">This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="bb8c6-289">이 메서드를 정의 하 여 구현자는 다른 모든 메서드를 재정의 하지 않고 상속 된 메서드를 기능을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-289">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="bb8c6-290"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 컬렉션에 허용 되는 개체의 유형에 제한이 적용 하려면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-290"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> can be used to impose restrictions on the type of objects that are accepted into the collection.</span></span> <span data-ttu-id="bb8c6-291">기본 구현에서는 <see langword="null" /> 에 추가 하거나 기본 제거할 <see cref="T:System.Collections.ArrayList" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-291">The default implementation prevents <see langword="null" /> from being added to or removed from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span>  
  
 <span data-ttu-id="bb8c6-292"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 이전에 호출 됩니다 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-292"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="collectionBase.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-293">제거할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-293">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="bb8c6-294"><see cref="T:System.Collections.CollectionBase" /> 인스턴스의 지정한 인덱스에서 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-294">Removes the element at the specified index of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="bb8c6-295">이 메서드는 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-295">This method is not overridable.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-296">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-296">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="bb8c6-297">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-297">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="bb8c6-298">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-298">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="bb8c6-299">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-299">This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bb8c6-300"><paramref name="index" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-300"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="bb8c6-301">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-301">-or-</span></span> 
 <span data-ttu-id="bb8c6-302"><paramref name="index" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-302"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-303">이 메서드를 호출 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />하십시오 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-303">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="bb8c6-304"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-304">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.CollectionBase" />.</span></span> <span data-ttu-id="bb8c6-305"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-305">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="bb8c6-306"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-306">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="bb8c6-307">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.CollectionBase" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-307">Copies the entire <see cref="T:System.Collections.CollectionBase" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-308">지정된 된 배열의 호환 되는 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-308">The specified array must be of a compatible type.</span></span>  
  
 <span data-ttu-id="bb8c6-309">이 메서드는 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-309">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="bb8c6-310">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-310">This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bb8c6-311"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-311"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bb8c6-312"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-312"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bb8c6-313"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-313"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="bb8c6-314">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-314">-or-</span></span> 
<span data-ttu-id="bb8c6-315">소스 <see cref="T:System.Collections.CollectionBase" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-315">The number of elements in the source <see cref="T:System.Collections.CollectionBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="bb8c6-316">소스 <see cref="T:System.Collections.CollectionBase" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-316">The type of the source <see cref="T:System.Collections.CollectionBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-317"><see cref="T:System.Collections.CollectionBase" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-317">Gets a value indicating whether access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="bb8c6-318"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.CollectionBase" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-318"><see langword="true" /> if access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bb8c6-319">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-319">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-320"><xref:System.Collections.CollectionBase> 인스턴스 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-320">A <xref:System.Collections.CollectionBase> instance is not synchronized.</span></span> <span data-ttu-id="bb8c6-321">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.CollectionBase> 를 사용 하는 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-321">Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="bb8c6-322">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-322">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="bb8c6-323">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-323">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="bb8c6-324">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-324">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="bb8c6-325">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="bb8c6-325">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.CollectionBase#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.CollectionBase#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/remarks.vb#2)]  
  
 <span data-ttu-id="bb8c6-326">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-326">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-327"><see cref="T:System.Collections.CollectionBase" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-327">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <value><span data-ttu-id="bb8c6-328"><see cref="T:System.Collections.CollectionBase" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-328">An object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-329">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.CollectionBase> 를 사용 하는 <xref:System.Collections.ICollection.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-329">Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="bb8c6-330">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.ICollection.SyncRoot%2A> 의 합니다 <xref:System.Collections.CollectionBase>에서 직접는 <xref:System.Collections.CollectionBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-330">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>.</span></span> <span data-ttu-id="bb8c6-331">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-331">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="bb8c6-332">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.CollectionBase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-332">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object.</span></span>  
  
 <span data-ttu-id="bb8c6-333">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-333">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="bb8c6-334">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-334">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="bb8c6-335">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-335">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="bb8c6-336">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="bb8c6-336">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.CollectionBase#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.CollectionBase#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/remarks.vb#2)]  
  
 <span data-ttu-id="bb8c6-337">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-337">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bb8c6-338"><see cref="T:System.Object" />의 끝에 추가할 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-338">The <see cref="T:System.Object" /> to be added to the end of the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-339">개체를 <see cref="T:System.Collections.CollectionBase" />의 끝 부분에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-339">Adds an object to the end of the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <returns><span data-ttu-id="bb8c6-340"><paramref name="value" />가 추가된 <see cref="T:System.Collections.CollectionBase" /> 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-340">The <see cref="T:System.Collections.CollectionBase" /> index at which the <paramref name="value" /> has been added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-341">경우 <xref:System.Collections.CollectionBase.Count%2A> 이미 용량과, 용량 목록을 자동으로 내부 배열을 다시 할당 하 고 새 요소가 추가 되기 전에 기존 요소를 새 배열에 복사 하 여 두 배가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-341">If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="bb8c6-342">경우 <xref:System.Collections.CollectionBase.Count%2A> 작습니다 용량 보다이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-342">If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an O(1) operation.</span></span> <span data-ttu-id="bb8c6-343">이 메서드는 O가 용량을 늘려야 하는 새 요소를 수용할 수 있도록 하는 경우 (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-343">If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-344">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-344">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="bb8c6-345"><see cref="T:System.Collections.CollectionBase" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-345">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="bb8c6-346">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-346">-or-</span></span> 
<span data-ttu-id="bb8c6-347"><see cref="T:System.Collections.CollectionBase" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-347">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-348">이 메서드를 호출 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />하십시오 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-348">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bb8c6-349"><see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-349">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-350"><see cref="T:System.Collections.CollectionBase" />에 특정 요소가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-350">Determines whether the <see cref="T:System.Collections.CollectionBase" /> contains a specific element.</span></span></summary>
        <returns><span data-ttu-id="bb8c6-351"><see cref="T:System.Collections.CollectionBase" />에 지정된 <paramref name="value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-351"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> contains the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-352">이 메서드는; 선형 검색을 수행합니다. 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-352">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-353">이 메서드를 호출 하 여 같은지 확인 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-353">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bb8c6-354">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0부터 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드 `item` 결정할 여부를 `item` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-354">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists.</span></span> <span data-ttu-id="bb8c6-355">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-355">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-356">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-356">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="bb8c6-357">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="bb8c6-357">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bb8c6-358"><see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-358">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-359">지정한 <see cref="T:System.Object" />를 검색하고, 전체 <see cref="T:System.Collections.CollectionBase" /> 내에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-359">Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <returns><span data-ttu-id="bb8c6-360"><paramref name="value" />가 있으면 전체 <see cref="T:System.Collections.CollectionBase" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-360">The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.CollectionBase" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-361">이 메서드는; 선형 검색을 수행합니다. 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-361">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-362">이 메서드를 호출 하 여 같은지 확인 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-362">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bb8c6-363">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0부터 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드 `item` 결정할 여부를 `item` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-363">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists.</span></span> <span data-ttu-id="bb8c6-364">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-364">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-365">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-365">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="bb8c6-366">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="bb8c6-366">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-367"><paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-367">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="bb8c6-368">삽입할 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-368">The <see cref="T:System.Object" /> to insert.</span></span></param>
        <summary><span data-ttu-id="bb8c6-369"><see cref="T:System.Collections.CollectionBase" />의 지정된 인덱스에 요소를 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-369">Inserts an element into the <see cref="T:System.Collections.CollectionBase" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-370">경우 <xref:System.Collections.CollectionBase.Count%2A> 이미 용량과, 용량 목록을 자동으로 새 요소를 삽입 하기 전에 내부 배열을 다시 할당 하 여 두 배가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-370">If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</span></span>  
  
 <span data-ttu-id="bb8c6-371">하는 경우 `index` 값과 같음 <xref:System.Collections.CollectionBase.Count%2A>를 `value` 끝에 추가 됩니다 <xref:System.Collections.CollectionBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-371">If `index` is equal to <xref:System.Collections.CollectionBase.Count%2A>, `value` is added to the end of <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="bb8c6-372">목록처럼 연속된 요소로 구성된 컬렉션에서는 삽입 지점 다음에 있는 요소를 아래로 이동하여 새 요소로 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-372">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="bb8c6-373">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-373">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="bb8c6-374">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-374">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="bb8c6-375">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-375">This method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-376">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-376">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bb8c6-377"><paramref name="index" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-377"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="bb8c6-378">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-378">-or-</span></span> 
 <span data-ttu-id="bb8c6-379"><paramref name="index" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-379"><paramref name="index" /> is greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="bb8c6-380"><see cref="T:System.Collections.CollectionBase" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-380">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="bb8c6-381">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-381">-or-</span></span> 
<span data-ttu-id="bb8c6-382"><see cref="T:System.Collections.CollectionBase" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-382">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-383">이 메서드를 호출 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />하십시오 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-383">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-384"><see cref="T:System.Collections.CollectionBase" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-384">Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="bb8c6-385"><see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.CollectionBase" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-385"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bb8c6-386">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-386">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-387">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-387">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="bb8c6-388">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-388">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="bb8c6-389">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-389">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bb8c6-390"><see cref="T:System.Collections.CollectionBase" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-390">Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="bb8c6-391"><see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.CollectionBase" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-391"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bb8c6-392">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-392">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-393">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-393">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="bb8c6-394">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-394">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="bb8c6-395">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-395">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="bb8c6-396">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-396">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="bb8c6-397">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-397">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="bb8c6-398">지정한 인덱스의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-398">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-399">이 속성은 `myCollection[index]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-399">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="bb8c6-400">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-400">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-401">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-401">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bb8c6-402"><paramref name="index" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-402"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="bb8c6-403">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-403">-or-</span></span> 
 <span data-ttu-id="bb8c6-404"><paramref name="index" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-404"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-405">이 속성이 설정 된 경우, 메서드 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-405">When this property is set, the methods <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> are called.</span></span></para></block>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bb8c6-406"><see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.CollectionBase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-406">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="bb8c6-407"><see cref="T:System.Collections.CollectionBase" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-407">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb8c6-408">경우는 <xref:System.Collections.CollectionBase> 지정된 된 개체를 포함 하지 않습니다는 <xref:System.Collections.CollectionBase> 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-408">If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged.</span></span> <span data-ttu-id="bb8c6-409">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-409">No exception is thrown.</span></span>  
  
 <span data-ttu-id="bb8c6-410">이 메서드는; 선형 검색을 수행합니다. 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.CollectionBase.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-410">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="bb8c6-411">이 메서드를 호출 하 여 같은지 확인 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-411">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="bb8c6-412">목록처럼 연속된 요소로 구성된 컬렉션에서는 제거된 요소 다음에 있는 요소를 위로 이동하여 빈 자리를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-412">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="bb8c6-413">컬렉션에 인덱스가 지정된 경우 이동되는 요소의 인덱스도 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-413">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="bb8c6-414">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화되어 있는 컬렉션에는 이러한 동작이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-414">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bb8c6-415">다음 코드 예제에서는 구현 된 <xref:System.Collections.CollectionBase> 클래스를 사용 하 여 구현에는 컬렉션을 만들 <xref:System.Int16> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-415">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bb8c6-416"><paramref name="value" /> 매개 변수가 <see cref="T:System.Collections.CollectionBase" /> 개체에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-416">The <paramref name="value" /> parameter was not found in the <see cref="T:System.Collections.CollectionBase" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="bb8c6-417"><see cref="T:System.Collections.CollectionBase" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="bb8c6-417">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="bb8c6-418">또는</span><span class="sxs-lookup"><span data-stu-id="bb8c6-418">-or-</span></span> 
<span data-ttu-id="bb8c6-419"><see cref="T:System.Collections.CollectionBase" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-419">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="bb8c6-420">이 메서드를 호출 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />하십시오 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, 및 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="bb8c6-420">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md"><span data-ttu-id="bb8c6-421">Culture의 영향을 받지 않는 문자열 작업 수행</span><span class="sxs-lookup"><span data-stu-id="bb8c6-421">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>