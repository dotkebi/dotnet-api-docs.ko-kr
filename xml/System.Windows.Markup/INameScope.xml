<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29b9eb9fa99fed54bf96e19b877f4570f609f006" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57962968" /></Metadata><TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="250fc-101">특정 XAML 이름 범위 내에서 요소의 이름에 액세스하는 방법과 해당 XAML 이름 범위 내에서 이름의 고유성을 적용하는 방법에 대한 계약을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="250fc-102">이 인터페이스는 템플릿을 통해 사용할 또는 지연 비유를 위한 자식 요소가 있는 클래스에서 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="250fc-103">템플릿, 팩터리 및 유사한 구문을 주 개체 그래프에서 분리 되어 XAML 루트는 고유한 XAML 이름 범위에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="250fc-104">이 원칙을가 있어야 한다는 이름 충돌의 DOM 작업 기술과 XAML 참조 이름 식별자를 사용 하는 이름에 사용할 수 있습니다 있도록 및 해당 자식 요소에서 생성 된 개체는 응용 프로그램의 개체 그래프에 도입 되 면 각 XAML 이름 범위에서 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="250fc-105">.NET Framework의 이전 버전에서는이 인터페이스는 WPF 관련 WindowsBase 어셈블리에 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="250fc-106">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> System.Xaml 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="250fc-107">자세한 내용은 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="250fc-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="250fc-108">WPF 사용 정보</span><span class="sxs-lookup"><span data-stu-id="250fc-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="250fc-109">이 인터페이스는 WPF 클래스에 의해 구현 됩니다 <xref:System.Windows.NameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="250fc-110">대부분의 XAML 이름 범위 작업 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 를 사용 하 여 작동 <xref:System.Windows.NameScope> 인스턴스, 하지만 정보를 따라 전달 됩니다 내부적으로 사용 하 여 <xref:System.Windows.Markup.INameScope> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="250fc-111">팩터리를 사용 하거나 지연 XAML 표현을 함께 비유는 WPF 클래스의 예로 <xref:System.Windows.Style> 고 <xref:System.Windows.FrameworkTemplate>입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="250fc-112">이러한 구현에서 사용할 수 있는 인터페이스 메서드의 명시적 버전에서 일반적으로 사용 하 여 <xref:System.Windows.NameScope> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
    <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="250fc-113">X:name 특성</span><span class="sxs-lookup"><span data-stu-id="250fc-113">x:Name Attribute</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="250fc-114">요청하는 개체의 이름 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-114">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="250fc-115">제공된 식별 이름이 있는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-115">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="250fc-116">개체입니다(있는 경우).</span><span class="sxs-lookup"><span data-stu-id="250fc-116">The object, if found.</span></span> <span data-ttu-id="250fc-117">해당 이름의 개체가 없으면 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-117">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="250fc-118">XAML 태그의 유효한 이름 문자열에 설명 된 요구 사항과 일치 해야 합니다 [XamlName 문법](~/docs/framework/xaml-services/xamlname-grammar.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-118">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="250fc-119">X:name 특성</span><span class="sxs-lookup"><span data-stu-id="250fc-119">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="scopedElement" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="250fc-120">등록할 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-120">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="250fc-121">제공된 <paramref name="name" />이 참조하는 특정 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-121">The specific element that the provided <paramref name="name" /> refers to.</span></span></param>
        <summary><span data-ttu-id="250fc-122">제공된 이름을 현재 XAML 이름 범위로 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-122">Registers the provided name into the current XAML namescope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="250fc-123">XAML 이름 범위에 중복 이름이 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-123">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="250fc-124">중복 이름이 등록 되도록 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-124">Do not permit duplicate names to be registered.</span></span> <span data-ttu-id="250fc-125">하는 경우 입력 <paramref name="name" /> 내부 컬렉션 표현의 XAML 이름 범위에 있는 기존 요소에 이미 할당 되어 (경우에 동일 <paramref name="scopedElement" />), 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-125">If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.</span></span>  
  
<span data-ttu-id="250fc-126">제공 된 이름에 맞지 않는 경우 예외를 throw 고려해 [XamlName 문법](~/docs/framework/xaml-services/xamlname-grammar.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-126">Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span></para></block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="250fc-127">등록을 취소할 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-127">The name to unregister.</span></span></param>
        <summary><span data-ttu-id="250fc-128">현재 XAML 이름 범위에서 제공된 이름의 등록을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-128">Unregisters the provided name from the current XAML namescope.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="250fc-129">입력된 이름이 없으면이 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-129">If the input name does not exist, throw an exception.</span></span>  
  
<span data-ttu-id="250fc-130">나중에 동일한 이름을 다시 등록할 수 있도록 이름과 컬렉션 표현의 XAML 이름 범위에서 참조 하는 이전에 등록 된 요소를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="250fc-130">You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</span></span></para></block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>