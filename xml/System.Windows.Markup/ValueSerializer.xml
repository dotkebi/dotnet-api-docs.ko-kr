<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d0bcead4cb9eb4ed8e1e1bf4db32bff7b856e73" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57936552" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4640a-101">개체 표현에서 serialization의 변환 동작을 정의하는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-101">Abstract class that defines conversion behavior for serialization from an object representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-102">Serialization에 대 한 변환기를 반환 하는 문자열 손실 없이 고 변환기 항상 특정 값에 대 한 동일한 문자열을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="4640a-103">경우 형식 변환기 (에서 파생 된 <xref:System.ComponentModel.TypeConverter>) 이러한 요구 사항에 맞지 않으면 해당 `ConvertTo` 문자열 출력에 대 한 구현을, 사용자 지정 <xref:System.Windows.Markup.ValueSerializer> 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="4640a-104">중 하나는 <xref:System.Windows.Markup.ValueSerializer> 요구 사항 또는 null을 충족 해야 <xref:System.Windows.Markup.ValueSerializer> 형식과 사용 하 여 연결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="4640a-105">A <xref:System.Windows.Markup.ValueSerializer> 적용 하 여 형식과 연결 됩니다는 <xref:System.Windows.Markup.ValueSerializerAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="4640a-106">Null <xref:System.Windows.Markup.ValueSerializer> convert를 문자열로 변환할 개체 그래프에 대 한 형식 변환기를 무시할지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4640a-107">구현의 <xref:System.Windows.Markup.ValueSerializer> 예외를 throw 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="4640a-108">Throw 된 예외 직렬화를 종료할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="4640a-109"><xref:System.Windows.Markup.IValueSerializerContext> 에 <xref:System.Windows.Markup.ValueSerializer> 및 해당 Api는 유사한 <xref:System.ComponentModel.ITypeDescriptorContext> 에 대 한는 <xref:System.ComponentModel.TypeConverter>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="4640a-110">사실 <xref:System.Windows.Markup.IValueSerializerContext> 상속 <xref:System.ComponentModel.ITypeDescriptorContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="4640a-111">경우는 <xref:System.Windows.Markup.ValueSerializer> 파생된 클래스 API 호출 되 면 호출자 (일반적으로 직렬 변환기 프로세스)는 특정 서비스를 제공할 수 있는 컨텍스트를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="4640a-112">일반적인 지침으로 인해는 <xref:System.Windows.Markup.ValueSerializer> 예외가 발생 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="4640a-113">컨텍스트에서 특정 서비스를 반환 하는 오류 예외도 throw 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="4640a-114">.NET Framework의 이전 버전에서는이 클래스는 WPF 관련 WindowsBase 어셈블리에 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="4640a-115">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> System.Xaml 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="4640a-116">자세한 내용은 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4640a-116">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4640a-117"><see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-118">이 생성자의 본문은 비어 있습니다. <xref:System.Windows.Markup.ValueSerializer> 클래스 초기화를 필요로 하는 값을 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-119">변환을 위해 평가할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-119">The string to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-120">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-120">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-121">파생 클래스에서 재정의된 경우 지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="4640a-122">값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-122"><see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-123">기본 구현은 항상 `false`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-124">변환을 위해 평가할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-124">The object to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-125">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-125">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-126">파생 클래스에서 재정의되는 경우 지정된 개체가 <see cref="T:System.String" />으로 변환될 수 있는지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="4640a-127"><paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false." />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-127"><see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-128">기본 구현은 항상 `false`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-129">변환할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-129">The string to convert.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-130">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-130">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-131">파생 클래스에서 재정의된 경우 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="4640a-132">제공된 <paramref name="value" />를 기반으로 하여 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 새 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-133">기본 구현은 항상 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4640a-134"><paramref name="value" />를 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4640a-134"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="4640a-135">구현에서 예외를 throw 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="4640a-135">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="4640a-136"><see cref="T:System.Windows.Markup.ValueSerializer" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4640a-136">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-137">문자열로 변환할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-137">The object to convert into a string.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-138">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-138">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-139">파생 클래스에서 재정의된 경우 지정된 개체를 <see cref="T:System.String" />으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-139">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="4640a-140">지정한 개체의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-140">A string representation of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-141">기본 구현은 항상 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-141">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4640a-142"><paramref name="value" />를 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4640a-142"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="4640a-143">구현에서 예외를 throw 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="4640a-143">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="4640a-144"><see cref="T:System.Windows.Markup.ValueSerializer" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4640a-144">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-145">변환할 수 없는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-145">The object that could not be converted.</span></span></param>
        <summary><span data-ttu-id="4640a-146">변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-146">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="4640a-147"><see langword="ConvertFrom" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-147">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-148">실제 `throw` 키워드는이 메서드에 의해 호출 되지 않습니다를 하므로 일반적인 사용법은 `throw GetConvertFromException` (제공 하는 매개 변수)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-148">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="4640a-149">반환 된 특정 예외 <xref:System.InvalidOperationException>를 사용 하 여 `value` 예외 메시지에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-149">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="4640a-150">사용 패턴의 예외 유틸리티 동일 <xref:System.ComponentModel.TypeConverter>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-150">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="destinationType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-151">변환할 수 없는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-151">The object that could not be converted.</span></span></param>
        <param name="destinationType"><span data-ttu-id="4640a-152">변환할 대상 형식을 나타내는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-152">A type that represents the type the conversion was trying to convert to.</span></span></param>
        <summary><span data-ttu-id="4640a-153">변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-153">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="4640a-154"><see langword="ConvertTo" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-154">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-155">실제 `throw` 키워드는이 메서드에 의해 호출 되지 않습니다, 일반적인 사용법은 따라서 `throw GetConvertToException` (사용 하 여 `value` 매개 변수가 제공).</span><span class="sxs-lookup"><span data-stu-id="4640a-155">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="4640a-156">반환 된 특정 예외 <xref:System.InvalidOperationException>를 사용 하 여 `value` 예외 메시지에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-156">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="4640a-157">사용 패턴의 예외 유틸리티 동일 <xref:System.ComponentModel.TypeConverter>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-157">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4640a-158">개체에 대한 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="4640a-159">serialize될 속성에 대한 CLR 속성 설명자입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-159">The CLR property descriptor for the property to be serialized.</span></span></param>
        <summary><span data-ttu-id="4640a-160">속성에 대한 CLR 속성 설명자를 전달하여 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-160">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span></span></summary>
        <returns><span data-ttu-id="4640a-161">지정된 속성과 연결된 serializer입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-161">The serializer associated with the specified property.</span></span> <span data-ttu-id="4640a-162"><see langword="null" />을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-162">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-163">A <xref:System.Windows.Markup.ValueSerializer> 속성 또는 속성에 대 한 값으로 사용 되는 형식에 대 한 적용 하 여 표시 됩니다는 <xref:System.Windows.Markup.ValueSerializerAttribute> 속성 또는 형식 선언에는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-163">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="4640a-164">합니다 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 메서드는 CLR 형식 시스템의 정보를 읽고 새 반환 하는 유틸리티 메서드 <xref:System.Windows.Markup.ValueSerializer> 클래스 특성을 기반으로 하는 경우 속성을 찾을 수 없거나 속성의 형식에서 발견 된 경우.</span><span class="sxs-lookup"><span data-stu-id="4640a-164">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="4640a-165">`null` 반환 될 수 있습니다 이러한 serializer가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="4640a-165">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="4640a-166">`null` 경우 형식 또는 속성을 고의적으로 null 값 반환 될 수도 <xref:System.Windows.Markup.ValueSerializerAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-166">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="4640a-167">다른 모드는 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 지 원하는 내부 반환 하는 `TypeConverterValueSerializer` 클래스를 <xref:System.Windows.Markup.ValueSerializer> 래핑하는 구현을 <xref:System.ComponentModel.TypeConverter> 변환 하 고는 `Convert` 메서드를 `Convert*String` 메서드 (예를 들어 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>의 입력으로 호출 되는 <xref:System.String> 를 입력 하 고 변환 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-167">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="4640a-168">이 작업은 다음 모두 만족 하는 경우에만 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-168">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="4640a-169"><xref:System.ComponentModel.TypeConverterAttribute> 관련 속성 또는 관련 속성의 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-169">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="4640a-170">표시 된 <xref:System.ComponentModel.TypeConverter> 성공적으로 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-170">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="4640a-171">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="4640a-172">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-172">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="4640a-173">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-173">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4640a-174">다음은 특수 한 경우: <xref:System.DateTime> 반환 형식을 <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> 형식은 내부 이지만 기능 직렬 변환기를 반환 (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="4640a-174">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4640a-175"><paramref name="descriptor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-175"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="4640a-176"><see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-176">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <summary><span data-ttu-id="4640a-177">지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-177">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span></span></summary>
        <returns><span data-ttu-id="4640a-178">지정된 형식과 연결된 serializer입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-178">The serializer associated with the specified type.</span></span> <span data-ttu-id="4640a-179"><see langword="null" />을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-179">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-180">A <xref:System.Windows.Markup.ValueSerializer> 형식을 적용 하 여 표시 됩니다에 대 한는 <xref:System.Windows.Markup.ValueSerializerAttribute> 형식 선언에는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-180">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="4640a-181">합니다 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 메서드는 CLR 형식 시스템의 정보를 읽고 새 반환 하는 유틸리티 메서드입니다 <xref:System.Windows.Markup.ValueSerializer> 클래스 특성을 기반으로 하는 경우에 지정 된 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-181">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="4640a-182">`null` 반환 될 수 있습니다 이러한 serializer가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="4640a-182">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="4640a-183">`null` 형식이 null 값을 사용 하 여 고의적 경우 반환 될 수도 <xref:System.Windows.Markup.ValueSerializerAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-183">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="4640a-184">다른 모드는 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 지 원하는 내부 반환 하는 `TypeConverterValueSerializer` 클래스를 <xref:System.Windows.Markup.ValueSerializer> 래핑하는 구현을 <xref:System.ComponentModel.TypeConverter> 변환 하 고는 `Convert` 메서드를 `Convert*String` 메서드 (예를 들어 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>의 입력으로 호출 되는 <xref:System.String> 를 입력 하 고 변환 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-184">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="4640a-185">이 작업은 다음 모두 만족 하는 경우에만 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-185">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="4640a-186">A <xref:System.ComponentModel.TypeConverterAttribute> 에서 발견 된 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-186">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="4640a-187">표시 된 <xref:System.ComponentModel.TypeConverter> 성공적으로 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-187">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="4640a-188">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="4640a-189">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-189">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="4640a-190">합니다 <xref:System.ComponentModel.TypeConverter> 반환 `true` 에 대 한 <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>참조 라는 <xref:System.String> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-190">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4640a-191">다음은 특수 한 경우: <xref:System.DateTime> 반환 형식을 <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> 형식은 내부 이지만 기능 직렬 변환기를 반환 (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="4640a-191">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4640a-192"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-192"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="4640a-193">serialize할 속성에 대한 설명자입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-193">Descriptor for the property to be serialized.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-194">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-194">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-195">지정된 컨텍스트를 사용하여 지정된 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-195">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="4640a-196">지정된 속성과 연결된 serializer입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-196">The serializer associated with the specified property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-197">에 순수 하 게 신뢰 하는 대신 특성 보고를 CLR 형식 시스템에서는이 오버 로드를 사용 합니다 `context` 서비스로 서비스의 구현을 호출 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-197">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4640a-198">합니다 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 구현을 일반적으로 사용 합니다 `descriptor`, 특정 컨텍스트에 대 한 특별 한 동작을 구현할 수 있지만.</span><span class="sxs-lookup"><span data-stu-id="4640a-198">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="4640a-199">호출자가 사용할 수 있는 경우이 메서드를 호출 해야 <xref:System.Windows.Markup.IValueSerializerContext> 서비스에서.</span><span class="sxs-lookup"><span data-stu-id="4640a-199">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="4640a-200">이렇게 하면 올바른 <xref:System.Windows.Markup.ValueSerializer> 특정 컨텍스트에 대해 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-200">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="4640a-201">컨텍스트를 반환 하는 경우 `null` 에서 해당 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 사용자 지정 `descriptor`를 지정할 컨텍스트가 또는 `null`, 동작은 동일한 호출 하는 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-201">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4640a-202"><paramref name="descriptor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-202"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="4640a-203"><see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-203">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-204">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-204">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-205">지정된 컨텍스트를 사용하여 지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-205">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="4640a-206">지정된 형식과 연결된 serializer입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-206">The serializer associated with the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-207">에 순수 하 게 신뢰 하는 대신 특성 보고를 CLR 형식 시스템에서는이 오버 로드를 사용 합니다 `context` 서비스로 서비스의 구현을 호출 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-207">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4640a-208">합니다 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 구현을 일반적으로 사용 합니다 `type`, 특정 컨텍스트에 대 한 특별 한 동작을 구현할 수 있지만.</span><span class="sxs-lookup"><span data-stu-id="4640a-208">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="4640a-209">호출자가 사용할 수 있는 경우이 메서드를 호출 해야 <xref:System.Windows.Markup.IValueSerializerContext> 서비스에서.</span><span class="sxs-lookup"><span data-stu-id="4640a-209">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="4640a-210">이렇게 하면 올바른 <xref:System.Windows.Markup.ValueSerializer> 특정 컨텍스트에 대해 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-210">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="4640a-211">컨텍스트를 반환 하는 경우 `null` 에서 해당 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 사용자 지정 `type`를 지정할 컨텍스트가 또는 `null`, 동작은 동일한 호출 하는 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-211">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4640a-212"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-212"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4640a-213">serialize되는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-213">The value being serialized.</span></span></param>
        <param name="context"><span data-ttu-id="4640a-214">변환에 사용되는 컨텍스트 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-214">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="4640a-215"><see cref="T:System.Windows.Markup.ValueSerializer" />에서 참조되는 형식의 열거형을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-215">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></summary>
        <returns><span data-ttu-id="4640a-216">이 serializer에서 변환하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-216">The types converted by this serializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4640a-217">모든 형식에 <xref:System.Windows.Markup.ValueSerializer> 변환 반환된 된 열거형에 포함 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-217">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="4640a-218">이렇게 하면 직렬 변환기를 역직렬화 serializer에서이 직렬 변환기이가 변환 유형에 대 한 충분 한 정보를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-218">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="4640a-219">이 메서드를 재정의 하는 것은 고급 시나리오입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-219">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="4640a-220">재정의 필요는 시스템을 구현 하는 경우 CLR 형식 시스템 ownertype 속성 관계 XAML 스키마 컨텍스트를 사용할 수 있는 충분 한 정보 보고 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-220">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="4640a-221">WPF 사용 정보</span><span class="sxs-lookup"><span data-stu-id="4640a-221">WPF Usage Notes</span></span>  
 <span data-ttu-id="4640a-222">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 재정의 하는 내부 값 직렬 변환기를 구현 하는 속성 시스템 <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> 종속성 속성에 소유자를 추가할 수는 개념이 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-222">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="4640a-223">또한 식에는 특수 내부 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4640a-223">expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>